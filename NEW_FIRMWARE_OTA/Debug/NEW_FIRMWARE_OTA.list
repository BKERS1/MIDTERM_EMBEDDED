
NEW_FIRMWARE_OTA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08007464  08007464  00008464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c4  080077c4  00009074  2**0
                  CONTENTS
  4 .ARM          00000008  080077c4  080077c4  000087c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077cc  080077cc  00009074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077cc  080077cc  000087cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077d0  080077d0  000087d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  080077d4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014c74  20000074  08007848  00009074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20014ce8  08007848  00009ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d8c  00000000  00000000  000090a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031ee  00000000  00000000  0001be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001080  00000000  00000000  0001f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ca0  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003b17  00000000  00000000  00020d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000129a1  00000000  00000000  00024857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bf6  00000000  00000000  000371f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7dee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c24  00000000  00000000  000c7e34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cca58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800744c 	.word	0x0800744c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	0800744c 	.word	0x0800744c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <pr_log>:
/* USER CODE BEGIN 0 */
char print_buf[128] = {0} ;
char recv_fw_done = 0 ;
char new_fw_msg[] = "have new firmware" ;
void pr_log(char* msg,...)
{
 8000580:	b40f      	push	{r0, r1, r2, r3}
 8000582:	b580      	push	{r7, lr}
 8000584:	b082      	sub	sp, #8
 8000586:	af00      	add	r7, sp, #0
	  memset(print_buf, 0, sizeof(print_buf)) ;
 8000588:	2280      	movs	r2, #128	@ 0x80
 800058a:	2100      	movs	r1, #0
 800058c:	480e      	ldr	r0, [pc, #56]	@ (80005c8 <pr_log+0x48>)
 800058e:	f005 fe3f 	bl	8006210 <memset>
		va_list args ;
		va_start(args, msg) ;
 8000592:	f107 0314 	add.w	r3, r7, #20
 8000596:	607b      	str	r3, [r7, #4]
	    vsprintf(print_buf, msg, args) ;
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	6939      	ldr	r1, [r7, #16]
 800059c:	480a      	ldr	r0, [pc, #40]	@ (80005c8 <pr_log+0x48>)
 800059e:	f005 fe2d 	bl	80061fc <vsiprintf>
	    va_end(args) ;
		HAL_UART_Transmit(&huart1, (uint8_t*)print_buf, strlen(print_buf), HAL_MAX_DELAY) ;
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <pr_log+0x48>)
 80005a4:	f7ff fe1c 	bl	80001e0 <strlen>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	4905      	ldr	r1, [pc, #20]	@ (80005c8 <pr_log+0x48>)
 80005b2:	4806      	ldr	r0, [pc, #24]	@ (80005cc <pr_log+0x4c>)
 80005b4:	f002 f9e2 	bl	800297c <HAL_UART_Transmit>

}
 80005b8:	bf00      	nop
 80005ba:	3708      	adds	r7, #8
 80005bc:	46bd      	mov	sp, r7
 80005be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005c2:	b004      	add	sp, #16
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	200101a4 	.word	0x200101a4
 80005cc:	20000090 	.word	0x20000090

080005d0 <HAL_UART_RxHalfCpltCallback>:
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80005d0:	b480      	push	{r7}
 80005d2:	b083      	sub	sp, #12
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	recv_fw_done = 1 ;
 80005d8:	4b04      	ldr	r3, [pc, #16]	@ (80005ec <HAL_UART_RxHalfCpltCallback+0x1c>)
 80005da:	2201      	movs	r2, #1
 80005dc:	701a      	strb	r2, [r3, #0]
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20010224 	.word	0x20010224

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f4:	f000 fbf2 	bl	8000ddc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f8:	f000 f836 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fc:	f000 f8e4 	bl	80007c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000600:	f000 f8ba 	bl	8000778 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f88e 	bl	8000724 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000608:	f003 f838 	bl	800367c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task1 */
  task1Handle = osThreadNew(Function_1, NULL, &task1_attributes);
 800060c:	4a0d      	ldr	r2, [pc, #52]	@ (8000644 <main+0x54>)
 800060e:	2100      	movs	r1, #0
 8000610:	480d      	ldr	r0, [pc, #52]	@ (8000648 <main+0x58>)
 8000612:	f003 f87d 	bl	8003710 <osThreadNew>
 8000616:	4603      	mov	r3, r0
 8000618:	4a0c      	ldr	r2, [pc, #48]	@ (800064c <main+0x5c>)
 800061a:	6013      	str	r3, [r2, #0]

  /* creation of task2 */
  task2Handle = osThreadNew(Function_2, NULL, &task2_attributes);
 800061c:	4a0c      	ldr	r2, [pc, #48]	@ (8000650 <main+0x60>)
 800061e:	2100      	movs	r1, #0
 8000620:	480c      	ldr	r0, [pc, #48]	@ (8000654 <main+0x64>)
 8000622:	f003 f875 	bl	8003710 <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a0b      	ldr	r2, [pc, #44]	@ (8000658 <main+0x68>)
 800062a:	6013      	str	r3, [r2, #0]

  /* creation of task3 */
  task3Handle = osThreadNew(Function_3, NULL, &task3_attributes);
 800062c:	4a0b      	ldr	r2, [pc, #44]	@ (800065c <main+0x6c>)
 800062e:	2100      	movs	r1, #0
 8000630:	480b      	ldr	r0, [pc, #44]	@ (8000660 <main+0x70>)
 8000632:	f003 f86d 	bl	8003710 <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a0a      	ldr	r2, [pc, #40]	@ (8000664 <main+0x74>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f003 f842 	bl	80036c4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <main+0x50>
 8000644:	080075e8 	.word	0x080075e8
 8000648:	08000851 	.word	0x08000851
 800064c:	20000198 	.word	0x20000198
 8000650:	0800760c 	.word	0x0800760c
 8000654:	08000889 	.word	0x08000889
 8000658:	2000019c 	.word	0x2000019c
 800065c:	08007630 	.word	0x08007630
 8000660:	080008c1 	.word	0x080008c1
 8000664:	200001a0 	.word	0x200001a0

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	@ 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	@ 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 fdca 	bl	8006210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b22      	ldr	r3, [pc, #136]	@ (800071c <SystemClock_Config+0xb4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000694:	4a21      	ldr	r2, [pc, #132]	@ (800071c <SystemClock_Config+0xb4>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	@ 0x40
 800069c:	4b1f      	ldr	r3, [pc, #124]	@ (800071c <SystemClock_Config+0xb4>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000720 <SystemClock_Config+0xb8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000720 <SystemClock_Config+0xb8>)
 80006b2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006b6:	6013      	str	r3, [r2, #0]
 80006b8:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <SystemClock_Config+0xb8>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c4:	2302      	movs	r3, #2
 80006c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c8:	2301      	movs	r3, #1
 80006ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006cc:	2310      	movs	r3, #16
 80006ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	f107 0320 	add.w	r3, r7, #32
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fca7 	bl	800202c <HAL_RCC_OscConfig>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006e4:	f000 f9ee 	bl	8000ac4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006ec:	2300      	movs	r3, #0
 80006ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2100      	movs	r1, #0
 8000702:	4618      	mov	r0, r3
 8000704:	f001 ff0a 	bl	800251c <HAL_RCC_ClockConfig>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800070e:	f000 f9d9 	bl	8000ac4 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	3750      	adds	r7, #80	@ 0x50
 8000716:	46bd      	mov	sp, r7
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40007000 	.word	0x40007000

08000724 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000728:	4b11      	ldr	r3, [pc, #68]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 800072a:	4a12      	ldr	r2, [pc, #72]	@ (8000774 <MX_USART1_UART_Init+0x50>)
 800072c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800072e:	4b10      	ldr	r3, [pc, #64]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 8000730:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000734:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000736:	4b0e      	ldr	r3, [pc, #56]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800073c:	4b0c      	ldr	r3, [pc, #48]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 800073e:	2200      	movs	r2, #0
 8000740:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000742:	4b0b      	ldr	r3, [pc, #44]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 8000744:	2200      	movs	r2, #0
 8000746:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000748:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 800074a:	220c      	movs	r2, #12
 800074c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800074e:	4b08      	ldr	r3, [pc, #32]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 8000750:	2200      	movs	r2, #0
 8000752:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000754:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800075a:	4805      	ldr	r0, [pc, #20]	@ (8000770 <MX_USART1_UART_Init+0x4c>)
 800075c:	f002 f8be 	bl	80028dc <HAL_UART_Init>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000766:	f000 f9ad 	bl	8000ac4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000090 	.word	0x20000090
 8000774:	40011000 	.word	0x40011000

08000778 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	4b10      	ldr	r3, [pc, #64]	@ (80007c4 <MX_DMA_Init+0x4c>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	4a0f      	ldr	r2, [pc, #60]	@ (80007c4 <MX_DMA_Init+0x4c>)
 8000788:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800078c:	6313      	str	r3, [r2, #48]	@ 0x30
 800078e:	4b0d      	ldr	r3, [pc, #52]	@ (80007c4 <MX_DMA_Init+0x4c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800079a:	2200      	movs	r2, #0
 800079c:	2105      	movs	r1, #5
 800079e:	203a      	movs	r0, #58	@ 0x3a
 80007a0:	f000 fc7f 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80007a4:	203a      	movs	r0, #58	@ 0x3a
 80007a6:	f000 fc98 	bl	80010da <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2105      	movs	r1, #5
 80007ae:	2046      	movs	r0, #70	@ 0x46
 80007b0:	f000 fc77 	bl	80010a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80007b4:	2046      	movs	r0, #70	@ 0x46
 80007b6:	f000 fc90 	bl	80010da <HAL_NVIC_EnableIRQ>

}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40023800 	.word	0x40023800

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 030c 	add.w	r3, r7, #12
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60bb      	str	r3, [r7, #8]
 80007e2:	4b19      	ldr	r3, [pc, #100]	@ (8000848 <MX_GPIO_Init+0x80>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a18      	ldr	r2, [pc, #96]	@ (8000848 <MX_GPIO_Init+0x80>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b16      	ldr	r3, [pc, #88]	@ (8000848 <MX_GPIO_Init+0x80>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	4b12      	ldr	r3, [pc, #72]	@ (8000848 <MX_GPIO_Init+0x80>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a11      	ldr	r2, [pc, #68]	@ (8000848 <MX_GPIO_Init+0x80>)
 8000804:	f043 0302 	orr.w	r3, r3, #2
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b0f      	ldr	r3, [pc, #60]	@ (8000848 <MX_GPIO_Init+0x80>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0302 	and.w	r3, r3, #2
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800081c:	480b      	ldr	r0, [pc, #44]	@ (800084c <MX_GPIO_Init+0x84>)
 800081e:	f001 fbeb 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000822:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000826:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000828:	2301      	movs	r3, #1
 800082a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4804      	ldr	r0, [pc, #16]	@ (800084c <MX_GPIO_Init+0x84>)
 800083c:	f001 fa58 	bl	8001cf0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	40020c00 	.word	0x40020c00

08000850 <Function_1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Function_1 */
void Function_1(void *argument)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET) ;
 8000858:	2201      	movs	r2, #1
 800085a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800085e:	4809      	ldr	r0, [pc, #36]	@ (8000884 <Function_1+0x34>)
 8000860:	f001 fbca 	bl	8001ff8 <HAL_GPIO_WritePin>
	osDelay(1000) ;
 8000864:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000868:	f002 ffe4 	bl	8003834 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET) ;
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000872:	4804      	ldr	r0, [pc, #16]	@ (8000884 <Function_1+0x34>)
 8000874:	f001 fbc0 	bl	8001ff8 <HAL_GPIO_WritePin>
	osDelay(1000) ;
 8000878:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800087c:	f002 ffda 	bl	8003834 <osDelay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET) ;
 8000880:	bf00      	nop
 8000882:	e7e9      	b.n	8000858 <Function_1+0x8>
 8000884:	40020c00 	.word	0x40020c00

08000888 <Function_2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function_2 */
void Function_2(void *argument)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_2 */
  /* Infinite loop */
  for(;;)
  {
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET) ;
 8000890:	2201      	movs	r2, #1
 8000892:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000896:	4809      	ldr	r0, [pc, #36]	@ (80008bc <Function_2+0x34>)
 8000898:	f001 fbae 	bl	8001ff8 <HAL_GPIO_WritePin>
	 osDelay(500) ;
 800089c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008a0:	f002 ffc8 	bl	8003834 <osDelay>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET) ;
 80008a4:	2200      	movs	r2, #0
 80008a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008aa:	4804      	ldr	r0, [pc, #16]	@ (80008bc <Function_2+0x34>)
 80008ac:	f001 fba4 	bl	8001ff8 <HAL_GPIO_WritePin>
	 osDelay(500) ;
 80008b0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80008b4:	f002 ffbe 	bl	8003834 <osDelay>
	 HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET) ;
 80008b8:	bf00      	nop
 80008ba:	e7e9      	b.n	8000890 <Function_2+0x8>
 80008bc:	40020c00 	.word	0x40020c00

080008c0 <Function_3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Function_3 */
void Function_3(void *argument)
{
 80008c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Function_3 */
	pr_log("START FIRMWARE V2.0\n") ;
 80008ca:	486c      	ldr	r0, [pc, #432]	@ (8000a7c <Function_3+0x1bc>)
 80008cc:	f7ff fe58 	bl	8000580 <pr_log>
	HAL_UART_Receive_DMA(&huart1, rx_buf, sizeof(rx_buf)) ;
 80008d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008d4:	496a      	ldr	r1, [pc, #424]	@ (8000a80 <Function_3+0x1c0>)
 80008d6:	486b      	ldr	r0, [pc, #428]	@ (8000a84 <Function_3+0x1c4>)
 80008d8:	f002 f8db 	bl	8002a92 <HAL_UART_Receive_DMA>
  /* Infinite loop */
  for(;;){
	  if (strstr((char*)rx_buf, "\n")){
 80008dc:	210a      	movs	r1, #10
 80008de:	4868      	ldr	r0, [pc, #416]	@ (8000a80 <Function_3+0x1c0>)
 80008e0:	f005 fc9e 	bl	8006220 <strchr>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 80c3 	beq.w	8000a72 <Function_3+0x1b2>
	  		if (strstr((char*)rx_buf, "blue led on")){
 80008ec:	4966      	ldr	r1, [pc, #408]	@ (8000a88 <Function_3+0x1c8>)
 80008ee:	4864      	ldr	r0, [pc, #400]	@ (8000a80 <Function_3+0x1c0>)
 80008f0:	f005 fca3 	bl	800623a <strstr>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d009      	beq.n	800090e <Function_3+0x4e>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET) ;
 80008fa:	2201      	movs	r2, #1
 80008fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000900:	4862      	ldr	r0, [pc, #392]	@ (8000a8c <Function_3+0x1cc>)
 8000902:	f001 fb79 	bl	8001ff8 <HAL_GPIO_WritePin>
	  			pr_log("blue led on --> OK \n") ;
 8000906:	4862      	ldr	r0, [pc, #392]	@ (8000a90 <Function_3+0x1d0>)
 8000908:	f7ff fe3a 	bl	8000580 <pr_log>
 800090c:	e0a2      	b.n	8000a54 <Function_3+0x194>
	  		}
	  		else if (strstr((char*)rx_buf, "blue led off")){
 800090e:	4961      	ldr	r1, [pc, #388]	@ (8000a94 <Function_3+0x1d4>)
 8000910:	485b      	ldr	r0, [pc, #364]	@ (8000a80 <Function_3+0x1c0>)
 8000912:	f005 fc92 	bl	800623a <strstr>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d009      	beq.n	8000930 <Function_3+0x70>
	  			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_RESET) ;
 800091c:	2200      	movs	r2, #0
 800091e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000922:	485a      	ldr	r0, [pc, #360]	@ (8000a8c <Function_3+0x1cc>)
 8000924:	f001 fb68 	bl	8001ff8 <HAL_GPIO_WritePin>
	  			pr_log("blue led off --> OK \n") ;
 8000928:	485b      	ldr	r0, [pc, #364]	@ (8000a98 <Function_3+0x1d8>)
 800092a:	f7ff fe29 	bl	8000580 <pr_log>
 800092e:	e091      	b.n	8000a54 <Function_3+0x194>
	  		}
	  		else if (strstr((char*)rx_buf, "update")){
 8000930:	495a      	ldr	r1, [pc, #360]	@ (8000a9c <Function_3+0x1dc>)
 8000932:	4853      	ldr	r0, [pc, #332]	@ (8000a80 <Function_3+0x1c0>)
 8000934:	f005 fc81 	bl	800623a <strstr>
 8000938:	4603      	mov	r3, r0
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 808a 	beq.w	8000a54 <Function_3+0x194>
				pr_log("FIRMWARE_SIZE? \n") ;
 8000940:	4857      	ldr	r0, [pc, #348]	@ (8000aa0 <Function_3+0x1e0>)
 8000942:	f7ff fe1d 	bl	8000580 <pr_log>
				HAL_UART_DMAStop(&huart1);
 8000946:	484f      	ldr	r0, [pc, #316]	@ (8000a84 <Function_3+0x1c4>)
 8000948:	f002 f8c8 	bl	8002adc <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart1,rx_buf,sizeof(rx_buf));
 800094c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000950:	494b      	ldr	r1, [pc, #300]	@ (8000a80 <Function_3+0x1c0>)
 8000952:	484c      	ldr	r0, [pc, #304]	@ (8000a84 <Function_3+0x1c4>)
 8000954:	f002 f89d 	bl	8002a92 <HAL_UART_Receive_DMA>
				memset(rx_buf,0,sizeof(rx_buf));
 8000958:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095c:	2100      	movs	r1, #0
 800095e:	4848      	ldr	r0, [pc, #288]	@ (8000a80 <Function_3+0x1c0>)
 8000960:	f005 fc56 	bl	8006210 <memset>
				int fw_size = 0 ;
 8000964:	2300      	movs	r3, #0
 8000966:	60fb      	str	r3, [r7, #12]
					while(!(strstr((char*)rx_buf, "firmware size:") && strstr((char*)rx_buf, "\n"))){
 8000968:	e002      	b.n	8000970 <Function_3+0xb0>
						osDelay(1);
 800096a:	2001      	movs	r0, #1
 800096c:	f002 ff62 	bl	8003834 <osDelay>
					while(!(strstr((char*)rx_buf, "firmware size:") && strstr((char*)rx_buf, "\n"))){
 8000970:	494c      	ldr	r1, [pc, #304]	@ (8000aa4 <Function_3+0x1e4>)
 8000972:	4843      	ldr	r0, [pc, #268]	@ (8000a80 <Function_3+0x1c0>)
 8000974:	f005 fc61 	bl	800623a <strstr>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d0f5      	beq.n	800096a <Function_3+0xaa>
 800097e:	210a      	movs	r1, #10
 8000980:	483f      	ldr	r0, [pc, #252]	@ (8000a80 <Function_3+0x1c0>)
 8000982:	f005 fc4d 	bl	8006220 <strchr>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d0ee      	beq.n	800096a <Function_3+0xaa>
					}
				sscanf((char*)rx_buf, "firmware size:%d", &fw_size) ;
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	461a      	mov	r2, r3
 8000992:	4945      	ldr	r1, [pc, #276]	@ (8000aa8 <Function_3+0x1e8>)
 8000994:	483a      	ldr	r0, [pc, #232]	@ (8000a80 <Function_3+0x1c0>)
 8000996:	f005 fbef 	bl	8006178 <siscanf>
				pr_log("please send %d bytes data of your Firmware\n", fw_size) ;
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4619      	mov	r1, r3
 800099e:	4843      	ldr	r0, [pc, #268]	@ (8000aac <Function_3+0x1ec>)
 80009a0:	f7ff fdee 	bl	8000580 <pr_log>

				while(recv_fw_done == 0 ){
 80009a4:	e002      	b.n	80009ac <Function_3+0xec>
					osDelay(1);
 80009a6:	2001      	movs	r0, #1
 80009a8:	f002 ff44 	bl	8003834 <osDelay>
				while(recv_fw_done == 0 ){
 80009ac:	4b40      	ldr	r3, [pc, #256]	@ (8000ab0 <Function_3+0x1f0>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d0f8      	beq.n	80009a6 <Function_3+0xe6>
				}
				pr_log("--> receive new firmware data finish \n");
 80009b4:	483f      	ldr	r0, [pc, #252]	@ (8000ab4 <Function_3+0x1f4>)
 80009b6:	f7ff fde3 	bl	8000580 <pr_log>
				HAL_FLASH_Unlock() ;
 80009ba:	f000 ffdf 	bl	800197c <HAL_FLASH_Unlock>
				FLASH_Erase_Sector(6, FLASH_VOLTAGE_RANGE_3);
 80009be:	2102      	movs	r1, #2
 80009c0:	2006      	movs	r0, #6
 80009c2:	f001 f94d 	bl	8001c60 <FLASH_Erase_Sector>
				for (int i = 0 ; i < fw_size ; i++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
 80009ca:	e015      	b.n	80009f8 <Function_3+0x138>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08040000 + i, rx_buf[i]) ;
 80009cc:	697b      	ldr	r3, [r7, #20]
 80009ce:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80009d2:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80009d6:	4619      	mov	r1, r3
 80009d8:	4a29      	ldr	r2, [pc, #164]	@ (8000a80 <Function_3+0x1c0>)
 80009da:	697b      	ldr	r3, [r7, #20]
 80009dc:	4413      	add	r3, r2
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2200      	movs	r2, #0
 80009e4:	461c      	mov	r4, r3
 80009e6:	4615      	mov	r5, r2
 80009e8:	4622      	mov	r2, r4
 80009ea:	462b      	mov	r3, r5
 80009ec:	2000      	movs	r0, #0
 80009ee:	f000 ff73 	bl	80018d8 <HAL_FLASH_Program>
				for (int i = 0 ; i < fw_size ; i++)
 80009f2:	697b      	ldr	r3, [r7, #20]
 80009f4:	3301      	adds	r3, #1
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	dbe5      	blt.n	80009cc <Function_3+0x10c>
				}
				pr_log("--> update new firmware to sector 6 done \n") ;
 8000a00:	482d      	ldr	r0, [pc, #180]	@ (8000ab8 <Function_3+0x1f8>)
 8000a02:	f7ff fdbd 	bl	8000580 <pr_log>

				FLASH_Erase_Sector(4, FLASH_VOLTAGE_RANGE_3);
 8000a06:	2102      	movs	r1, #2
 8000a08:	2004      	movs	r0, #4
 8000a0a:	f001 f929 	bl	8001c60 <FLASH_Erase_Sector>
				for (int i = 0 ; i < sizeof(new_fw_msg) ; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	e015      	b.n	8000a40 <Function_3+0x180>
				{
					HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, 0x08010000 + i, new_fw_msg[i]) ;
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8000a1a:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4a26      	ldr	r2, [pc, #152]	@ (8000abc <Function_3+0x1fc>)
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	4413      	add	r3, r2
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4698      	mov	r8, r3
 8000a2e:	4691      	mov	r9, r2
 8000a30:	4642      	mov	r2, r8
 8000a32:	464b      	mov	r3, r9
 8000a34:	2000      	movs	r0, #0
 8000a36:	f000 ff4f 	bl	80018d8 <HAL_FLASH_Program>
				for (int i = 0 ; i < sizeof(new_fw_msg) ; i++)
 8000a3a:	693b      	ldr	r3, [r7, #16]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
 8000a40:	693b      	ldr	r3, [r7, #16]
 8000a42:	2b11      	cmp	r3, #17
 8000a44:	d9e6      	bls.n	8000a14 <Function_3+0x154>
				}
				pr_log("--> update information area done \n") ;
 8000a46:	481e      	ldr	r0, [pc, #120]	@ (8000ac0 <Function_3+0x200>)
 8000a48:	f7ff fd9a 	bl	8000580 <pr_log>
				HAL_FLASH_Lock() ;
 8000a4c:	f000 ffb8 	bl	80019c0 <HAL_FLASH_Lock>

				HAL_NVIC_SystemReset() ;
 8000a50:	f000 fb51 	bl	80010f6 <HAL_NVIC_SystemReset>

			}
	  		HAL_UART_DMAStop(&huart1);
 8000a54:	480b      	ldr	r0, [pc, #44]	@ (8000a84 <Function_3+0x1c4>)
 8000a56:	f002 f841 	bl	8002adc <HAL_UART_DMAStop>
			HAL_UART_Receive_DMA(&huart1,rx_buf,sizeof(rx_buf));
 8000a5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a5e:	4908      	ldr	r1, [pc, #32]	@ (8000a80 <Function_3+0x1c0>)
 8000a60:	4808      	ldr	r0, [pc, #32]	@ (8000a84 <Function_3+0x1c4>)
 8000a62:	f002 f816 	bl	8002a92 <HAL_UART_Receive_DMA>
			memset(rx_buf,0,sizeof(rx_buf));
 8000a66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4804      	ldr	r0, [pc, #16]	@ (8000a80 <Function_3+0x1c0>)
 8000a6e:	f005 fbcf 	bl	8006210 <memset>
	}
	  osDelay(1);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f002 fede 	bl	8003834 <osDelay>
	  if (strstr((char*)rx_buf, "\n")){
 8000a78:	e730      	b.n	80008dc <Function_3+0x1c>
 8000a7a:	bf00      	nop
 8000a7c:	0800747c 	.word	0x0800747c
 8000a80:	200001a4 	.word	0x200001a4
 8000a84:	20000090 	.word	0x20000090
 8000a88:	08007494 	.word	0x08007494
 8000a8c:	40020c00 	.word	0x40020c00
 8000a90:	080074a0 	.word	0x080074a0
 8000a94:	080074b8 	.word	0x080074b8
 8000a98:	080074c8 	.word	0x080074c8
 8000a9c:	080074e0 	.word	0x080074e0
 8000aa0:	080074e8 	.word	0x080074e8
 8000aa4:	080074fc 	.word	0x080074fc
 8000aa8:	0800750c 	.word	0x0800750c
 8000aac:	08007520 	.word	0x08007520
 8000ab0:	20010224 	.word	0x20010224
 8000ab4:	0800754c 	.word	0x0800754c
 8000ab8:	08007574 	.word	0x08007574
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	080075a0 	.word	0x080075a0

08000ac4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac8:	b672      	cpsid	i
}
 8000aca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <Error_Handler+0x8>

08000ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	607b      	str	r3, [r7, #4]
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <HAL_MspInit+0x54>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ade:	4a11      	ldr	r2, [pc, #68]	@ (8000b24 <HAL_MspInit+0x54>)
 8000ae0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <HAL_MspInit+0x54>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	603b      	str	r3, [r7, #0]
 8000af6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b24 <HAL_MspInit+0x54>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	4a0a      	ldr	r2, [pc, #40]	@ (8000b24 <HAL_MspInit+0x54>)
 8000afc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b02:	4b08      	ldr	r3, [pc, #32]	@ (8000b24 <HAL_MspInit+0x54>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	210f      	movs	r1, #15
 8000b12:	f06f 0001 	mvn.w	r0, #1
 8000b16:	f000 fac4 	bl	80010a2 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800

08000b28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b08a      	sub	sp, #40	@ 0x28
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b30:	f107 0314 	add.w	r3, r7, #20
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
 8000b38:	605a      	str	r2, [r3, #4]
 8000b3a:	609a      	str	r2, [r3, #8]
 8000b3c:	60da      	str	r2, [r3, #12]
 8000b3e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a47      	ldr	r2, [pc, #284]	@ (8000c64 <HAL_UART_MspInit+0x13c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	f040 8088 	bne.w	8000c5c <HAL_UART_MspInit+0x134>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
 8000b50:	4b45      	ldr	r3, [pc, #276]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b54:	4a44      	ldr	r2, [pc, #272]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b56:	f043 0310 	orr.w	r3, r3, #16
 8000b5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b5c:	4b42      	ldr	r3, [pc, #264]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b60:	f003 0310 	and.w	r3, r3, #16
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	4b3e      	ldr	r3, [pc, #248]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b70:	4a3d      	ldr	r2, [pc, #244]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b72:	f043 0302 	orr.w	r3, r3, #2
 8000b76:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b78:	4b3b      	ldr	r3, [pc, #236]	@ (8000c68 <HAL_UART_MspInit+0x140>)
 8000b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7c:	f003 0302 	and.w	r3, r3, #2
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b84:	23c0      	movs	r3, #192	@ 0xc0
 8000b86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b90:	2303      	movs	r3, #3
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b94:	2307      	movs	r3, #7
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	4619      	mov	r1, r3
 8000b9e:	4833      	ldr	r0, [pc, #204]	@ (8000c6c <HAL_UART_MspInit+0x144>)
 8000ba0:	f001 f8a6 	bl	8001cf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000ba4:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000ba6:	4a33      	ldr	r2, [pc, #204]	@ (8000c74 <HAL_UART_MspInit+0x14c>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000baa:	4b31      	ldr	r3, [pc, #196]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bac:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000bb0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000bbe:	4b2c      	ldr	r3, [pc, #176]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bc0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000bc4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc6:	4b2a      	ldr	r3, [pc, #168]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bcc:	4b28      	ldr	r3, [pc, #160]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000bd2:	4b27      	ldr	r3, [pc, #156]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd8:	4b25      	ldr	r3, [pc, #148]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bde:	4b24      	ldr	r3, [pc, #144]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000be4:	4822      	ldr	r0, [pc, #136]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000be6:	f000 fa97 	bl	8001118 <HAL_DMA_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000bf0:	f7ff ff68 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bf8:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000bfa:	4a1d      	ldr	r2, [pc, #116]	@ (8000c70 <HAL_UART_MspInit+0x148>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c02:	4a1e      	ldr	r2, [pc, #120]	@ (8000c7c <HAL_UART_MspInit+0x154>)
 8000c04:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000c06:	4b1c      	ldr	r3, [pc, #112]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c08:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c0c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c10:	2240      	movs	r2, #64	@ 0x40
 8000c12:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c1a:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c1c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c20:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c28:	4b13      	ldr	r3, [pc, #76]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000c2e:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c34:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000c40:	480d      	ldr	r0, [pc, #52]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c42:	f000 fa69 	bl	8001118 <HAL_DMA_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000c4c:	f7ff ff3a 	bl	8000ac4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a09      	ldr	r2, [pc, #36]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c54:	639a      	str	r2, [r3, #56]	@ 0x38
 8000c56:	4a08      	ldr	r2, [pc, #32]	@ (8000c78 <HAL_UART_MspInit+0x150>)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c5c:	bf00      	nop
 8000c5e:	3728      	adds	r7, #40	@ 0x28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	40011000 	.word	0x40011000
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	40020400 	.word	0x40020400
 8000c70:	200000d8 	.word	0x200000d8
 8000c74:	40026440 	.word	0x40026440
 8000c78:	20000138 	.word	0x20000138
 8000c7c:	400264b8 	.word	0x400264b8

08000c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <NMI_Handler+0x4>

08000c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <MemManage_Handler+0x4>

08000c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <BusFault_Handler+0x4>

08000ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <UsageFault_Handler+0x4>

08000ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cba:	f000 f8e1 	bl	8000e80 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cbe:	f004 f9e1 	bl	8005084 <xTaskGetSchedulerState>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d001      	beq.n	8000ccc <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cc8:	f004 ffd6 	bl	8005c78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	bd80      	pop	{r7, pc}

08000cd0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000cd4:	4802      	ldr	r0, [pc, #8]	@ (8000ce0 <DMA2_Stream2_IRQHandler+0x10>)
 8000cd6:	f000 fb95 	bl	8001404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000d8 	.word	0x200000d8

08000ce4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <DMA2_Stream7_IRQHandler+0x10>)
 8000cea:	f000 fb8b 	bl	8001404 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000138 	.word	0x20000138

08000cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d00:	4a14      	ldr	r2, [pc, #80]	@ (8000d54 <_sbrk+0x5c>)
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <_sbrk+0x60>)
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <_sbrk+0x64>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d102      	bne.n	8000d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d14:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <_sbrk+0x64>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <_sbrk+0x68>)
 8000d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d1a:	4b10      	ldr	r3, [pc, #64]	@ (8000d5c <_sbrk+0x64>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4413      	add	r3, r2
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	429a      	cmp	r2, r3
 8000d26:	d207      	bcs.n	8000d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d28:	f005 fa9e 	bl	8006268 <__errno>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	220c      	movs	r2, #12
 8000d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e009      	b.n	8000d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d38:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d3e:	4b07      	ldr	r3, [pc, #28]	@ (8000d5c <_sbrk+0x64>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	4a05      	ldr	r2, [pc, #20]	@ (8000d5c <_sbrk+0x64>)
 8000d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d4a:	68fb      	ldr	r3, [r7, #12]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3718      	adds	r7, #24
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20020000 	.word	0x20020000
 8000d58:	00000400 	.word	0x00000400
 8000d5c:	20010228 	.word	0x20010228
 8000d60:	20014ce8 	.word	0x20014ce8

08000d64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dc0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d8c:	f7ff ffea 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d90:	480c      	ldr	r0, [pc, #48]	@ (8000dc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d92:	490d      	ldr	r1, [pc, #52]	@ (8000dc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d94:	4a0d      	ldr	r2, [pc, #52]	@ (8000dcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d98:	e002      	b.n	8000da0 <LoopCopyDataInit>

08000d9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d9e:	3304      	adds	r3, #4

08000da0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da4:	d3f9      	bcc.n	8000d9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000da8:	4c0a      	ldr	r4, [pc, #40]	@ (8000dd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000daa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dac:	e001      	b.n	8000db2 <LoopFillZerobss>

08000dae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db0:	3204      	adds	r2, #4

08000db2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db4:	d3fb      	bcc.n	8000dae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000db6:	f005 fa5d 	bl	8006274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dba:	f7ff fc19 	bl	80005f0 <main>
  bx  lr    
 8000dbe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dc8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000dcc:	080077d4 	.word	0x080077d4
  ldr r2, =_sbss
 8000dd0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000dd4:	20014ce8 	.word	0x20014ce8

08000dd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dd8:	e7fe      	b.n	8000dd8 <ADC_IRQHandler>
	...

08000ddc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000de0:	4b0e      	ldr	r3, [pc, #56]	@ (8000e1c <HAL_Init+0x40>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	@ (8000e1c <HAL_Init+0x40>)
 8000de6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000dea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dec:	4b0b      	ldr	r3, [pc, #44]	@ (8000e1c <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_Init+0x40>)
 8000df2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a07      	ldr	r2, [pc, #28]	@ (8000e1c <HAL_Init+0x40>)
 8000dfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f941 	bl	800108c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0a:	200f      	movs	r0, #15
 8000e0c:	f000 f808 	bl	8000e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e10:	f7ff fe5e 	bl	8000ad0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023c00 	.word	0x40023c00

08000e20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e28:	4b12      	ldr	r3, [pc, #72]	@ (8000e74 <HAL_InitTick+0x54>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_InitTick+0x58>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	4619      	mov	r1, r3
 8000e32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 f95d 	bl	80010fe <HAL_SYSTICK_Config>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00e      	b.n	8000e6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b0f      	cmp	r3, #15
 8000e52:	d80a      	bhi.n	8000e6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	2200      	movs	r2, #0
 8000e56:	6879      	ldr	r1, [r7, #4]
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f921 	bl	80010a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4a06      	ldr	r2, [pc, #24]	@ (8000e7c <HAL_InitTick+0x5c>)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e000      	b.n	8000e6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3708      	adds	r7, #8
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	20000014 	.word	0x20000014
 8000e78:	2000001c 	.word	0x2000001c
 8000e7c:	20000018 	.word	0x20000018

08000e80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <HAL_IncTick+0x20>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4413      	add	r3, r2
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_IncTick+0x24>)
 8000e92:	6013      	str	r3, [r2, #0]
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	2000001c 	.word	0x2000001c
 8000ea4:	2001022c 	.word	0x2001022c

08000ea8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b03      	ldr	r3, [pc, #12]	@ (8000ebc <HAL_GetTick+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	2001022c 	.word	0x2001022c

08000ec0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed6:	68ba      	ldr	r2, [r7, #8]
 8000ed8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000edc:	4013      	ands	r3, r2
 8000ede:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <__NVIC_GetPriorityGrouping+0x18>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	0a1b      	lsrs	r3, r3, #8
 8000f12:	f003 0307 	and.w	r3, r3, #7
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	db0b      	blt.n	8000f4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	f003 021f 	and.w	r2, r3, #31
 8000f3c:	4907      	ldr	r1, [pc, #28]	@ (8000f5c <__NVIC_EnableIRQ+0x38>)
 8000f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f42:	095b      	lsrs	r3, r3, #5
 8000f44:	2001      	movs	r0, #1
 8000f46:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f4e:	bf00      	nop
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000e100 	.word	0xe000e100

08000f60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	6039      	str	r1, [r7, #0]
 8000f6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	db0a      	blt.n	8000f8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	490c      	ldr	r1, [pc, #48]	@ (8000fac <__NVIC_SetPriority+0x4c>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	0112      	lsls	r2, r2, #4
 8000f80:	b2d2      	uxtb	r2, r2
 8000f82:	440b      	add	r3, r1
 8000f84:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f88:	e00a      	b.n	8000fa0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	b2da      	uxtb	r2, r3
 8000f8e:	4908      	ldr	r1, [pc, #32]	@ (8000fb0 <__NVIC_SetPriority+0x50>)
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	f003 030f 	and.w	r3, r3, #15
 8000f96:	3b04      	subs	r3, #4
 8000f98:	0112      	lsls	r2, r2, #4
 8000f9a:	b2d2      	uxtb	r2, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	761a      	strb	r2, [r3, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0307 	and.w	r3, r3, #7
 8000fc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	f1c3 0307 	rsb	r3, r3, #7
 8000fce:	2b04      	cmp	r3, #4
 8000fd0:	bf28      	it	cs
 8000fd2:	2304      	movcs	r3, #4
 8000fd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3304      	adds	r3, #4
 8000fda:	2b06      	cmp	r3, #6
 8000fdc:	d902      	bls.n	8000fe4 <NVIC_EncodePriority+0x30>
 8000fde:	69fb      	ldr	r3, [r7, #28]
 8000fe0:	3b03      	subs	r3, #3
 8000fe2:	e000      	b.n	8000fe6 <NVIC_EncodePriority+0x32>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fec:	69bb      	ldr	r3, [r7, #24]
 8000fee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff2:	43da      	mvns	r2, r3
 8000ff4:	68bb      	ldr	r3, [r7, #8]
 8000ff6:	401a      	ands	r2, r3
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ffc:	f04f 31ff 	mov.w	r1, #4294967295
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	fa01 f303 	lsl.w	r3, r1, r3
 8001006:	43d9      	mvns	r1, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	4313      	orrs	r3, r2
         );
}
 800100e:	4618      	mov	r0, r3
 8001010:	3724      	adds	r7, #36	@ 0x24
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8001020:	f3bf 8f4f 	dsb	sy
}
 8001024:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001026:	4b06      	ldr	r3, [pc, #24]	@ (8001040 <__NVIC_SystemReset+0x24>)
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800102e:	4904      	ldr	r1, [pc, #16]	@ (8001040 <__NVIC_SystemReset+0x24>)
 8001030:	4b04      	ldr	r3, [pc, #16]	@ (8001044 <__NVIC_SystemReset+0x28>)
 8001032:	4313      	orrs	r3, r2
 8001034:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001036:	f3bf 8f4f 	dsb	sy
}
 800103a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <__NVIC_SystemReset+0x20>
 8001040:	e000ed00 	.word	0xe000ed00
 8001044:	05fa0004 	.word	0x05fa0004

08001048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001058:	d301      	bcc.n	800105e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800105a:	2301      	movs	r3, #1
 800105c:	e00f      	b.n	800107e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105e:	4a0a      	ldr	r2, [pc, #40]	@ (8001088 <SysTick_Config+0x40>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b01      	subs	r3, #1
 8001064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001066:	210f      	movs	r1, #15
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	f7ff ff78 	bl	8000f60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001070:	4b05      	ldr	r3, [pc, #20]	@ (8001088 <SysTick_Config+0x40>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001076:	4b04      	ldr	r3, [pc, #16]	@ (8001088 <SysTick_Config+0x40>)
 8001078:	2207      	movs	r2, #7
 800107a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	e000e010 	.word	0xe000e010

0800108c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f7ff ff13 	bl	8000ec0 <__NVIC_SetPriorityGrouping>
}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010b0:	2300      	movs	r3, #0
 80010b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b4:	f7ff ff28 	bl	8000f08 <__NVIC_GetPriorityGrouping>
 80010b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	68b9      	ldr	r1, [r7, #8]
 80010be:	6978      	ldr	r0, [r7, #20]
 80010c0:	f7ff ff78 	bl	8000fb4 <NVIC_EncodePriority>
 80010c4:	4602      	mov	r2, r0
 80010c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <__NVIC_SetPriority>
}
 80010d2:	bf00      	nop
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	4603      	mov	r3, r0
 80010e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff1b 	bl	8000f24 <__NVIC_EnableIRQ>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80010fa:	f7ff ff8f 	bl	800101c <__NVIC_SystemReset>

080010fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	b082      	sub	sp, #8
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff ff9e 	bl	8001048 <SysTick_Config>
 800110c:	4603      	mov	r3, r0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001124:	f7ff fec0 	bl	8000ea8 <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d101      	bne.n	8001134 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001130:	2301      	movs	r3, #1
 8001132:	e099      	b.n	8001268 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2202      	movs	r2, #2
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f022 0201 	bic.w	r2, r2, #1
 8001152:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001154:	e00f      	b.n	8001176 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001156:	f7ff fea7 	bl	8000ea8 <HAL_GetTick>
 800115a:	4602      	mov	r2, r0
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	1ad3      	subs	r3, r2, r3
 8001160:	2b05      	cmp	r3, #5
 8001162:	d908      	bls.n	8001176 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2220      	movs	r2, #32
 8001168:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2203      	movs	r2, #3
 800116e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e078      	b.n	8001268 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f003 0301 	and.w	r3, r3, #1
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1e8      	bne.n	8001156 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800118c:	697a      	ldr	r2, [r7, #20]
 800118e:	4b38      	ldr	r3, [pc, #224]	@ (8001270 <HAL_DMA_Init+0x158>)
 8001190:	4013      	ands	r3, r2
 8001192:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	685a      	ldr	r2, [r3, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	691b      	ldr	r3, [r3, #16]
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a1b      	ldr	r3, [r3, #32]
 80011c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c2:	697a      	ldr	r2, [r7, #20]
 80011c4:	4313      	orrs	r3, r2
 80011c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011cc:	2b04      	cmp	r3, #4
 80011ce:	d107      	bne.n	80011e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011d8:	4313      	orrs	r3, r2
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4313      	orrs	r3, r2
 80011de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	f023 0307 	bic.w	r3, r3, #7
 80011f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001206:	2b04      	cmp	r3, #4
 8001208:	d117      	bne.n	800123a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800120e:	697a      	ldr	r2, [r7, #20]
 8001210:	4313      	orrs	r3, r2
 8001212:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001218:	2b00      	cmp	r3, #0
 800121a:	d00e      	beq.n	800123a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 fadf 	bl	80017e0 <DMA_CheckFifoParam>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d008      	beq.n	800123a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2240      	movs	r2, #64	@ 0x40
 800122c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001236:	2301      	movs	r3, #1
 8001238:	e016      	b.n	8001268 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	697a      	ldr	r2, [r7, #20]
 8001240:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f000 fa96 	bl	8001774 <DMA_CalcBaseAndBitshift>
 8001248:	4603      	mov	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001250:	223f      	movs	r2, #63	@ 0x3f
 8001252:	409a      	lsls	r2, r3
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001266:	2300      	movs	r3, #0
}
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	f010803f 	.word	0xf010803f

08001274 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800128a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001292:	2b01      	cmp	r3, #1
 8001294:	d101      	bne.n	800129a <HAL_DMA_Start_IT+0x26>
 8001296:	2302      	movs	r3, #2
 8001298:	e040      	b.n	800131c <HAL_DMA_Start_IT+0xa8>
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	2201      	movs	r2, #1
 800129e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d12f      	bne.n	800130e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2202      	movs	r2, #2
 80012b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	2200      	movs	r2, #0
 80012ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f000 fa28 	bl	8001718 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012cc:	223f      	movs	r2, #63	@ 0x3f
 80012ce:	409a      	lsls	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f042 0216 	orr.w	r2, r2, #22
 80012e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d007      	beq.n	80012fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	f042 0208 	orr.w	r2, r2, #8
 80012fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	e005      	b.n	800131a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001316:	2302      	movs	r3, #2
 8001318:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800131a:	7dfb      	ldrb	r3, [r7, #23]
}
 800131c:	4618      	mov	r0, r3
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001330:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001332:	f7ff fdb9 	bl	8000ea8 <HAL_GetTick>
 8001336:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d008      	beq.n	8001356 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2280      	movs	r2, #128	@ 0x80
 8001348:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e052      	b.n	80013fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0216 	bic.w	r2, r2, #22
 8001364:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	695a      	ldr	r2, [r3, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001374:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137a:	2b00      	cmp	r3, #0
 800137c:	d103      	bne.n	8001386 <HAL_DMA_Abort+0x62>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001382:	2b00      	cmp	r3, #0
 8001384:	d007      	beq.n	8001396 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0208 	bic.w	r2, r2, #8
 8001394:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f022 0201 	bic.w	r2, r2, #1
 80013a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013a6:	e013      	b.n	80013d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013a8:	f7ff fd7e 	bl	8000ea8 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d90c      	bls.n	80013d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2220      	movs	r2, #32
 80013ba:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2203      	movs	r2, #3
 80013c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e015      	b.n	80013fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1e4      	bne.n	80013a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	223f      	movs	r2, #63	@ 0x3f
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001410:	4b8e      	ldr	r3, [pc, #568]	@ (800164c <HAL_DMA_IRQHandler+0x248>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a8e      	ldr	r2, [pc, #568]	@ (8001650 <HAL_DMA_IRQHandler+0x24c>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0a9b      	lsrs	r3, r3, #10
 800141c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001422:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800142e:	2208      	movs	r2, #8
 8001430:	409a      	lsls	r2, r3
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	4013      	ands	r3, r2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d01a      	beq.n	8001470 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	d013      	beq.n	8001470 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0204 	bic.w	r2, r2, #4
 8001456:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145c:	2208      	movs	r2, #8
 800145e:	409a      	lsls	r2, r3
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001468:	f043 0201 	orr.w	r2, r3, #1
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001474:	2201      	movs	r2, #1
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d012      	beq.n	80014a6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	695b      	ldr	r3, [r3, #20]
 8001486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00b      	beq.n	80014a6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001492:	2201      	movs	r2, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800149e:	f043 0202 	orr.w	r2, r3, #2
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014aa:	2204      	movs	r2, #4
 80014ac:	409a      	lsls	r2, r3
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d012      	beq.n	80014dc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d00b      	beq.n	80014dc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c8:	2204      	movs	r2, #4
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014d4:	f043 0204 	orr.w	r2, r3, #4
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e0:	2210      	movs	r2, #16
 80014e2:	409a      	lsls	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4013      	ands	r3, r2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d043      	beq.n	8001574 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d03c      	beq.n	8001574 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014fe:	2210      	movs	r2, #16
 8001500:	409a      	lsls	r2, r3
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001510:	2b00      	cmp	r3, #0
 8001512:	d018      	beq.n	8001546 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d108      	bne.n	8001534 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	2b00      	cmp	r3, #0
 8001528:	d024      	beq.n	8001574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	4798      	blx	r3
 8001532:	e01f      	b.n	8001574 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001538:	2b00      	cmp	r3, #0
 800153a:	d01b      	beq.n	8001574 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	4798      	blx	r3
 8001544:	e016      	b.n	8001574 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001550:	2b00      	cmp	r3, #0
 8001552:	d107      	bne.n	8001564 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f022 0208 	bic.w	r2, r2, #8
 8001562:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001578:	2220      	movs	r2, #32
 800157a:	409a      	lsls	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4013      	ands	r3, r2
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 808f 	beq.w	80016a4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0310 	and.w	r3, r3, #16
 8001590:	2b00      	cmp	r3, #0
 8001592:	f000 8087 	beq.w	80016a4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800159a:	2220      	movs	r2, #32
 800159c:	409a      	lsls	r2, r3
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d136      	bne.n	800161c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0216 	bic.w	r2, r2, #22
 80015bc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	695a      	ldr	r2, [r3, #20]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015cc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d103      	bne.n	80015de <HAL_DMA_IRQHandler+0x1da>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d007      	beq.n	80015ee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0208 	bic.w	r2, r2, #8
 80015ec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f2:	223f      	movs	r2, #63	@ 0x3f
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2201      	movs	r2, #1
 80015fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2200      	movs	r2, #0
 8001606:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800160e:	2b00      	cmp	r3, #0
 8001610:	d07e      	beq.n	8001710 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	4798      	blx	r3
        }
        return;
 800161a:	e079      	b.n	8001710 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d01d      	beq.n	8001666 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d10d      	bne.n	8001654 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163c:	2b00      	cmp	r3, #0
 800163e:	d031      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	4798      	blx	r3
 8001648:	e02c      	b.n	80016a4 <HAL_DMA_IRQHandler+0x2a0>
 800164a:	bf00      	nop
 800164c:	20000014 	.word	0x20000014
 8001650:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001658:	2b00      	cmp	r3, #0
 800165a:	d023      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	4798      	blx	r3
 8001664:	e01e      	b.n	80016a4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10f      	bne.n	8001694 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0210 	bic.w	r2, r2, #16
 8001682:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2201      	movs	r2, #1
 8001688:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2200      	movs	r2, #0
 8001690:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d032      	beq.n	8001712 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016b0:	f003 0301 	and.w	r3, r3, #1
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d022      	beq.n	80016fe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2205      	movs	r2, #5
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d307      	bcc.n	80016ec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f2      	bne.n	80016d0 <HAL_DMA_IRQHandler+0x2cc>
 80016ea:	e000      	b.n	80016ee <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016ec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	4798      	blx	r3
 800170e:	e000      	b.n	8001712 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001710:	bf00      	nop
    }
  }
}
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001734:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	683a      	ldr	r2, [r7, #0]
 800173c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b40      	cmp	r3, #64	@ 0x40
 8001744:	d108      	bne.n	8001758 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68ba      	ldr	r2, [r7, #8]
 8001754:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001756:	e007      	b.n	8001768 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68ba      	ldr	r2, [r7, #8]
 800175e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]
}
 8001768:	bf00      	nop
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001774:	b480      	push	{r7}
 8001776:	b085      	sub	sp, #20
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	b2db      	uxtb	r3, r3
 8001782:	3b10      	subs	r3, #16
 8001784:	4a14      	ldr	r2, [pc, #80]	@ (80017d8 <DMA_CalcBaseAndBitshift+0x64>)
 8001786:	fba2 2303 	umull	r2, r3, r2, r3
 800178a:	091b      	lsrs	r3, r3, #4
 800178c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800178e:	4a13      	ldr	r2, [pc, #76]	@ (80017dc <DMA_CalcBaseAndBitshift+0x68>)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4413      	add	r3, r2
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d909      	bls.n	80017b6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017aa:	f023 0303 	bic.w	r3, r3, #3
 80017ae:	1d1a      	adds	r2, r3, #4
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80017b4:	e007      	b.n	80017c6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80017be:	f023 0303 	bic.w	r3, r3, #3
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop
 80017d8:	aaaaaaab 	.word	0xaaaaaaab
 80017dc:	0800766c 	.word	0x0800766c

080017e0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	699b      	ldr	r3, [r3, #24]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d11f      	bne.n	800183a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	2b03      	cmp	r3, #3
 80017fe:	d856      	bhi.n	80018ae <DMA_CheckFifoParam+0xce>
 8001800:	a201      	add	r2, pc, #4	@ (adr r2, 8001808 <DMA_CheckFifoParam+0x28>)
 8001802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001806:	bf00      	nop
 8001808:	08001819 	.word	0x08001819
 800180c:	0800182b 	.word	0x0800182b
 8001810:	08001819 	.word	0x08001819
 8001814:	080018af 	.word	0x080018af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800181c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001820:	2b00      	cmp	r3, #0
 8001822:	d046      	beq.n	80018b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001828:	e043      	b.n	80018b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001832:	d140      	bne.n	80018b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001838:	e03d      	b.n	80018b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001842:	d121      	bne.n	8001888 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d837      	bhi.n	80018ba <DMA_CheckFifoParam+0xda>
 800184a:	a201      	add	r2, pc, #4	@ (adr r2, 8001850 <DMA_CheckFifoParam+0x70>)
 800184c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001850:	08001861 	.word	0x08001861
 8001854:	08001867 	.word	0x08001867
 8001858:	08001861 	.word	0x08001861
 800185c:	08001879 	.word	0x08001879
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
      break;
 8001864:	e030      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800186a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d025      	beq.n	80018be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001876:	e022      	b.n	80018be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800187c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001880:	d11f      	bne.n	80018c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001886:	e01c      	b.n	80018c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d903      	bls.n	8001896 <DMA_CheckFifoParam+0xb6>
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d003      	beq.n	800189c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001894:	e018      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
      break;
 800189a:	e015      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d00e      	beq.n	80018c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	73fb      	strb	r3, [r7, #15]
      break;
 80018ac:	e00b      	b.n	80018c6 <DMA_CheckFifoParam+0xe6>
      break;
 80018ae:	bf00      	nop
 80018b0:	e00a      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;
 80018b2:	bf00      	nop
 80018b4:	e008      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;
 80018b6:	bf00      	nop
 80018b8:	e006      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;
 80018ba:	bf00      	nop
 80018bc:	e004      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;
 80018be:	bf00      	nop
 80018c0:	e002      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80018c2:	bf00      	nop
 80018c4:	e000      	b.n	80018c8 <DMA_CheckFifoParam+0xe8>
      break;
 80018c6:	bf00      	nop
    }
  } 
  
  return status; 
 80018c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b086      	sub	sp, #24
 80018dc:	af00      	add	r7, sp, #0
 80018de:	60f8      	str	r0, [r7, #12]
 80018e0:	60b9      	str	r1, [r7, #8]
 80018e2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80018e6:	4b23      	ldr	r3, [pc, #140]	@ (8001974 <HAL_FLASH_Program+0x9c>)
 80018e8:	7e1b      	ldrb	r3, [r3, #24]
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d101      	bne.n	80018f2 <HAL_FLASH_Program+0x1a>
 80018ee:	2302      	movs	r3, #2
 80018f0:	e03b      	b.n	800196a <HAL_FLASH_Program+0x92>
 80018f2:	4b20      	ldr	r3, [pc, #128]	@ (8001974 <HAL_FLASH_Program+0x9c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80018f8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80018fc:	f000 f870 	bl	80019e0 <FLASH_WaitForLastOperation>
 8001900:	4603      	mov	r3, r0
 8001902:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d12b      	bne.n	8001962 <HAL_FLASH_Program+0x8a>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d105      	bne.n	800191c <HAL_FLASH_Program+0x44>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001910:	783b      	ldrb	r3, [r7, #0]
 8001912:	4619      	mov	r1, r3
 8001914:	68b8      	ldr	r0, [r7, #8]
 8001916:	f000 f91b 	bl	8001b50 <FLASH_Program_Byte>
 800191a:	e016      	b.n	800194a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d105      	bne.n	800192e <HAL_FLASH_Program+0x56>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001922:	883b      	ldrh	r3, [r7, #0]
 8001924:	4619      	mov	r1, r3
 8001926:	68b8      	ldr	r0, [r7, #8]
 8001928:	f000 f8ee 	bl	8001b08 <FLASH_Program_HalfWord>
 800192c:	e00d      	b.n	800194a <HAL_FLASH_Program+0x72>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d105      	bne.n	8001940 <HAL_FLASH_Program+0x68>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	4619      	mov	r1, r3
 8001938:	68b8      	ldr	r0, [r7, #8]
 800193a:	f000 f8c3 	bl	8001ac4 <FLASH_Program_Word>
 800193e:	e004      	b.n	800194a <HAL_FLASH_Program+0x72>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001944:	68b8      	ldr	r0, [r7, #8]
 8001946:	f000 f88b 	bl	8001a60 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800194a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800194e:	f000 f847 	bl	80019e0 <FLASH_WaitForLastOperation>
 8001952:	4603      	mov	r3, r0
 8001954:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <HAL_FLASH_Program+0xa0>)
 8001958:	691b      	ldr	r3, [r3, #16]
 800195a:	4a07      	ldr	r2, [pc, #28]	@ (8001978 <HAL_FLASH_Program+0xa0>)
 800195c:	f023 0301 	bic.w	r3, r3, #1
 8001960:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001962:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <HAL_FLASH_Program+0x9c>)
 8001964:	2200      	movs	r2, #0
 8001966:	761a      	strb	r2, [r3, #24]

  return status;
 8001968:	7dfb      	ldrb	r3, [r7, #23]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20010230 	.word	0x20010230
 8001978:	40023c00 	.word	0x40023c00

0800197c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001986:	4b0b      	ldr	r3, [pc, #44]	@ (80019b4 <HAL_FLASH_Unlock+0x38>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	2b00      	cmp	r3, #0
 800198c:	da0b      	bge.n	80019a6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800198e:	4b09      	ldr	r3, [pc, #36]	@ (80019b4 <HAL_FLASH_Unlock+0x38>)
 8001990:	4a09      	ldr	r2, [pc, #36]	@ (80019b8 <HAL_FLASH_Unlock+0x3c>)
 8001992:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001994:	4b07      	ldr	r3, [pc, #28]	@ (80019b4 <HAL_FLASH_Unlock+0x38>)
 8001996:	4a09      	ldr	r2, [pc, #36]	@ (80019bc <HAL_FLASH_Unlock+0x40>)
 8001998:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800199a:	4b06      	ldr	r3, [pc, #24]	@ (80019b4 <HAL_FLASH_Unlock+0x38>)
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da01      	bge.n	80019a6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80019a6:	79fb      	ldrb	r3, [r7, #7]
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	370c      	adds	r7, #12
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40023c00 	.word	0x40023c00
 80019b8:	45670123 	.word	0x45670123
 80019bc:	cdef89ab 	.word	0xcdef89ab

080019c0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80019c4:	4b05      	ldr	r3, [pc, #20]	@ (80019dc <HAL_FLASH_Lock+0x1c>)
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	4a04      	ldr	r2, [pc, #16]	@ (80019dc <HAL_FLASH_Lock+0x1c>)
 80019ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80019ce:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	40023c00 	.word	0x40023c00

080019e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80019ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001a58 <FLASH_WaitForLastOperation+0x78>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80019f2:	f7ff fa59 	bl	8000ea8 <HAL_GetTick>
 80019f6:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 80019f8:	e010      	b.n	8001a1c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a00:	d00c      	beq.n	8001a1c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d007      	beq.n	8001a18 <FLASH_WaitForLastOperation+0x38>
 8001a08:	f7ff fa4e 	bl	8000ea8 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d201      	bcs.n	8001a1c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e019      	b.n	8001a50 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <FLASH_WaitForLastOperation+0x7c>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1e8      	bne.n	80019fa <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <FLASH_WaitForLastOperation+0x7c>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	f003 0301 	and.w	r3, r3, #1
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d002      	beq.n	8001a3a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a34:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <FLASH_WaitForLastOperation+0x7c>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001a3a:	4b08      	ldr	r3, [pc, #32]	@ (8001a5c <FLASH_WaitForLastOperation+0x7c>)
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001a46:	f000 f8a5 	bl	8001b94 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e000      	b.n	8001a50 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001a4e:	2300      	movs	r3, #0

}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	20010230 	.word	0x20010230
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001a6c:	4b14      	ldr	r3, [pc, #80]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a6e:	691b      	ldr	r3, [r3, #16]
 8001a70:	4a13      	ldr	r2, [pc, #76]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001a76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001a78:	4b11      	ldr	r3, [pc, #68]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a7a:	691b      	ldr	r3, [r3, #16]
 8001a7c:	4a10      	ldr	r2, [pc, #64]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a7e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac0 <FLASH_Program_DoubleWord+0x60>)
 8001a8a:	f043 0301 	orr.w	r3, r3, #1
 8001a8e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	683a      	ldr	r2, [r7, #0]
 8001a94:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8001a96:	f3bf 8f6f 	isb	sy
}
 8001a9a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8001a9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001aa0:	f04f 0200 	mov.w	r2, #0
 8001aa4:	f04f 0300 	mov.w	r3, #0
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	2300      	movs	r3, #0
 8001aac:	68f9      	ldr	r1, [r7, #12]
 8001aae:	3104      	adds	r1, #4
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40023c00 	.word	0x40023c00

08001ac4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ad8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001ada:	4b0a      	ldr	r3, [pc, #40]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	4a09      	ldr	r2, [pc, #36]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001ae0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001ae6:	4b07      	ldr	r3, [pc, #28]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001ae8:	691b      	ldr	r3, [r3, #16]
 8001aea:	4a06      	ldr	r2, [pc, #24]	@ (8001b04 <FLASH_Program_Word+0x40>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	601a      	str	r2, [r3, #0]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	40023c00 	.word	0x40023c00

08001b08 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b14:	4b0d      	ldr	r3, [pc, #52]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b16:	691b      	ldr	r3, [r3, #16]
 8001b18:	4a0c      	ldr	r2, [pc, #48]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001b20:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b22:	691b      	ldr	r3, [r3, #16]
 8001b24:	4a09      	ldr	r2, [pc, #36]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b2c:	4b07      	ldr	r3, [pc, #28]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	4a06      	ldr	r2, [pc, #24]	@ (8001b4c <FLASH_Program_HalfWord+0x44>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	887a      	ldrh	r2, [r7, #2]
 8001b3c:	801a      	strh	r2, [r3, #0]
}
 8001b3e:	bf00      	nop
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40023c00 	.word	0x40023c00

08001b50 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	460b      	mov	r3, r1
 8001b5a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b66:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001b68:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b6a:	4a09      	ldr	r2, [pc, #36]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001b70:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	4a06      	ldr	r2, [pc, #24]	@ (8001b90 <FLASH_Program_Byte+0x40>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	78fa      	ldrb	r2, [r7, #3]
 8001b80:	701a      	strb	r2, [r3, #0]
}
 8001b82:	bf00      	nop
 8001b84:	370c      	adds	r7, #12
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	40023c00 	.word	0x40023c00

08001b94 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001b98:	4b2f      	ldr	r3, [pc, #188]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	f003 0310 	and.w	r3, r3, #16
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	f043 0310 	orr.w	r3, r3, #16
 8001bac:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001bae:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001bb0:	4b29      	ldr	r3, [pc, #164]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001bb6:	4b28      	ldr	r3, [pc, #160]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 0320 	and.w	r3, r3, #32
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001bc2:	4b26      	ldr	r3, [pc, #152]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f043 0308 	orr.w	r3, r3, #8
 8001bca:	4a24      	ldr	r2, [pc, #144]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001bcc:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bd0:	2220      	movs	r2, #32
 8001bd2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001bd4:	4b20      	ldr	r3, [pc, #128]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001be0:	4b1e      	ldr	r3, [pc, #120]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001be2:	69db      	ldr	r3, [r3, #28]
 8001be4:	f043 0304 	orr.w	r3, r3, #4
 8001be8:	4a1c      	ldr	r2, [pc, #112]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001bea:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001bec:	4b1a      	ldr	r3, [pc, #104]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bee:	2240      	movs	r2, #64	@ 0x40
 8001bf0:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001bf2:	4b19      	ldr	r3, [pc, #100]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d008      	beq.n	8001c10 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c00:	69db      	ldr	r3, [r3, #28]
 8001c02:	f043 0302 	orr.w	r3, r3, #2
 8001c06:	4a15      	ldr	r2, [pc, #84]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c08:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001c0a:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001c0c:	2280      	movs	r2, #128	@ 0x80
 8001c0e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001c10:	4b11      	ldr	r3, [pc, #68]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d009      	beq.n	8001c30 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c1e:	69db      	ldr	r3, [r3, #28]
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c26:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001c28:	4b0b      	ldr	r3, [pc, #44]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001c2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c2e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001c30:	4b09      	ldr	r3, [pc, #36]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001c3c:	4b07      	ldr	r3, [pc, #28]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c3e:	69db      	ldr	r3, [r3, #28]
 8001c40:	f043 0320 	orr.w	r3, r3, #32
 8001c44:	4a05      	ldr	r2, [pc, #20]	@ (8001c5c <FLASH_SetErrorCode+0xc8>)
 8001c46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001c48:	4b03      	ldr	r3, [pc, #12]	@ (8001c58 <FLASH_SetErrorCode+0xc4>)
 8001c4a:	2202      	movs	r2, #2
 8001c4c:	60da      	str	r2, [r3, #12]
  }
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	20010230 	.word	0x20010230

08001c60 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d102      	bne.n	8001c7c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	e010      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d103      	bne.n	8001c8a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001c82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c86:	60fb      	str	r3, [r7, #12]
 8001c88:	e009      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001c8a:	78fb      	ldrb	r3, [r7, #3]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d103      	bne.n	8001c98 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001c90:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e002      	b.n	8001c9e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001c98:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c9c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c9e:	4b13      	ldr	r3, [pc, #76]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001ca0:	691b      	ldr	r3, [r3, #16]
 8001ca2:	4a12      	ldr	r2, [pc, #72]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001ca4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ca8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001caa:	4b10      	ldr	r3, [pc, #64]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cac:	691a      	ldr	r2, [r3, #16]
 8001cae:	490f      	ldr	r1, [pc, #60]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cb8:	691b      	ldr	r3, [r3, #16]
 8001cba:	4a0c      	ldr	r2, [pc, #48]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cbc:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001cc0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001cc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cc4:	691a      	ldr	r2, [r3, #16]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	4a07      	ldr	r2, [pc, #28]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cce:	f043 0302 	orr.w	r3, r3, #2
 8001cd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001cd4:	4b05      	ldr	r3, [pc, #20]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <FLASH_Erase_Sector+0x8c>)
 8001cda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cde:	6113      	str	r3, [r2, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	3714      	adds	r7, #20
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr
 8001cec:	40023c00 	.word	0x40023c00

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b089      	sub	sp, #36	@ 0x24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d06:	2300      	movs	r3, #0
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e159      	b.n	8001fc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d20:	693a      	ldr	r2, [r7, #16]
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	f040 8148 	bne.w	8001fba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d005      	beq.n	8001d42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d130      	bne.n	8001da4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	2203      	movs	r2, #3
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69ba      	ldr	r2, [r7, #24]
 8001d70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d78:	2201      	movs	r2, #1
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	091b      	lsrs	r3, r3, #4
 8001d8e:	f003 0201 	and.w	r2, r3, #1
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d017      	beq.n	8001de0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	2203      	movs	r2, #3
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	69ba      	ldr	r2, [r7, #24]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f003 0303 	and.w	r3, r3, #3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d123      	bne.n	8001e34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	08da      	lsrs	r2, r3, #3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3208      	adds	r2, #8
 8001df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	220f      	movs	r2, #15
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691a      	ldr	r2, [r3, #16]
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	08da      	lsrs	r2, r3, #3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3208      	adds	r2, #8
 8001e2e:	69b9      	ldr	r1, [r7, #24]
 8001e30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	2203      	movs	r2, #3
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 0203 	and.w	r2, r3, #3
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	005b      	lsls	r3, r3, #1
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 80a2 	beq.w	8001fba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	4b57      	ldr	r3, [pc, #348]	@ (8001fd8 <HAL_GPIO_Init+0x2e8>)
 8001e7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e7e:	4a56      	ldr	r2, [pc, #344]	@ (8001fd8 <HAL_GPIO_Init+0x2e8>)
 8001e80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e86:	4b54      	ldr	r3, [pc, #336]	@ (8001fd8 <HAL_GPIO_Init+0x2e8>)
 8001e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e8e:	60fb      	str	r3, [r7, #12]
 8001e90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e92:	4a52      	ldr	r2, [pc, #328]	@ (8001fdc <HAL_GPIO_Init+0x2ec>)
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f003 0303 	and.w	r3, r3, #3
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	220f      	movs	r2, #15
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	43db      	mvns	r3, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a49      	ldr	r2, [pc, #292]	@ (8001fe0 <HAL_GPIO_Init+0x2f0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d019      	beq.n	8001ef2 <HAL_GPIO_Init+0x202>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	4a48      	ldr	r2, [pc, #288]	@ (8001fe4 <HAL_GPIO_Init+0x2f4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0x1fe>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	4a47      	ldr	r2, [pc, #284]	@ (8001fe8 <HAL_GPIO_Init+0x2f8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d00d      	beq.n	8001eea <HAL_GPIO_Init+0x1fa>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a46      	ldr	r2, [pc, #280]	@ (8001fec <HAL_GPIO_Init+0x2fc>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d007      	beq.n	8001ee6 <HAL_GPIO_Init+0x1f6>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a45      	ldr	r2, [pc, #276]	@ (8001ff0 <HAL_GPIO_Init+0x300>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_GPIO_Init+0x1f2>
 8001ede:	2304      	movs	r3, #4
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ee2:	2307      	movs	r3, #7
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	@ (8001fdc <HAL_GPIO_Init+0x2ec>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f12:	4b38      	ldr	r3, [pc, #224]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f36:	4a2f      	ldr	r2, [pc, #188]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f60:	4a24      	ldr	r2, [pc, #144]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f66:	4b23      	ldr	r3, [pc, #140]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f90:	4b18      	ldr	r3, [pc, #96]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb4:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff4 <HAL_GPIO_Init+0x304>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f aea2 	bls.w	8001d0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	@ 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40013c00 	.word	0x40013c00

08001ff8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	807b      	strh	r3, [r7, #2]
 8002004:	4613      	mov	r3, r2
 8002006:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002008:	787b      	ldrb	r3, [r7, #1]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200e:	887a      	ldrh	r2, [r7, #2]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002014:	e003      	b.n	800201e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002016:	887b      	ldrh	r3, [r7, #2]
 8002018:	041a      	lsls	r2, r3, #16
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	619a      	str	r2, [r3, #24]
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e267      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d075      	beq.n	8002136 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800204a:	4b88      	ldr	r3, [pc, #544]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 030c 	and.w	r3, r3, #12
 8002052:	2b04      	cmp	r3, #4
 8002054:	d00c      	beq.n	8002070 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002056:	4b85      	ldr	r3, [pc, #532]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800205e:	2b08      	cmp	r3, #8
 8002060:	d112      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002062:	4b82      	ldr	r3, [pc, #520]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800206a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800206e:	d10b      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002070:	4b7e      	ldr	r3, [pc, #504]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d05b      	beq.n	8002134 <HAL_RCC_OscConfig+0x108>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d157      	bne.n	8002134 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e242      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002090:	d106      	bne.n	80020a0 <HAL_RCC_OscConfig+0x74>
 8002092:	4b76      	ldr	r3, [pc, #472]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a75      	ldr	r2, [pc, #468]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002098:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e01d      	b.n	80020dc <HAL_RCC_OscConfig+0xb0>
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020a8:	d10c      	bne.n	80020c4 <HAL_RCC_OscConfig+0x98>
 80020aa:	4b70      	ldr	r3, [pc, #448]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a6f      	ldr	r2, [pc, #444]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	4b6d      	ldr	r3, [pc, #436]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6c      	ldr	r2, [pc, #432]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	e00b      	b.n	80020dc <HAL_RCC_OscConfig+0xb0>
 80020c4:	4b69      	ldr	r3, [pc, #420]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a68      	ldr	r2, [pc, #416]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	4b66      	ldr	r3, [pc, #408]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a65      	ldr	r2, [pc, #404]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80020d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d013      	beq.n	800210c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020e4:	f7fe fee0 	bl	8000ea8 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7fe fedc 	bl	8000ea8 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	@ 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e207      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	4b5b      	ldr	r3, [pc, #364]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0xc0>
 800210a:	e014      	b.n	8002136 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210c:	f7fe fecc 	bl	8000ea8 <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002114:	f7fe fec8 	bl	8000ea8 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	@ 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e1f3      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	4b51      	ldr	r3, [pc, #324]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0xe8>
 8002132:	e000      	b.n	8002136 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d063      	beq.n	800220a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002142:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b00      	cmp	r3, #0
 800214c:	d00b      	beq.n	8002166 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800214e:	4b47      	ldr	r3, [pc, #284]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002156:	2b08      	cmp	r3, #8
 8002158:	d11c      	bne.n	8002194 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800215a:	4b44      	ldr	r3, [pc, #272]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d116      	bne.n	8002194 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002166:	4b41      	ldr	r3, [pc, #260]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_RCC_OscConfig+0x152>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d001      	beq.n	800217e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e1c7      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800217e:	4b3b      	ldr	r3, [pc, #236]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4937      	ldr	r1, [pc, #220]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002192:	e03a      	b.n	800220a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800219c:	4b34      	ldr	r3, [pc, #208]	@ (8002270 <HAL_RCC_OscConfig+0x244>)
 800219e:	2201      	movs	r2, #1
 80021a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a2:	f7fe fe81 	bl	8000ea8 <HAL_GetTick>
 80021a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021a8:	e008      	b.n	80021bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021aa:	f7fe fe7d 	bl	8000ea8 <HAL_GetTick>
 80021ae:	4602      	mov	r2, r0
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	1ad3      	subs	r3, r2, r3
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e1a8      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	4b2b      	ldr	r3, [pc, #172]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f003 0302 	and.w	r3, r3, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0f0      	beq.n	80021aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c8:	4b28      	ldr	r3, [pc, #160]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	00db      	lsls	r3, r3, #3
 80021d6:	4925      	ldr	r1, [pc, #148]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	600b      	str	r3, [r1, #0]
 80021dc:	e015      	b.n	800220a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021de:	4b24      	ldr	r3, [pc, #144]	@ (8002270 <HAL_RCC_OscConfig+0x244>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7fe fe60 	bl	8000ea8 <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ec:	f7fe fe5c 	bl	8000ea8 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e187      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	4b1b      	ldr	r3, [pc, #108]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0308 	and.w	r3, r3, #8
 8002212:	2b00      	cmp	r3, #0
 8002214:	d036      	beq.n	8002284 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d016      	beq.n	800224c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221e:	4b15      	ldr	r3, [pc, #84]	@ (8002274 <HAL_RCC_OscConfig+0x248>)
 8002220:	2201      	movs	r2, #1
 8002222:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7fe fe40 	bl	8000ea8 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800222c:	f7fe fe3c 	bl	8000ea8 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e167      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	4b0b      	ldr	r3, [pc, #44]	@ (800226c <HAL_RCC_OscConfig+0x240>)
 8002240:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d0f0      	beq.n	800222c <HAL_RCC_OscConfig+0x200>
 800224a:	e01b      	b.n	8002284 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800224c:	4b09      	ldr	r3, [pc, #36]	@ (8002274 <HAL_RCC_OscConfig+0x248>)
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7fe fe29 	bl	8000ea8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002258:	e00e      	b.n	8002278 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800225a:	f7fe fe25 	bl	8000ea8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d907      	bls.n	8002278 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e150      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
 800226c:	40023800 	.word	0x40023800
 8002270:	42470000 	.word	0x42470000
 8002274:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002278:	4b88      	ldr	r3, [pc, #544]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227c:	f003 0302 	and.w	r3, r3, #2
 8002280:	2b00      	cmp	r3, #0
 8002282:	d1ea      	bne.n	800225a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8097 	beq.w	80023c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002292:	2300      	movs	r3, #0
 8002294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002296:	4b81      	ldr	r3, [pc, #516]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002298:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800229a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d10f      	bne.n	80022c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a2:	2300      	movs	r3, #0
 80022a4:	60bb      	str	r3, [r7, #8]
 80022a6:	4b7d      	ldr	r3, [pc, #500]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80022a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022aa:	4a7c      	ldr	r2, [pc, #496]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80022ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022b2:	4b7a      	ldr	r3, [pc, #488]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	60bb      	str	r3, [r7, #8]
 80022bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022be:	2301      	movs	r3, #1
 80022c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022c2:	4b77      	ldr	r3, [pc, #476]	@ (80024a0 <HAL_RCC_OscConfig+0x474>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022ce:	4b74      	ldr	r3, [pc, #464]	@ (80024a0 <HAL_RCC_OscConfig+0x474>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a73      	ldr	r2, [pc, #460]	@ (80024a0 <HAL_RCC_OscConfig+0x474>)
 80022d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022da:	f7fe fde5 	bl	8000ea8 <HAL_GetTick>
 80022de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e0:	e008      	b.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e2:	f7fe fde1 	bl	8000ea8 <HAL_GetTick>
 80022e6:	4602      	mov	r2, r0
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d901      	bls.n	80022f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80022f0:	2303      	movs	r3, #3
 80022f2:	e10c      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f4:	4b6a      	ldr	r3, [pc, #424]	@ (80024a0 <HAL_RCC_OscConfig+0x474>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d0f0      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d106      	bne.n	8002316 <HAL_RCC_OscConfig+0x2ea>
 8002308:	4b64      	ldr	r3, [pc, #400]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800230a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800230c:	4a63      	ldr	r2, [pc, #396]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6713      	str	r3, [r2, #112]	@ 0x70
 8002314:	e01c      	b.n	8002350 <HAL_RCC_OscConfig+0x324>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	2b05      	cmp	r3, #5
 800231c:	d10c      	bne.n	8002338 <HAL_RCC_OscConfig+0x30c>
 800231e:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002320:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002322:	4a5e      	ldr	r2, [pc, #376]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002324:	f043 0304 	orr.w	r3, r3, #4
 8002328:	6713      	str	r3, [r2, #112]	@ 0x70
 800232a:	4b5c      	ldr	r3, [pc, #368]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	4a5b      	ldr	r2, [pc, #364]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6713      	str	r3, [r2, #112]	@ 0x70
 8002336:	e00b      	b.n	8002350 <HAL_RCC_OscConfig+0x324>
 8002338:	4b58      	ldr	r3, [pc, #352]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800233c:	4a57      	ldr	r2, [pc, #348]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800233e:	f023 0301 	bic.w	r3, r3, #1
 8002342:	6713      	str	r3, [r2, #112]	@ 0x70
 8002344:	4b55      	ldr	r3, [pc, #340]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002348:	4a54      	ldr	r2, [pc, #336]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 800234a:	f023 0304 	bic.w	r3, r3, #4
 800234e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002358:	f7fe fda6 	bl	8000ea8 <HAL_GetTick>
 800235c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800235e:	e00a      	b.n	8002376 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002360:	f7fe fda2 	bl	8000ea8 <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e0cb      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002376:	4b49      	ldr	r3, [pc, #292]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0ee      	beq.n	8002360 <HAL_RCC_OscConfig+0x334>
 8002382:	e014      	b.n	80023ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002384:	f7fe fd90 	bl	8000ea8 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe fd8c 	bl	8000ea8 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e0b5      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a2:	4b3e      	ldr	r3, [pc, #248]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80023a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1ee      	bne.n	800238c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023ae:	7dfb      	ldrb	r3, [r7, #23]
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d105      	bne.n	80023c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023b4:	4b39      	ldr	r3, [pc, #228]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	4a38      	ldr	r2, [pc, #224]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80023ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a1 	beq.w	800250c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023ca:	4b34      	ldr	r3, [pc, #208]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d05c      	beq.n	8002490 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d141      	bne.n	8002462 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023de:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_RCC_OscConfig+0x478>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e4:	f7fe fd60 	bl	8000ea8 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ec:	f7fe fd5c 	bl	8000ea8 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e087      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023fe:	4b27      	ldr	r3, [pc, #156]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	69da      	ldr	r2, [r3, #28]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002418:	019b      	lsls	r3, r3, #6
 800241a:	431a      	orrs	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	085b      	lsrs	r3, r3, #1
 8002422:	3b01      	subs	r3, #1
 8002424:	041b      	lsls	r3, r3, #16
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242c:	061b      	lsls	r3, r3, #24
 800242e:	491b      	ldr	r1, [pc, #108]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002434:	4b1b      	ldr	r3, [pc, #108]	@ (80024a4 <HAL_RCC_OscConfig+0x478>)
 8002436:	2201      	movs	r2, #1
 8002438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800243a:	f7fe fd35 	bl	8000ea8 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002442:	f7fe fd31 	bl	8000ea8 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e05c      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002454:	4b11      	ldr	r3, [pc, #68]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d0f0      	beq.n	8002442 <HAL_RCC_OscConfig+0x416>
 8002460:	e054      	b.n	800250c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002462:	4b10      	ldr	r3, [pc, #64]	@ (80024a4 <HAL_RCC_OscConfig+0x478>)
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002468:	f7fe fd1e 	bl	8000ea8 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7fe fd1a 	bl	8000ea8 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e045      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b06      	ldr	r3, [pc, #24]	@ (800249c <HAL_RCC_OscConfig+0x470>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x444>
 800248e:	e03d      	b.n	800250c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d107      	bne.n	80024a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e038      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
 800249c:	40023800 	.word	0x40023800
 80024a0:	40007000 	.word	0x40007000
 80024a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002518 <HAL_RCC_OscConfig+0x4ec>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	699b      	ldr	r3, [r3, #24]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d028      	beq.n	8002508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d121      	bne.n	8002508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d11a      	bne.n	8002508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024d2:	68fa      	ldr	r2, [r7, #12]
 80024d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80024d8:	4013      	ands	r3, r2
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80024de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d111      	bne.n	8002508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	085b      	lsrs	r3, r3, #1
 80024f0:	3b01      	subs	r3, #1
 80024f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d107      	bne.n	8002508 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002504:	429a      	cmp	r2, r3
 8002506:	d001      	beq.n	800250c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800250c:	2300      	movs	r3, #0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3718      	adds	r7, #24
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800

0800251c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d101      	bne.n	8002530 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e0cc      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002530:	4b68      	ldr	r3, [pc, #416]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0307 	and.w	r3, r3, #7
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	429a      	cmp	r2, r3
 800253c:	d90c      	bls.n	8002558 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253e:	4b65      	ldr	r3, [pc, #404]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002546:	4b63      	ldr	r3, [pc, #396]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	683a      	ldr	r2, [r7, #0]
 8002550:	429a      	cmp	r2, r3
 8002552:	d001      	beq.n	8002558 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e0b8      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d020      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d005      	beq.n	800257c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002570:	4b59      	ldr	r3, [pc, #356]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a58      	ldr	r2, [pc, #352]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002576:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800257a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002588:	4b53      	ldr	r3, [pc, #332]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	4a52      	ldr	r2, [pc, #328]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800258e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002592:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002594:	4b50      	ldr	r3, [pc, #320]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	494d      	ldr	r1, [pc, #308]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d044      	beq.n	800263c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d107      	bne.n	80025ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ba:	4b47      	ldr	r3, [pc, #284]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d119      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e07f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d003      	beq.n	80025da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d107      	bne.n	80025ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025da:	4b3f      	ldr	r3, [pc, #252]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e06f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ea:	4b3b      	ldr	r3, [pc, #236]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d101      	bne.n	80025fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e067      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fa:	4b37      	ldr	r3, [pc, #220]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f023 0203 	bic.w	r2, r3, #3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	4934      	ldr	r1, [pc, #208]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002608:	4313      	orrs	r3, r2
 800260a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800260c:	f7fe fc4c 	bl	8000ea8 <HAL_GetTick>
 8002610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002612:	e00a      	b.n	800262a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002614:	f7fe fc48 	bl	8000ea8 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e04f      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262a:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 020c 	and.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	429a      	cmp	r2, r3
 800263a:	d1eb      	bne.n	8002614 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b25      	ldr	r3, [pc, #148]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d20c      	bcs.n	8002664 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b22      	ldr	r3, [pc, #136]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002652:	4b20      	ldr	r3, [pc, #128]	@ (80026d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0307 	and.w	r3, r3, #7
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	429a      	cmp	r2, r3
 800265e:	d001      	beq.n	8002664 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e032      	b.n	80026ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	2b00      	cmp	r3, #0
 800266e:	d008      	beq.n	8002682 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	68db      	ldr	r3, [r3, #12]
 800267c:	4916      	ldr	r1, [pc, #88]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	4313      	orrs	r3, r2
 8002680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0308 	and.w	r3, r3, #8
 800268a:	2b00      	cmp	r3, #0
 800268c:	d009      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800268e:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	00db      	lsls	r3, r3, #3
 800269c:	490e      	ldr	r1, [pc, #56]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026a2:	f000 f821 	bl	80026e8 <HAL_RCC_GetSysClockFreq>
 80026a6:	4602      	mov	r2, r0
 80026a8:	4b0b      	ldr	r3, [pc, #44]	@ (80026d8 <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	091b      	lsrs	r3, r3, #4
 80026ae:	f003 030f 	and.w	r3, r3, #15
 80026b2:	490a      	ldr	r1, [pc, #40]	@ (80026dc <HAL_RCC_ClockConfig+0x1c0>)
 80026b4:	5ccb      	ldrb	r3, [r1, r3]
 80026b6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ba:	4a09      	ldr	r2, [pc, #36]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80026be:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fbac 	bl	8000e20 <HAL_InitTick>

  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3710      	adds	r7, #16
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40023c00 	.word	0x40023c00
 80026d8:	40023800 	.word	0x40023800
 80026dc:	08007654 	.word	0x08007654
 80026e0:	20000014 	.word	0x20000014
 80026e4:	20000018 	.word	0x20000018

080026e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026ec:	b090      	sub	sp, #64	@ 0x40
 80026ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026f0:	2300      	movs	r3, #0
 80026f2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002700:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d00d      	beq.n	8002728 <HAL_RCC_GetSysClockFreq+0x40>
 800270c:	2b08      	cmp	r3, #8
 800270e:	f200 80a1 	bhi.w	8002854 <HAL_RCC_GetSysClockFreq+0x16c>
 8002712:	2b00      	cmp	r3, #0
 8002714:	d002      	beq.n	800271c <HAL_RCC_GetSysClockFreq+0x34>
 8002716:	2b04      	cmp	r3, #4
 8002718:	d003      	beq.n	8002722 <HAL_RCC_GetSysClockFreq+0x3a>
 800271a:	e09b      	b.n	8002854 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800271c:	4b53      	ldr	r3, [pc, #332]	@ (800286c <HAL_RCC_GetSysClockFreq+0x184>)
 800271e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002720:	e09b      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002722:	4b53      	ldr	r3, [pc, #332]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x188>)
 8002724:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002726:	e098      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002728:	4b4f      	ldr	r3, [pc, #316]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002730:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002732:	4b4d      	ldr	r3, [pc, #308]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d028      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800273e:	4b4a      	ldr	r3, [pc, #296]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	2200      	movs	r2, #0
 8002746:	623b      	str	r3, [r7, #32]
 8002748:	627a      	str	r2, [r7, #36]	@ 0x24
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002750:	2100      	movs	r1, #0
 8002752:	4b47      	ldr	r3, [pc, #284]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x188>)
 8002754:	fb03 f201 	mul.w	r2, r3, r1
 8002758:	2300      	movs	r3, #0
 800275a:	fb00 f303 	mul.w	r3, r0, r3
 800275e:	4413      	add	r3, r2
 8002760:	4a43      	ldr	r2, [pc, #268]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x188>)
 8002762:	fba0 1202 	umull	r1, r2, r0, r2
 8002766:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002768:	460a      	mov	r2, r1
 800276a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800276c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800276e:	4413      	add	r3, r2
 8002770:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002772:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002774:	2200      	movs	r2, #0
 8002776:	61bb      	str	r3, [r7, #24]
 8002778:	61fa      	str	r2, [r7, #28]
 800277a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800277e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002782:	f7fd fd85 	bl	8000290 <__aeabi_uldivmod>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4613      	mov	r3, r2
 800278c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800278e:	e053      	b.n	8002838 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002790:	4b35      	ldr	r3, [pc, #212]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	099b      	lsrs	r3, r3, #6
 8002796:	2200      	movs	r2, #0
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	617a      	str	r2, [r7, #20]
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80027a2:	f04f 0b00 	mov.w	fp, #0
 80027a6:	4652      	mov	r2, sl
 80027a8:	465b      	mov	r3, fp
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	0159      	lsls	r1, r3, #5
 80027b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027b8:	0150      	lsls	r0, r2, #5
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	ebb2 080a 	subs.w	r8, r2, sl
 80027c2:	eb63 090b 	sbc.w	r9, r3, fp
 80027c6:	f04f 0200 	mov.w	r2, #0
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80027d2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80027d6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80027da:	ebb2 0408 	subs.w	r4, r2, r8
 80027de:	eb63 0509 	sbc.w	r5, r3, r9
 80027e2:	f04f 0200 	mov.w	r2, #0
 80027e6:	f04f 0300 	mov.w	r3, #0
 80027ea:	00eb      	lsls	r3, r5, #3
 80027ec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027f0:	00e2      	lsls	r2, r4, #3
 80027f2:	4614      	mov	r4, r2
 80027f4:	461d      	mov	r5, r3
 80027f6:	eb14 030a 	adds.w	r3, r4, sl
 80027fa:	603b      	str	r3, [r7, #0]
 80027fc:	eb45 030b 	adc.w	r3, r5, fp
 8002800:	607b      	str	r3, [r7, #4]
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	f04f 0300 	mov.w	r3, #0
 800280a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800280e:	4629      	mov	r1, r5
 8002810:	028b      	lsls	r3, r1, #10
 8002812:	4621      	mov	r1, r4
 8002814:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002818:	4621      	mov	r1, r4
 800281a:	028a      	lsls	r2, r1, #10
 800281c:	4610      	mov	r0, r2
 800281e:	4619      	mov	r1, r3
 8002820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002822:	2200      	movs	r2, #0
 8002824:	60bb      	str	r3, [r7, #8]
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800282c:	f7fd fd30 	bl	8000290 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4613      	mov	r3, r2
 8002836:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002838:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x180>)
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0c1b      	lsrs	r3, r3, #16
 800283e:	f003 0303 	and.w	r3, r3, #3
 8002842:	3301      	adds	r3, #1
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002848:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002850:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002852:	e002      	b.n	800285a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002854:	4b05      	ldr	r3, [pc, #20]	@ (800286c <HAL_RCC_GetSysClockFreq+0x184>)
 8002856:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002858:	bf00      	nop
    }
  }
  return sysclockfreq;
 800285a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800285c:	4618      	mov	r0, r3
 800285e:	3740      	adds	r7, #64	@ 0x40
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	40023800 	.word	0x40023800
 800286c:	00f42400 	.word	0x00f42400
 8002870:	017d7840 	.word	0x017d7840

08002874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <HAL_RCC_GetHCLKFreq+0x14>)
 800287a:	681b      	ldr	r3, [r3, #0]
}
 800287c:	4618      	mov	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	20000014 	.word	0x20000014

0800288c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002890:	f7ff fff0 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 8002894:	4602      	mov	r2, r0
 8002896:	4b05      	ldr	r3, [pc, #20]	@ (80028ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	0a9b      	lsrs	r3, r3, #10
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	4903      	ldr	r1, [pc, #12]	@ (80028b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028a2:	5ccb      	ldrb	r3, [r1, r3]
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	40023800 	.word	0x40023800
 80028b0:	08007664 	.word	0x08007664

080028b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028b8:	f7ff ffdc 	bl	8002874 <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0b5b      	lsrs	r3, r3, #13
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	@ (80028d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08007664 	.word	0x08007664

080028dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e042      	b.n	8002974 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d106      	bne.n	8002908 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f7fe f910 	bl	8000b28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2224      	movs	r2, #36	@ 0x24
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800291e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fc03 	bl	800312c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	691a      	ldr	r2, [r3, #16]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002934:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	695a      	ldr	r2, [r3, #20]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002944:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68da      	ldr	r2, [r3, #12]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002954:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3708      	adds	r7, #8
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08a      	sub	sp, #40	@ 0x28
 8002980:	af02      	add	r7, sp, #8
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	4613      	mov	r3, r2
 800298a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002996:	b2db      	uxtb	r3, r3
 8002998:	2b20      	cmp	r3, #32
 800299a:	d175      	bne.n	8002a88 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <HAL_UART_Transmit+0x2c>
 80029a2:	88fb      	ldrh	r3, [r7, #6]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d101      	bne.n	80029ac <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	e06e      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	2200      	movs	r2, #0
 80029b0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2221      	movs	r2, #33	@ 0x21
 80029b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fa75 	bl	8000ea8 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	88fa      	ldrh	r2, [r7, #6]
 80029c4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	88fa      	ldrh	r2, [r7, #6]
 80029ca:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029f0:	e02e      	b.n	8002a50 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2200      	movs	r2, #0
 80029fa:	2180      	movs	r1, #128	@ 0x80
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fa0a 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2220      	movs	r2, #32
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e03a      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e007      	b.n	8002a42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	3301      	adds	r3, #1
 8002a40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1cb      	bne.n	80029f2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	2200      	movs	r2, #0
 8002a62:	2140      	movs	r1, #64	@ 0x40
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 f9d6 	bl	8002e16 <UART_WaitOnFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d005      	beq.n	8002a7c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2220      	movs	r2, #32
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e006      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b20      	cmp	r3, #32
 8002aaa:	d112      	bne.n	8002ad2 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d002      	beq.n	8002ab8 <HAL_UART_Receive_DMA+0x26>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e00b      	b.n	8002ad4 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f9fd 	bl	8002ec8 <UART_Start_Receive_DMA>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	e000      	b.n	8002ad4 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002ad2:	2302      	movs	r3, #2
  }
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3710      	adds	r7, #16
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b090      	sub	sp, #64	@ 0x40
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002af2:	2b80      	cmp	r3, #128	@ 0x80
 8002af4:	bf0c      	ite	eq
 8002af6:	2301      	moveq	r3, #1
 8002af8:	2300      	movne	r3, #0
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b21      	cmp	r3, #33	@ 0x21
 8002b08:	d128      	bne.n	8002b5c <HAL_UART_DMAStop+0x80>
 8002b0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d025      	beq.n	8002b5c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	3314      	adds	r3, #20
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	e853 3f00 	ldrex	r3, [r3]
 8002b1e:	623b      	str	r3, [r7, #32]
   return(result);
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b26:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	3314      	adds	r3, #20
 8002b2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002b30:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b34:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b38:	e841 2300 	strex	r3, r2, [r1]
 8002b3c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d1e5      	bne.n	8002b10 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d004      	beq.n	8002b56 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe fbe7 	bl	8001324 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 fa5c 	bl	8003014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b66:	2b40      	cmp	r3, #64	@ 0x40
 8002b68:	bf0c      	ite	eq
 8002b6a:	2301      	moveq	r3, #1
 8002b6c:	2300      	movne	r3, #0
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b22      	cmp	r3, #34	@ 0x22
 8002b7c:	d128      	bne.n	8002bd0 <HAL_UART_DMAStop+0xf4>
 8002b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d025      	beq.n	8002bd0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3314      	adds	r3, #20
 8002b8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	e853 3f00 	ldrex	r3, [r3]
 8002b92:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002ba4:	61fa      	str	r2, [r7, #28]
 8002ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ba8:	69b9      	ldr	r1, [r7, #24]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	e841 2300 	strex	r3, r2, [r1]
 8002bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1e5      	bne.n	8002b84 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fbad 	bl	8001324 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa4a 	bl	8003064 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3740      	adds	r7, #64	@ 0x40
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}

08002bda <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b083      	sub	sp, #12
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b09c      	sub	sp, #112	@ 0x70
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c26:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d172      	bne.n	8002d1c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	330c      	adds	r3, #12
 8002c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c44:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c46:	e853 3f00 	ldrex	r3, [r3]
 8002c4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c52:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	330c      	adds	r3, #12
 8002c5a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002c5c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c5e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c62:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c64:	e841 2300 	strex	r3, r2, [r1]
 8002c68:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1e5      	bne.n	8002c3c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	3314      	adds	r3, #20
 8002c76:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c7a:	e853 3f00 	ldrex	r3, [r3]
 8002c7e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c82:	f023 0301 	bic.w	r3, r3, #1
 8002c86:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3314      	adds	r3, #20
 8002c8e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c90:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c94:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c98:	e841 2300 	strex	r3, r2, [r1]
 8002c9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d1e5      	bne.n	8002c70 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	3314      	adds	r3, #20
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cae:	e853 3f00 	ldrex	r3, [r3]
 8002cb2:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb4:	6a3b      	ldr	r3, [r7, #32]
 8002cb6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cba:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	3314      	adds	r3, #20
 8002cc2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002cc4:	633a      	str	r2, [r7, #48]	@ 0x30
 8002cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e5      	bne.n	8002ca4 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ce0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d119      	bne.n	8002d1c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf0:	693b      	ldr	r3, [r7, #16]
 8002cf2:	e853 3f00 	ldrex	r3, [r3]
 8002cf6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f023 0310 	bic.w	r3, r3, #16
 8002cfe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002d08:	61fa      	str	r2, [r7, #28]
 8002d0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0c:	69b9      	ldr	r1, [r7, #24]
 8002d0e:	69fa      	ldr	r2, [r7, #28]
 8002d10:	e841 2300 	strex	r3, r2, [r1]
 8002d14:	617b      	str	r3, [r7, #20]
   return(result);
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e5      	bne.n	8002ce8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d1e:	2200      	movs	r2, #0
 8002d20:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d106      	bne.n	8002d38 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002d2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002d32:	f7ff ff66 	bl	8002c02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d36:	e002      	b.n	8002d3e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8002d38:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8002d3a:	f7ff ff4e 	bl	8002bda <HAL_UART_RxCpltCallback>
}
 8002d3e:	bf00      	nop
 8002d40:	3770      	adds	r7, #112	@ 0x70
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b084      	sub	sp, #16
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	2201      	movs	r2, #1
 8002d58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d108      	bne.n	8002d74 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002d66:	085b      	lsrs	r3, r3, #1
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	4619      	mov	r1, r3
 8002d6c:	68f8      	ldr	r0, [r7, #12]
 8002d6e:	f7ff ff48 	bl	8002c02 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002d72:	e002      	b.n	8002d7a <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8002d74:	68f8      	ldr	r0, [r7, #12]
 8002d76:	f7fd fc2b 	bl	80005d0 <HAL_UART_RxHalfCpltCallback>
}
 8002d7a:	bf00      	nop
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b084      	sub	sp, #16
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d92:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d9e:	2b80      	cmp	r3, #128	@ 0x80
 8002da0:	bf0c      	ite	eq
 8002da2:	2301      	moveq	r3, #1
 8002da4:	2300      	movne	r3, #0
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b21      	cmp	r3, #33	@ 0x21
 8002db4:	d108      	bne.n	8002dc8 <UART_DMAError+0x46>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d005      	beq.n	8002dc8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8002dc2:	68b8      	ldr	r0, [r7, #8]
 8002dc4:	f000 f926 	bl	8003014 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	695b      	ldr	r3, [r3, #20]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	bf0c      	ite	eq
 8002dd6:	2301      	moveq	r3, #1
 8002dd8:	2300      	movne	r3, #0
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b22      	cmp	r3, #34	@ 0x22
 8002de8:	d108      	bne.n	8002dfc <UART_DMAError+0x7a>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d005      	beq.n	8002dfc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002df6:	68b8      	ldr	r0, [r7, #8]
 8002df8:	f000 f934 	bl	8003064 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e00:	f043 0210 	orr.w	r2, r3, #16
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002e08:	68b8      	ldr	r0, [r7, #8]
 8002e0a:	f7ff fef0 	bl	8002bee <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002e0e:	bf00      	nop
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b086      	sub	sp, #24
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	60f8      	str	r0, [r7, #12]
 8002e1e:	60b9      	str	r1, [r7, #8]
 8002e20:	603b      	str	r3, [r7, #0]
 8002e22:	4613      	mov	r3, r2
 8002e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e26:	e03b      	b.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e28:	6a3b      	ldr	r3, [r7, #32]
 8002e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e2e:	d037      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e30:	f7fe f83a 	bl	8000ea8 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	6a3a      	ldr	r2, [r7, #32]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d302      	bcc.n	8002e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e40:	6a3b      	ldr	r3, [r7, #32]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e03a      	b.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d023      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	2b80      	cmp	r3, #128	@ 0x80
 8002e5c:	d020      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	2b40      	cmp	r3, #64	@ 0x40
 8002e62:	d01d      	beq.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d116      	bne.n	8002ea0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002e72:	2300      	movs	r3, #0
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	617b      	str	r3, [r7, #20]
 8002e86:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f8eb 	bl	8003064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2208      	movs	r2, #8
 8002e92:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e00f      	b.n	8002ec0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	bf0c      	ite	eq
 8002eb0:	2301      	moveq	r3, #1
 8002eb2:	2300      	movne	r3, #0
 8002eb4:	b2db      	uxtb	r3, r3
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	79fb      	ldrb	r3, [r7, #7]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d0b4      	beq.n	8002e28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3718      	adds	r7, #24
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}

08002ec8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b098      	sub	sp, #96	@ 0x60
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2222      	movs	r2, #34	@ 0x22
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ef4:	4a44      	ldr	r2, [pc, #272]	@ (8003008 <UART_Start_Receive_DMA+0x140>)
 8002ef6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efc:	4a43      	ldr	r2, [pc, #268]	@ (800300c <UART_Start_Receive_DMA+0x144>)
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f04:	4a42      	ldr	r2, [pc, #264]	@ (8003010 <UART_Start_Receive_DMA+0x148>)
 8002f06:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f10:	f107 0308 	add.w	r3, r7, #8
 8002f14:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3304      	adds	r3, #4
 8002f20:	4619      	mov	r1, r3
 8002f22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	f7fe f9a4 	bl	8001274 <HAL_DMA_Start_IT>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d008      	beq.n	8002f44 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2210      	movs	r2, #16
 8002f36:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e05d      	b.n	8003000 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f44:	2300      	movs	r3, #0
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	613b      	str	r3, [r7, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d019      	beq.n	8002f96 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	330c      	adds	r3, #12
 8002f68:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f6c:	e853 3f00 	ldrex	r3, [r3]
 8002f70:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002f72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002f74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002f84:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f86:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002f88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f8a:	e841 2300 	strex	r3, r2, [r1]
 8002f8e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002f90:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1e5      	bne.n	8002f62 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	3314      	adds	r3, #20
 8002f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	657b      	str	r3, [r7, #84]	@ 0x54
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002fb6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fb8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002fbc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e5      	bne.n	8002f96 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3314      	adds	r3, #20
 8002fd0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	69bb      	ldr	r3, [r7, #24]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fe0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002fea:	627a      	str	r2, [r7, #36]	@ 0x24
 8002fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61fb      	str	r3, [r7, #28]
   return(result);
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3760      	adds	r7, #96	@ 0x60
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	08002c1b 	.word	0x08002c1b
 800300c:	08002d47 	.word	0x08002d47
 8003010:	08002d83 	.word	0x08002d83

08003014 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003014:	b480      	push	{r7}
 8003016:	b089      	sub	sp, #36	@ 0x24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	e853 3f00 	ldrex	r3, [r3]
 800302a:	60bb      	str	r3, [r7, #8]
   return(result);
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003032:	61fb      	str	r3, [r7, #28]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	69fa      	ldr	r2, [r7, #28]
 800303c:	61ba      	str	r2, [r7, #24]
 800303e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003040:	6979      	ldr	r1, [r7, #20]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	e841 2300 	strex	r3, r2, [r1]
 8003048:	613b      	str	r3, [r7, #16]
   return(result);
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1e5      	bne.n	800301c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8003058:	bf00      	nop
 800305a:	3724      	adds	r7, #36	@ 0x24
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b095      	sub	sp, #84	@ 0x54
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800307c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800308c:	643a      	str	r2, [r7, #64]	@ 0x40
 800308e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003094:	e841 2300 	strex	r3, r2, [r1]
 8003098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800309a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800309c:	2b00      	cmp	r3, #0
 800309e:	d1e5      	bne.n	800306c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a8:	6a3b      	ldr	r3, [r7, #32]
 80030aa:	e853 3f00 	ldrex	r3, [r3]
 80030ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	f023 0301 	bic.w	r3, r3, #1
 80030b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c8:	e841 2300 	strex	r3, r2, [r1]
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1e5      	bne.n	80030a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d119      	bne.n	8003110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	e853 3f00 	ldrex	r3, [r3]
 80030ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f023 0310 	bic.w	r3, r3, #16
 80030f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030fc:	61ba      	str	r2, [r7, #24]
 80030fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003100:	6979      	ldr	r1, [r7, #20]
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	e841 2300 	strex	r3, r2, [r1]
 8003108:	613b      	str	r3, [r7, #16]
   return(result);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1e5      	bne.n	80030dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800311e:	bf00      	nop
 8003120:	3754      	adds	r7, #84	@ 0x54
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
	...

0800312c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800312c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003130:	b0c0      	sub	sp, #256	@ 0x100
 8003132:	af00      	add	r7, sp, #0
 8003134:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003148:	68d9      	ldr	r1, [r3, #12]
 800314a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800314e:	681a      	ldr	r2, [r3, #0]
 8003150:	ea40 0301 	orr.w	r3, r0, r1
 8003154:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	431a      	orrs	r2, r3
 8003164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	431a      	orrs	r2, r3
 800316c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	4313      	orrs	r3, r2
 8003174:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003184:	f021 010c 	bic.w	r1, r1, #12
 8003188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003192:	430b      	orrs	r3, r1
 8003194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80031a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a6:	6999      	ldr	r1, [r3, #24]
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	ea40 0301 	orr.w	r3, r0, r1
 80031b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	4b8f      	ldr	r3, [pc, #572]	@ (80033f8 <UART_SetConfig+0x2cc>)
 80031bc:	429a      	cmp	r2, r3
 80031be:	d005      	beq.n	80031cc <UART_SetConfig+0xa0>
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	4b8d      	ldr	r3, [pc, #564]	@ (80033fc <UART_SetConfig+0x2d0>)
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d104      	bne.n	80031d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80031cc:	f7ff fb72 	bl	80028b4 <HAL_RCC_GetPCLK2Freq>
 80031d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80031d4:	e003      	b.n	80031de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80031d6:	f7ff fb59 	bl	800288c <HAL_RCC_GetPCLK1Freq>
 80031da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031e8:	f040 810c 	bne.w	8003404 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80031ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80031f0:	2200      	movs	r2, #0
 80031f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80031f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80031fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	1891      	adds	r1, r2, r2
 8003204:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003206:	415b      	adcs	r3, r3
 8003208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800320a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800320e:	4621      	mov	r1, r4
 8003210:	eb12 0801 	adds.w	r8, r2, r1
 8003214:	4629      	mov	r1, r5
 8003216:	eb43 0901 	adc.w	r9, r3, r1
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800322a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800322e:	4690      	mov	r8, r2
 8003230:	4699      	mov	r9, r3
 8003232:	4623      	mov	r3, r4
 8003234:	eb18 0303 	adds.w	r3, r8, r3
 8003238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800323c:	462b      	mov	r3, r5
 800323e:	eb49 0303 	adc.w	r3, r9, r3
 8003242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	2200      	movs	r2, #0
 800324e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003252:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003256:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800325a:	460b      	mov	r3, r1
 800325c:	18db      	adds	r3, r3, r3
 800325e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003260:	4613      	mov	r3, r2
 8003262:	eb42 0303 	adc.w	r3, r2, r3
 8003266:	657b      	str	r3, [r7, #84]	@ 0x54
 8003268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800326c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003270:	f7fd f80e 	bl	8000290 <__aeabi_uldivmod>
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4b61      	ldr	r3, [pc, #388]	@ (8003400 <UART_SetConfig+0x2d4>)
 800327a:	fba3 2302 	umull	r2, r3, r3, r2
 800327e:	095b      	lsrs	r3, r3, #5
 8003280:	011c      	lsls	r4, r3, #4
 8003282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003286:	2200      	movs	r2, #0
 8003288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800328c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003290:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003294:	4642      	mov	r2, r8
 8003296:	464b      	mov	r3, r9
 8003298:	1891      	adds	r1, r2, r2
 800329a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800329c:	415b      	adcs	r3, r3
 800329e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80032a4:	4641      	mov	r1, r8
 80032a6:	eb12 0a01 	adds.w	sl, r2, r1
 80032aa:	4649      	mov	r1, r9
 80032ac:	eb43 0b01 	adc.w	fp, r3, r1
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	f04f 0300 	mov.w	r3, #0
 80032b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032c4:	4692      	mov	sl, r2
 80032c6:	469b      	mov	fp, r3
 80032c8:	4643      	mov	r3, r8
 80032ca:	eb1a 0303 	adds.w	r3, sl, r3
 80032ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80032d2:	464b      	mov	r3, r9
 80032d4:	eb4b 0303 	adc.w	r3, fp, r3
 80032d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80032dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80032ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80032f0:	460b      	mov	r3, r1
 80032f2:	18db      	adds	r3, r3, r3
 80032f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80032f6:	4613      	mov	r3, r2
 80032f8:	eb42 0303 	adc.w	r3, r2, r3
 80032fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80032fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003302:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003306:	f7fc ffc3 	bl	8000290 <__aeabi_uldivmod>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4611      	mov	r1, r2
 8003310:	4b3b      	ldr	r3, [pc, #236]	@ (8003400 <UART_SetConfig+0x2d4>)
 8003312:	fba3 2301 	umull	r2, r3, r3, r1
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	2264      	movs	r2, #100	@ 0x64
 800331a:	fb02 f303 	mul.w	r3, r2, r3
 800331e:	1acb      	subs	r3, r1, r3
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003326:	4b36      	ldr	r3, [pc, #216]	@ (8003400 <UART_SetConfig+0x2d4>)
 8003328:	fba3 2302 	umull	r2, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003334:	441c      	add	r4, r3
 8003336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003340:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003344:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003348:	4642      	mov	r2, r8
 800334a:	464b      	mov	r3, r9
 800334c:	1891      	adds	r1, r2, r2
 800334e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003350:	415b      	adcs	r3, r3
 8003352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003358:	4641      	mov	r1, r8
 800335a:	1851      	adds	r1, r2, r1
 800335c:	6339      	str	r1, [r7, #48]	@ 0x30
 800335e:	4649      	mov	r1, r9
 8003360:	414b      	adcs	r3, r1
 8003362:	637b      	str	r3, [r7, #52]	@ 0x34
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003370:	4659      	mov	r1, fp
 8003372:	00cb      	lsls	r3, r1, #3
 8003374:	4651      	mov	r1, sl
 8003376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800337a:	4651      	mov	r1, sl
 800337c:	00ca      	lsls	r2, r1, #3
 800337e:	4610      	mov	r0, r2
 8003380:	4619      	mov	r1, r3
 8003382:	4603      	mov	r3, r0
 8003384:	4642      	mov	r2, r8
 8003386:	189b      	adds	r3, r3, r2
 8003388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800338c:	464b      	mov	r3, r9
 800338e:	460a      	mov	r2, r1
 8003390:	eb42 0303 	adc.w	r3, r2, r3
 8003394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80033a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80033a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80033ac:	460b      	mov	r3, r1
 80033ae:	18db      	adds	r3, r3, r3
 80033b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80033b2:	4613      	mov	r3, r2
 80033b4:	eb42 0303 	adc.w	r3, r2, r3
 80033b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80033ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80033be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80033c2:	f7fc ff65 	bl	8000290 <__aeabi_uldivmod>
 80033c6:	4602      	mov	r2, r0
 80033c8:	460b      	mov	r3, r1
 80033ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003400 <UART_SetConfig+0x2d4>)
 80033cc:	fba3 1302 	umull	r1, r3, r3, r2
 80033d0:	095b      	lsrs	r3, r3, #5
 80033d2:	2164      	movs	r1, #100	@ 0x64
 80033d4:	fb01 f303 	mul.w	r3, r1, r3
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	3332      	adds	r3, #50	@ 0x32
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <UART_SetConfig+0x2d4>)
 80033e0:	fba2 2303 	umull	r2, r3, r2, r3
 80033e4:	095b      	lsrs	r3, r3, #5
 80033e6:	f003 0207 	and.w	r2, r3, #7
 80033ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4422      	add	r2, r4
 80033f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80033f4:	e106      	b.n	8003604 <UART_SetConfig+0x4d8>
 80033f6:	bf00      	nop
 80033f8:	40011000 	.word	0x40011000
 80033fc:	40011400 	.word	0x40011400
 8003400:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003408:	2200      	movs	r2, #0
 800340a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800340e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003412:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003416:	4642      	mov	r2, r8
 8003418:	464b      	mov	r3, r9
 800341a:	1891      	adds	r1, r2, r2
 800341c:	6239      	str	r1, [r7, #32]
 800341e:	415b      	adcs	r3, r3
 8003420:	627b      	str	r3, [r7, #36]	@ 0x24
 8003422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003426:	4641      	mov	r1, r8
 8003428:	1854      	adds	r4, r2, r1
 800342a:	4649      	mov	r1, r9
 800342c:	eb43 0501 	adc.w	r5, r3, r1
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	00eb      	lsls	r3, r5, #3
 800343a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800343e:	00e2      	lsls	r2, r4, #3
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4643      	mov	r3, r8
 8003446:	18e3      	adds	r3, r4, r3
 8003448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800344c:	464b      	mov	r3, r9
 800344e:	eb45 0303 	adc.w	r3, r5, r3
 8003452:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003462:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	f04f 0300 	mov.w	r3, #0
 800346e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003472:	4629      	mov	r1, r5
 8003474:	008b      	lsls	r3, r1, #2
 8003476:	4621      	mov	r1, r4
 8003478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347c:	4621      	mov	r1, r4
 800347e:	008a      	lsls	r2, r1, #2
 8003480:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003484:	f7fc ff04 	bl	8000290 <__aeabi_uldivmod>
 8003488:	4602      	mov	r2, r0
 800348a:	460b      	mov	r3, r1
 800348c:	4b60      	ldr	r3, [pc, #384]	@ (8003610 <UART_SetConfig+0x4e4>)
 800348e:	fba3 2302 	umull	r2, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	011c      	lsls	r4, r3, #4
 8003496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800349a:	2200      	movs	r2, #0
 800349c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80034a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80034a8:	4642      	mov	r2, r8
 80034aa:	464b      	mov	r3, r9
 80034ac:	1891      	adds	r1, r2, r2
 80034ae:	61b9      	str	r1, [r7, #24]
 80034b0:	415b      	adcs	r3, r3
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034b8:	4641      	mov	r1, r8
 80034ba:	1851      	adds	r1, r2, r1
 80034bc:	6139      	str	r1, [r7, #16]
 80034be:	4649      	mov	r1, r9
 80034c0:	414b      	adcs	r3, r1
 80034c2:	617b      	str	r3, [r7, #20]
 80034c4:	f04f 0200 	mov.w	r2, #0
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034d0:	4659      	mov	r1, fp
 80034d2:	00cb      	lsls	r3, r1, #3
 80034d4:	4651      	mov	r1, sl
 80034d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034da:	4651      	mov	r1, sl
 80034dc:	00ca      	lsls	r2, r1, #3
 80034de:	4610      	mov	r0, r2
 80034e0:	4619      	mov	r1, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	4642      	mov	r2, r8
 80034e6:	189b      	adds	r3, r3, r2
 80034e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80034ec:	464b      	mov	r3, r9
 80034ee:	460a      	mov	r2, r1
 80034f0:	eb42 0303 	adc.w	r3, r2, r3
 80034f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80034f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003502:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003504:	f04f 0200 	mov.w	r2, #0
 8003508:	f04f 0300 	mov.w	r3, #0
 800350c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003510:	4649      	mov	r1, r9
 8003512:	008b      	lsls	r3, r1, #2
 8003514:	4641      	mov	r1, r8
 8003516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800351a:	4641      	mov	r1, r8
 800351c:	008a      	lsls	r2, r1, #2
 800351e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003522:	f7fc feb5 	bl	8000290 <__aeabi_uldivmod>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4611      	mov	r1, r2
 800352c:	4b38      	ldr	r3, [pc, #224]	@ (8003610 <UART_SetConfig+0x4e4>)
 800352e:	fba3 2301 	umull	r2, r3, r3, r1
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2264      	movs	r2, #100	@ 0x64
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	1acb      	subs	r3, r1, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	3332      	adds	r3, #50	@ 0x32
 8003540:	4a33      	ldr	r2, [pc, #204]	@ (8003610 <UART_SetConfig+0x4e4>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800354c:	441c      	add	r4, r3
 800354e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003552:	2200      	movs	r2, #0
 8003554:	673b      	str	r3, [r7, #112]	@ 0x70
 8003556:	677a      	str	r2, [r7, #116]	@ 0x74
 8003558:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800355c:	4642      	mov	r2, r8
 800355e:	464b      	mov	r3, r9
 8003560:	1891      	adds	r1, r2, r2
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	415b      	adcs	r3, r3
 8003566:	60fb      	str	r3, [r7, #12]
 8003568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800356c:	4641      	mov	r1, r8
 800356e:	1851      	adds	r1, r2, r1
 8003570:	6039      	str	r1, [r7, #0]
 8003572:	4649      	mov	r1, r9
 8003574:	414b      	adcs	r3, r1
 8003576:	607b      	str	r3, [r7, #4]
 8003578:	f04f 0200 	mov.w	r2, #0
 800357c:	f04f 0300 	mov.w	r3, #0
 8003580:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003584:	4659      	mov	r1, fp
 8003586:	00cb      	lsls	r3, r1, #3
 8003588:	4651      	mov	r1, sl
 800358a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800358e:	4651      	mov	r1, sl
 8003590:	00ca      	lsls	r2, r1, #3
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	4603      	mov	r3, r0
 8003598:	4642      	mov	r2, r8
 800359a:	189b      	adds	r3, r3, r2
 800359c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800359e:	464b      	mov	r3, r9
 80035a0:	460a      	mov	r2, r1
 80035a2:	eb42 0303 	adc.w	r3, r2, r3
 80035a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80035b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80035b4:	f04f 0200 	mov.w	r2, #0
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80035c0:	4649      	mov	r1, r9
 80035c2:	008b      	lsls	r3, r1, #2
 80035c4:	4641      	mov	r1, r8
 80035c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80035ca:	4641      	mov	r1, r8
 80035cc:	008a      	lsls	r2, r1, #2
 80035ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80035d2:	f7fc fe5d 	bl	8000290 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4b0d      	ldr	r3, [pc, #52]	@ (8003610 <UART_SetConfig+0x4e4>)
 80035dc:	fba3 1302 	umull	r1, r3, r3, r2
 80035e0:	095b      	lsrs	r3, r3, #5
 80035e2:	2164      	movs	r1, #100	@ 0x64
 80035e4:	fb01 f303 	mul.w	r3, r1, r3
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	3332      	adds	r3, #50	@ 0x32
 80035ee:	4a08      	ldr	r2, [pc, #32]	@ (8003610 <UART_SetConfig+0x4e4>)
 80035f0:	fba2 2303 	umull	r2, r3, r2, r3
 80035f4:	095b      	lsrs	r3, r3, #5
 80035f6:	f003 020f 	and.w	r2, r3, #15
 80035fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4422      	add	r2, r4
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	bf00      	nop
 8003606:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800360a:	46bd      	mov	sp, r7
 800360c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003610:	51eb851f 	.word	0x51eb851f

08003614 <__NVIC_SetPriority>:
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	6039      	str	r1, [r7, #0]
 800361e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003620:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003624:	2b00      	cmp	r3, #0
 8003626:	db0a      	blt.n	800363e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	b2da      	uxtb	r2, r3
 800362c:	490c      	ldr	r1, [pc, #48]	@ (8003660 <__NVIC_SetPriority+0x4c>)
 800362e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003632:	0112      	lsls	r2, r2, #4
 8003634:	b2d2      	uxtb	r2, r2
 8003636:	440b      	add	r3, r1
 8003638:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800363c:	e00a      	b.n	8003654 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	b2da      	uxtb	r2, r3
 8003642:	4908      	ldr	r1, [pc, #32]	@ (8003664 <__NVIC_SetPriority+0x50>)
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 030f 	and.w	r3, r3, #15
 800364a:	3b04      	subs	r3, #4
 800364c:	0112      	lsls	r2, r2, #4
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	440b      	add	r3, r1
 8003652:	761a      	strb	r2, [r3, #24]
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr
 8003660:	e000e100 	.word	0xe000e100
 8003664:	e000ed00 	.word	0xe000ed00

08003668 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800366c:	2100      	movs	r1, #0
 800366e:	f06f 0004 	mvn.w	r0, #4
 8003672:	f7ff ffcf 	bl	8003614 <__NVIC_SetPriority>
#endif
}
 8003676:	bf00      	nop
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003682:	f3ef 8305 	mrs	r3, IPSR
 8003686:	603b      	str	r3, [r7, #0]
  return(result);
 8003688:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800368e:	f06f 0305 	mvn.w	r3, #5
 8003692:	607b      	str	r3, [r7, #4]
 8003694:	e00c      	b.n	80036b0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003696:	4b0a      	ldr	r3, [pc, #40]	@ (80036c0 <osKernelInitialize+0x44>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d105      	bne.n	80036aa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800369e:	4b08      	ldr	r3, [pc, #32]	@ (80036c0 <osKernelInitialize+0x44>)
 80036a0:	2201      	movs	r2, #1
 80036a2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036a4:	2300      	movs	r3, #0
 80036a6:	607b      	str	r3, [r7, #4]
 80036a8:	e002      	b.n	80036b0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036aa:	f04f 33ff 	mov.w	r3, #4294967295
 80036ae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036b0:	687b      	ldr	r3, [r7, #4]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	370c      	adds	r7, #12
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	20010250 	.word	0x20010250

080036c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ca:	f3ef 8305 	mrs	r3, IPSR
 80036ce:	603b      	str	r3, [r7, #0]
  return(result);
 80036d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d003      	beq.n	80036de <osKernelStart+0x1a>
    stat = osErrorISR;
 80036d6:	f06f 0305 	mvn.w	r3, #5
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	e010      	b.n	8003700 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <osKernelStart+0x48>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d109      	bne.n	80036fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80036e6:	f7ff ffbf 	bl	8003668 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80036ea:	4b08      	ldr	r3, [pc, #32]	@ (800370c <osKernelStart+0x48>)
 80036ec:	2202      	movs	r2, #2
 80036ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80036f0:	f001 f87a 	bl	80047e8 <vTaskStartScheduler>
      stat = osOK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	e002      	b.n	8003700 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
 80036fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003700:	687b      	ldr	r3, [r7, #4]
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20010250 	.word	0x20010250

08003710 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003710:	b580      	push	{r7, lr}
 8003712:	b08e      	sub	sp, #56	@ 0x38
 8003714:	af04      	add	r7, sp, #16
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003720:	f3ef 8305 	mrs	r3, IPSR
 8003724:	617b      	str	r3, [r7, #20]
  return(result);
 8003726:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003728:	2b00      	cmp	r3, #0
 800372a:	d17e      	bne.n	800382a <osThreadNew+0x11a>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d07b      	beq.n	800382a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003732:	2380      	movs	r3, #128	@ 0x80
 8003734:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003736:	2318      	movs	r3, #24
 8003738:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800373e:	f04f 33ff 	mov.w	r3, #4294967295
 8003742:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d045      	beq.n	80037d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <osThreadNew+0x48>
        name = attr->name;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	699b      	ldr	r3, [r3, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	699b      	ldr	r3, [r3, #24]
 8003764:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <osThreadNew+0x6e>
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	2b38      	cmp	r3, #56	@ 0x38
 8003770:	d805      	bhi.n	800377e <osThreadNew+0x6e>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f003 0301 	and.w	r3, r3, #1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <osThreadNew+0x72>
        return (NULL);
 800377e:	2300      	movs	r3, #0
 8003780:	e054      	b.n	800382c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d00e      	beq.n	80037b8 <osThreadNew+0xa8>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	2b5b      	cmp	r3, #91	@ 0x5b
 80037a0:	d90a      	bls.n	80037b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d006      	beq.n	80037b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d002      	beq.n	80037b8 <osThreadNew+0xa8>
        mem = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e010      	b.n	80037da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10c      	bne.n	80037da <osThreadNew+0xca>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d108      	bne.n	80037da <osThreadNew+0xca>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d104      	bne.n	80037da <osThreadNew+0xca>
          mem = 0;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
 80037d4:	e001      	b.n	80037da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80037e4:	687a      	ldr	r2, [r7, #4]
 80037e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80037e8:	9202      	str	r2, [sp, #8]
 80037ea:	9301      	str	r3, [sp, #4]
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	9300      	str	r3, [sp, #0]
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	6a3a      	ldr	r2, [r7, #32]
 80037f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fe1a 	bl	8004430 <xTaskCreateStatic>
 80037fc:	4603      	mov	r3, r0
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	e013      	b.n	800382a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003802:	69bb      	ldr	r3, [r7, #24]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d110      	bne.n	800382a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003808:	6a3b      	ldr	r3, [r7, #32]
 800380a:	b29a      	uxth	r2, r3
 800380c:	f107 0310 	add.w	r3, r7, #16
 8003810:	9301      	str	r3, [sp, #4]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fe68 	bl	80044f0 <xTaskCreate>
 8003820:	4603      	mov	r3, r0
 8003822:	2b01      	cmp	r3, #1
 8003824:	d001      	beq.n	800382a <osThreadNew+0x11a>
            hTask = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800382a:	693b      	ldr	r3, [r7, #16]
}
 800382c:	4618      	mov	r0, r3
 800382e:	3728      	adds	r7, #40	@ 0x28
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800383c:	f3ef 8305 	mrs	r3, IPSR
 8003840:	60bb      	str	r3, [r7, #8]
  return(result);
 8003842:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003844:	2b00      	cmp	r3, #0
 8003846:	d003      	beq.n	8003850 <osDelay+0x1c>
    stat = osErrorISR;
 8003848:	f06f 0305 	mvn.w	r3, #5
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e007      	b.n	8003860 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <osDelay+0x2c>
      vTaskDelay(ticks);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 ff8e 	bl	800477c <vTaskDelay>
    }
  }

  return (stat);
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800386c:	b480      	push	{r7}
 800386e:	b085      	sub	sp, #20
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4a07      	ldr	r2, [pc, #28]	@ (8003898 <vApplicationGetIdleTaskMemory+0x2c>)
 800387c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a06      	ldr	r2, [pc, #24]	@ (800389c <vApplicationGetIdleTaskMemory+0x30>)
 8003882:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2280      	movs	r2, #128	@ 0x80
 8003888:	601a      	str	r2, [r3, #0]
}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	20010254 	.word	0x20010254
 800389c:	200102b0 	.word	0x200102b0

080038a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a07      	ldr	r2, [pc, #28]	@ (80038cc <vApplicationGetTimerTaskMemory+0x2c>)
 80038b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80038b2:	68bb      	ldr	r3, [r7, #8]
 80038b4:	4a06      	ldr	r2, [pc, #24]	@ (80038d0 <vApplicationGetTimerTaskMemory+0x30>)
 80038b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80038be:	601a      	str	r2, [r3, #0]
}
 80038c0:	bf00      	nop
 80038c2:	3714      	adds	r7, #20
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	200104b0 	.word	0x200104b0
 80038d0:	2001050c 	.word	0x2001050c

080038d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80038d4:	b480      	push	{r7}
 80038d6:	b083      	sub	sp, #12
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f103 0208 	add.w	r2, r3, #8
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f103 0208 	add.w	r2, r3, #8
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	f103 0208 	add.w	r2, r3, #8
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003908:	bf00      	nop
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800392e:	b480      	push	{r7}
 8003930:	b085      	sub	sp, #20
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
 8003936:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	68fa      	ldr	r2, [r7, #12]
 8003942:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	689a      	ldr	r2, [r3, #8]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	683a      	ldr	r2, [r7, #0]
 8003952:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	683a      	ldr	r2, [r7, #0]
 8003958:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	1c5a      	adds	r2, r3, #1
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	601a      	str	r2, [r3, #0]
}
 800396a:	bf00      	nop
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003976:	b480      	push	{r7}
 8003978:	b085      	sub	sp, #20
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
 800397e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	f1b3 3fff 	cmp.w	r3, #4294967295
 800398c:	d103      	bne.n	8003996 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e00c      	b.n	80039b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3308      	adds	r3, #8
 800399a:	60fb      	str	r3, [r7, #12]
 800399c:	e002      	b.n	80039a4 <vListInsert+0x2e>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	68ba      	ldr	r2, [r7, #8]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d2f6      	bcs.n	800399e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	683a      	ldr	r2, [r7, #0]
 80039be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	683a      	ldr	r2, [r7, #0]
 80039ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
}
 80039dc:	bf00      	nop
 80039de:	3714      	adds	r7, #20
 80039e0:	46bd      	mov	sp, r7
 80039e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e6:	4770      	bx	lr

080039e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b085      	sub	sp, #20
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6892      	ldr	r2, [r2, #8]
 80039fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	6852      	ldr	r2, [r2, #4]
 8003a08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d103      	bne.n	8003a1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	1e5a      	subs	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003a62:	bf00      	nop
 8003a64:	bf00      	nop
 8003a66:	e7fd      	b.n	8003a64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003a68:	f002 f876 	bl	8005b58 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a78:	fb01 f303 	mul.w	r3, r1, r3
 8003a7c:	441a      	add	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	68f9      	ldr	r1, [r7, #12]
 8003a9c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003a9e:	fb01 f303 	mul.w	r3, r1, r3
 8003aa2:	441a      	add	r2, r3
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	22ff      	movs	r2, #255	@ 0xff
 8003aac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	22ff      	movs	r2, #255	@ 0xff
 8003ab4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d114      	bne.n	8003ae8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	691b      	ldr	r3, [r3, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d01a      	beq.n	8003afc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	3310      	adds	r3, #16
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f91a 	bl	8004d04 <xTaskRemoveFromEventList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d012      	beq.n	8003afc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <xQueueGenericReset+0xd0>)
 8003ad8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	e009      	b.n	8003afc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	3310      	adds	r3, #16
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fef1 	bl	80038d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3324      	adds	r3, #36	@ 0x24
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7ff feec 	bl	80038d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003afc:	f002 f85e 	bl	8005bbc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b00:	2301      	movs	r3, #1
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3710      	adds	r7, #16
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08e      	sub	sp, #56	@ 0x38
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10b      	bne.n	8003b3c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003b36:	bf00      	nop
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10b      	bne.n	8003b5a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <xQueueGenericCreateStatic+0x56>
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d001      	beq.n	8003b6a <xQueueGenericCreateStatic+0x5a>
 8003b66:	2301      	movs	r3, #1
 8003b68:	e000      	b.n	8003b6c <xQueueGenericCreateStatic+0x5c>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d10b      	bne.n	8003b88 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	623b      	str	r3, [r7, #32]
}
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d102      	bne.n	8003b94 <xQueueGenericCreateStatic+0x84>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <xQueueGenericCreateStatic+0x88>
 8003b94:	2301      	movs	r3, #1
 8003b96:	e000      	b.n	8003b9a <xQueueGenericCreateStatic+0x8a>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10b      	bne.n	8003bb6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba2:	f383 8811 	msr	BASEPRI, r3
 8003ba6:	f3bf 8f6f 	isb	sy
 8003baa:	f3bf 8f4f 	dsb	sy
 8003bae:	61fb      	str	r3, [r7, #28]
}
 8003bb0:	bf00      	nop
 8003bb2:	bf00      	nop
 8003bb4:	e7fd      	b.n	8003bb2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003bb6:	2350      	movs	r3, #80	@ 0x50
 8003bb8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	2b50      	cmp	r3, #80	@ 0x50
 8003bbe:	d00b      	beq.n	8003bd8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	61bb      	str	r3, [r7, #24]
}
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003bd8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bec:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f805 	bl	8003c0a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3730      	adds	r7, #48	@ 0x30
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b084      	sub	sp, #16
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
 8003c16:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d103      	bne.n	8003c26 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e002      	b.n	8003c2c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c2c:	69bb      	ldr	r3, [r7, #24]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c38:	2101      	movs	r1, #1
 8003c3a:	69b8      	ldr	r0, [r7, #24]
 8003c3c:	f7ff fefe 	bl	8003a3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c48:	bf00      	nop
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b08e      	sub	sp, #56	@ 0x38
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003c66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d10b      	bne.n	8003c84 <xQueueGenericSend+0x34>
	__asm volatile
 8003c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c70:	f383 8811 	msr	BASEPRI, r3
 8003c74:	f3bf 8f6f 	isb	sy
 8003c78:	f3bf 8f4f 	dsb	sy
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c7e:	bf00      	nop
 8003c80:	bf00      	nop
 8003c82:	e7fd      	b.n	8003c80 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d103      	bne.n	8003c92 <xQueueGenericSend+0x42>
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d101      	bne.n	8003c96 <xQueueGenericSend+0x46>
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <xQueueGenericSend+0x48>
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10b      	bne.n	8003cb4 <xQueueGenericSend+0x64>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003cae:	bf00      	nop
 8003cb0:	bf00      	nop
 8003cb2:	e7fd      	b.n	8003cb0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d103      	bne.n	8003cc2 <xQueueGenericSend+0x72>
 8003cba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d101      	bne.n	8003cc6 <xQueueGenericSend+0x76>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueGenericSend+0x78>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10b      	bne.n	8003ce4 <xQueueGenericSend+0x94>
	__asm volatile
 8003ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd0:	f383 8811 	msr	BASEPRI, r3
 8003cd4:	f3bf 8f6f 	isb	sy
 8003cd8:	f3bf 8f4f 	dsb	sy
 8003cdc:	623b      	str	r3, [r7, #32]
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	e7fd      	b.n	8003ce0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ce4:	f001 f9ce 	bl	8005084 <xTaskGetSchedulerState>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <xQueueGenericSend+0xa4>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <xQueueGenericSend+0xa8>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <xQueueGenericSend+0xaa>
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10b      	bne.n	8003d16 <xQueueGenericSend+0xc6>
	__asm volatile
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	61fb      	str	r3, [r7, #28]
}
 8003d10:	bf00      	nop
 8003d12:	bf00      	nop
 8003d14:	e7fd      	b.n	8003d12 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d16:	f001 ff1f 	bl	8005b58 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d1c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d302      	bcc.n	8003d2c <xQueueGenericSend+0xdc>
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d129      	bne.n	8003d80 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	68b9      	ldr	r1, [r7, #8]
 8003d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003d32:	f000 fa0f 	bl	8004154 <prvCopyDataToQueue>
 8003d36:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d010      	beq.n	8003d62 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d42:	3324      	adds	r3, #36	@ 0x24
 8003d44:	4618      	mov	r0, r3
 8003d46:	f000 ffdd 	bl	8004d04 <xTaskRemoveFromEventList>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d013      	beq.n	8003d78 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d50:	4b3f      	ldr	r3, [pc, #252]	@ (8003e50 <xQueueGenericSend+0x200>)
 8003d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	e00a      	b.n	8003d78 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d68:	4b39      	ldr	r3, [pc, #228]	@ (8003e50 <xQueueGenericSend+0x200>)
 8003d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d78:	f001 ff20 	bl	8005bbc <vPortExitCritical>
				return pdPASS;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e063      	b.n	8003e48 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d103      	bne.n	8003d8e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d86:	f001 ff19 	bl	8005bbc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e05c      	b.n	8003e48 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d106      	bne.n	8003da2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d94:	f107 0314 	add.w	r3, r7, #20
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f817 	bl	8004dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003da2:	f001 ff0b 	bl	8005bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003da6:	f000 fd87 	bl	80048b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003daa:	f001 fed5 	bl	8005b58 <vPortEnterCritical>
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003db4:	b25b      	sxtb	r3, r3
 8003db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dba:	d103      	bne.n	8003dc4 <xQueueGenericSend+0x174>
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dca:	b25b      	sxtb	r3, r3
 8003dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd0:	d103      	bne.n	8003dda <xQueueGenericSend+0x18a>
 8003dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dda:	f001 feef 	bl	8005bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003dde:	1d3a      	adds	r2, r7, #4
 8003de0:	f107 0314 	add.w	r3, r7, #20
 8003de4:	4611      	mov	r1, r2
 8003de6:	4618      	mov	r0, r3
 8003de8:	f001 f806 	bl	8004df8 <xTaskCheckForTimeOut>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d124      	bne.n	8003e3c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003df2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003df4:	f000 faa6 	bl	8004344 <prvIsQueueFull>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d018      	beq.n	8003e30 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e00:	3310      	adds	r3, #16
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	4611      	mov	r1, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f000 ff2a 	bl	8004c60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003e0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e0e:	f000 fa31 	bl	8004274 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003e12:	f000 fd5f 	bl	80048d4 <xTaskResumeAll>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	f47f af7c 	bne.w	8003d16 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <xQueueGenericSend+0x200>)
 8003e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	f3bf 8f6f 	isb	sy
 8003e2e:	e772      	b.n	8003d16 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003e30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e32:	f000 fa1f 	bl	8004274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e36:	f000 fd4d 	bl	80048d4 <xTaskResumeAll>
 8003e3a:	e76c      	b.n	8003d16 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e3e:	f000 fa19 	bl	8004274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e42:	f000 fd47 	bl	80048d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3738      	adds	r7, #56	@ 0x38
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	e000ed04 	.word	0xe000ed04

08003e54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b090      	sub	sp, #64	@ 0x40
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10b      	bne.n	8003e84 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003e6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e70:	f383 8811 	msr	BASEPRI, r3
 8003e74:	f3bf 8f6f 	isb	sy
 8003e78:	f3bf 8f4f 	dsb	sy
 8003e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003e7e:	bf00      	nop
 8003e80:	bf00      	nop
 8003e82:	e7fd      	b.n	8003e80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d103      	bne.n	8003e92 <xQueueGenericSendFromISR+0x3e>
 8003e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d101      	bne.n	8003e96 <xQueueGenericSendFromISR+0x42>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <xQueueGenericSendFromISR+0x44>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10b      	bne.n	8003eb4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea0:	f383 8811 	msr	BASEPRI, r3
 8003ea4:	f3bf 8f6f 	isb	sy
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003eae:	bf00      	nop
 8003eb0:	bf00      	nop
 8003eb2:	e7fd      	b.n	8003eb0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	2b02      	cmp	r3, #2
 8003eb8:	d103      	bne.n	8003ec2 <xQueueGenericSendFromISR+0x6e>
 8003eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <xQueueGenericSendFromISR+0x72>
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <xQueueGenericSendFromISR+0x74>
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	623b      	str	r3, [r7, #32]
}
 8003ede:	bf00      	nop
 8003ee0:	bf00      	nop
 8003ee2:	e7fd      	b.n	8003ee0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ee4:	f001 ff18 	bl	8005d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ee8:	f3ef 8211 	mrs	r2, BASEPRI
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	61fa      	str	r2, [r7, #28]
 8003efe:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003f00:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003f02:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d302      	bcc.n	8003f16 <xQueueGenericSendFromISR+0xc2>
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d12f      	bne.n	8003f76 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f18:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003f1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	68b9      	ldr	r1, [r7, #8]
 8003f2a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003f2c:	f000 f912 	bl	8004154 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003f30:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f38:	d112      	bne.n	8003f60 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d016      	beq.n	8003f70 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f44:	3324      	adds	r3, #36	@ 0x24
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 fedc 	bl	8004d04 <xTaskRemoveFromEventList>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00e      	beq.n	8003f70 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00b      	beq.n	8003f70 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003f60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003f64:	3301      	adds	r3, #1
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	b25a      	sxtb	r2, r3
 8003f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f6c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003f70:	2301      	movs	r3, #1
 8003f72:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003f74:	e001      	b.n	8003f7a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f7c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f84:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3740      	adds	r7, #64	@ 0x40
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b08c      	sub	sp, #48	@ 0x30
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <xQueueReceive+0x32>
	__asm volatile
 8003faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fae:	f383 8811 	msr	BASEPRI, r3
 8003fb2:	f3bf 8f6f 	isb	sy
 8003fb6:	f3bf 8f4f 	dsb	sy
 8003fba:	623b      	str	r3, [r7, #32]
}
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	e7fd      	b.n	8003fbe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d103      	bne.n	8003fd0 <xQueueReceive+0x40>
 8003fc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <xQueueReceive+0x44>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <xQueueReceive+0x46>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10b      	bne.n	8003ff2 <xQueueReceive+0x62>
	__asm volatile
 8003fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fde:	f383 8811 	msr	BASEPRI, r3
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	f3bf 8f4f 	dsb	sy
 8003fea:	61fb      	str	r3, [r7, #28]
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	e7fd      	b.n	8003fee <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003ff2:	f001 f847 	bl	8005084 <xTaskGetSchedulerState>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d102      	bne.n	8004002 <xQueueReceive+0x72>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <xQueueReceive+0x76>
 8004002:	2301      	movs	r3, #1
 8004004:	e000      	b.n	8004008 <xQueueReceive+0x78>
 8004006:	2300      	movs	r3, #0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d10b      	bne.n	8004024 <xQueueReceive+0x94>
	__asm volatile
 800400c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004010:	f383 8811 	msr	BASEPRI, r3
 8004014:	f3bf 8f6f 	isb	sy
 8004018:	f3bf 8f4f 	dsb	sy
 800401c:	61bb      	str	r3, [r7, #24]
}
 800401e:	bf00      	nop
 8004020:	bf00      	nop
 8004022:	e7fd      	b.n	8004020 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004024:	f001 fd98 	bl	8005b58 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004028:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800402a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800402e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004030:	2b00      	cmp	r3, #0
 8004032:	d01f      	beq.n	8004074 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004034:	68b9      	ldr	r1, [r7, #8]
 8004036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004038:	f000 f8f6 	bl	8004228 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800403c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800403e:	1e5a      	subs	r2, r3, #1
 8004040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004042:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00f      	beq.n	800406c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800404c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800404e:	3310      	adds	r3, #16
 8004050:	4618      	mov	r0, r3
 8004052:	f000 fe57 	bl	8004d04 <xTaskRemoveFromEventList>
 8004056:	4603      	mov	r3, r0
 8004058:	2b00      	cmp	r3, #0
 800405a:	d007      	beq.n	800406c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800405c:	4b3c      	ldr	r3, [pc, #240]	@ (8004150 <xQueueReceive+0x1c0>)
 800405e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004062:	601a      	str	r2, [r3, #0]
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800406c:	f001 fda6 	bl	8005bbc <vPortExitCritical>
				return pdPASS;
 8004070:	2301      	movs	r3, #1
 8004072:	e069      	b.n	8004148 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800407a:	f001 fd9f 	bl	8005bbc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800407e:	2300      	movs	r3, #0
 8004080:	e062      	b.n	8004148 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004084:	2b00      	cmp	r3, #0
 8004086:	d106      	bne.n	8004096 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004088:	f107 0310 	add.w	r3, r7, #16
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fe9d 	bl	8004dcc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004092:	2301      	movs	r3, #1
 8004094:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004096:	f001 fd91 	bl	8005bbc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800409a:	f000 fc0d 	bl	80048b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800409e:	f001 fd5b 	bl	8005b58 <vPortEnterCritical>
 80040a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040a8:	b25b      	sxtb	r3, r3
 80040aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ae:	d103      	bne.n	80040b8 <xQueueReceive+0x128>
 80040b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b2:	2200      	movs	r2, #0
 80040b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040be:	b25b      	sxtb	r3, r3
 80040c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c4:	d103      	bne.n	80040ce <xQueueReceive+0x13e>
 80040c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040ce:	f001 fd75 	bl	8005bbc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040d2:	1d3a      	adds	r2, r7, #4
 80040d4:	f107 0310 	add.w	r3, r7, #16
 80040d8:	4611      	mov	r1, r2
 80040da:	4618      	mov	r0, r3
 80040dc:	f000 fe8c 	bl	8004df8 <xTaskCheckForTimeOut>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d123      	bne.n	800412e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80040e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80040e8:	f000 f916 	bl	8004318 <prvIsQueueEmpty>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d017      	beq.n	8004122 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80040f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f4:	3324      	adds	r3, #36	@ 0x24
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f000 fdb0 	bl	8004c60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004100:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004102:	f000 f8b7 	bl	8004274 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004106:	f000 fbe5 	bl	80048d4 <xTaskResumeAll>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d189      	bne.n	8004024 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004110:	4b0f      	ldr	r3, [pc, #60]	@ (8004150 <xQueueReceive+0x1c0>)
 8004112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004116:	601a      	str	r2, [r3, #0]
 8004118:	f3bf 8f4f 	dsb	sy
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	e780      	b.n	8004024 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004122:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004124:	f000 f8a6 	bl	8004274 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004128:	f000 fbd4 	bl	80048d4 <xTaskResumeAll>
 800412c:	e77a      	b.n	8004024 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800412e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004130:	f000 f8a0 	bl	8004274 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004134:	f000 fbce 	bl	80048d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004138:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800413a:	f000 f8ed 	bl	8004318 <prvIsQueueEmpty>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	f43f af6f 	beq.w	8004024 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004146:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004148:	4618      	mov	r0, r3
 800414a:	3730      	adds	r7, #48	@ 0x30
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004168:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10d      	bne.n	800418e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d14d      	bne.n	8004216 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ff9e 	bl	80050c0 <xTaskPriorityDisinherit>
 8004184:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	609a      	str	r2, [r3, #8]
 800418c:	e043      	b.n	8004216 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d119      	bne.n	80041c8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6858      	ldr	r0, [r3, #4]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	461a      	mov	r2, r3
 800419e:	68b9      	ldr	r1, [r7, #8]
 80041a0:	f002 f88e 	bl	80062c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	685a      	ldr	r2, [r3, #4]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	441a      	add	r2, r3
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d32b      	bcc.n	8004216 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	e026      	b.n	8004216 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	68d8      	ldr	r0, [r3, #12]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	461a      	mov	r2, r3
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	f002 f874 	bl	80062c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	68da      	ldr	r2, [r3, #12]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e0:	425b      	negs	r3, r3
 80041e2:	441a      	add	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	68da      	ldr	r2, [r3, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d207      	bcs.n	8004204 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fc:	425b      	negs	r3, r3
 80041fe:	441a      	add	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d105      	bne.n	8004216 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	3b01      	subs	r3, #1
 8004214:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800421e:	697b      	ldr	r3, [r7, #20]
}
 8004220:	4618      	mov	r0, r3
 8004222:	3718      	adds	r7, #24
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004236:	2b00      	cmp	r3, #0
 8004238:	d018      	beq.n	800426c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004242:	441a      	add	r2, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	68da      	ldr	r2, [r3, #12]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	429a      	cmp	r2, r3
 8004252:	d303      	bcc.n	800425c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68d9      	ldr	r1, [r3, #12]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004264:	461a      	mov	r2, r3
 8004266:	6838      	ldr	r0, [r7, #0]
 8004268:	f002 f82a 	bl	80062c0 <memcpy>
	}
}
 800426c:	bf00      	nop
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}

08004274 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800427c:	f001 fc6c 	bl	8005b58 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004286:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004288:	e011      	b.n	80042ae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800428e:	2b00      	cmp	r3, #0
 8004290:	d012      	beq.n	80042b8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3324      	adds	r3, #36	@ 0x24
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fd34 	bl	8004d04 <xTaskRemoveFromEventList>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80042a2:	f000 fe0d 	bl	8004ec0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80042ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	dce9      	bgt.n	800428a <prvUnlockQueue+0x16>
 80042b6:	e000      	b.n	80042ba <prvUnlockQueue+0x46>
					break;
 80042b8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	22ff      	movs	r2, #255	@ 0xff
 80042be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80042c2:	f001 fc7b 	bl	8005bbc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042c6:	f001 fc47 	bl	8005b58 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042d0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042d2:	e011      	b.n	80042f8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d012      	beq.n	8004302 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3310      	adds	r3, #16
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd0f 	bl	8004d04 <xTaskRemoveFromEventList>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042ec:	f000 fde8 	bl	8004ec0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042f0:	7bbb      	ldrb	r3, [r7, #14]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	dce9      	bgt.n	80042d4 <prvUnlockQueue+0x60>
 8004300:	e000      	b.n	8004304 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004302:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	22ff      	movs	r2, #255	@ 0xff
 8004308:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800430c:	f001 fc56 	bl	8005bbc <vPortExitCritical>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004320:	f001 fc1a 	bl	8005b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d102      	bne.n	8004332 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800432c:	2301      	movs	r3, #1
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e001      	b.n	8004336 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004336:	f001 fc41 	bl	8005bbc <vPortExitCritical>

	return xReturn;
 800433a:	68fb      	ldr	r3, [r7, #12]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800434c:	f001 fc04 	bl	8005b58 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004358:	429a      	cmp	r2, r3
 800435a:	d102      	bne.n	8004362 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e001      	b.n	8004366 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004366:	f001 fc29 	bl	8005bbc <vPortExitCritical>

	return xReturn;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3710      	adds	r7, #16
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004374:	b480      	push	{r7}
 8004376:	b085      	sub	sp, #20
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
 800437c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	e014      	b.n	80043ae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004384:	4a0f      	ldr	r2, [pc, #60]	@ (80043c4 <vQueueAddToRegistry+0x50>)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10b      	bne.n	80043a8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004390:	490c      	ldr	r1, [pc, #48]	@ (80043c4 <vQueueAddToRegistry+0x50>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800439a:	4a0a      	ldr	r2, [pc, #40]	@ (80043c4 <vQueueAddToRegistry+0x50>)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80043a6:	e006      	b.n	80043b6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3301      	adds	r3, #1
 80043ac:	60fb      	str	r3, [r7, #12]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2b07      	cmp	r3, #7
 80043b2:	d9e7      	bls.n	8004384 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80043b4:	bf00      	nop
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2001090c 	.word	0x2001090c

080043c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80043d8:	f001 fbbe 	bl	8005b58 <vPortEnterCritical>
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e2:	b25b      	sxtb	r3, r3
 80043e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e8:	d103      	bne.n	80043f2 <vQueueWaitForMessageRestricted+0x2a>
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d103      	bne.n	8004408 <vQueueWaitForMessageRestricted+0x40>
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004408:	f001 fbd8 	bl	8005bbc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004410:	2b00      	cmp	r3, #0
 8004412:	d106      	bne.n	8004422 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	3324      	adds	r3, #36	@ 0x24
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fc45 	bl	8004cac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004422:	6978      	ldr	r0, [r7, #20]
 8004424:	f7ff ff26 	bl	8004274 <prvUnlockQueue>
	}
 8004428:	bf00      	nop
 800442a:	3718      	adds	r7, #24
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08e      	sub	sp, #56	@ 0x38
 8004434:	af04      	add	r7, sp, #16
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
 800443c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800443e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10b      	bne.n	800445c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	623b      	str	r3, [r7, #32]
}
 8004456:	bf00      	nop
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800445c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10b      	bne.n	800447a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004466:	f383 8811 	msr	BASEPRI, r3
 800446a:	f3bf 8f6f 	isb	sy
 800446e:	f3bf 8f4f 	dsb	sy
 8004472:	61fb      	str	r3, [r7, #28]
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop
 8004478:	e7fd      	b.n	8004476 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800447a:	235c      	movs	r3, #92	@ 0x5c
 800447c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	2b5c      	cmp	r3, #92	@ 0x5c
 8004482:	d00b      	beq.n	800449c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	61bb      	str	r3, [r7, #24]
}
 8004496:	bf00      	nop
 8004498:	bf00      	nop
 800449a:	e7fd      	b.n	8004498 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800449c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800449e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d01e      	beq.n	80044e2 <xTaskCreateStatic+0xb2>
 80044a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d01b      	beq.n	80044e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80044ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80044b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80044b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b6:	2202      	movs	r2, #2
 80044b8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044bc:	2300      	movs	r3, #0
 80044be:	9303      	str	r3, [sp, #12]
 80044c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	f107 0314 	add.w	r3, r7, #20
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 f850 	bl	800457a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044dc:	f000 f8de 	bl	800469c <prvAddNewTaskToReadyList>
 80044e0:	e001      	b.n	80044e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80044e2:	2300      	movs	r3, #0
 80044e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044e6:	697b      	ldr	r3, [r7, #20]
	}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3728      	adds	r7, #40	@ 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08c      	sub	sp, #48	@ 0x30
 80044f4:	af04      	add	r7, sp, #16
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4618      	mov	r0, r3
 8004506:	f001 fc49 	bl	8005d9c <pvPortMalloc>
 800450a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00e      	beq.n	8004530 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004512:	205c      	movs	r0, #92	@ 0x5c
 8004514:	f001 fc42 	bl	8005d9c <pvPortMalloc>
 8004518:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800451a:	69fb      	ldr	r3, [r7, #28]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d003      	beq.n	8004528 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004520:	69fb      	ldr	r3, [r7, #28]
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	631a      	str	r2, [r3, #48]	@ 0x30
 8004526:	e005      	b.n	8004534 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004528:	6978      	ldr	r0, [r7, #20]
 800452a:	f001 fd05 	bl	8005f38 <vPortFree>
 800452e:	e001      	b.n	8004534 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004530:	2300      	movs	r3, #0
 8004532:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d017      	beq.n	800456a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	2300      	movs	r3, #0
 8004546:	9303      	str	r3, [sp, #12]
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	9302      	str	r3, [sp, #8]
 800454c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004552:	9300      	str	r3, [sp, #0]
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	68b9      	ldr	r1, [r7, #8]
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f000 f80e 	bl	800457a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800455e:	69f8      	ldr	r0, [r7, #28]
 8004560:	f000 f89c 	bl	800469c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004564:	2301      	movs	r3, #1
 8004566:	61bb      	str	r3, [r7, #24]
 8004568:	e002      	b.n	8004570 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800456a:	f04f 33ff 	mov.w	r3, #4294967295
 800456e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004570:	69bb      	ldr	r3, [r7, #24]
	}
 8004572:	4618      	mov	r0, r3
 8004574:	3720      	adds	r7, #32
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	60f8      	str	r0, [r7, #12]
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	607a      	str	r2, [r7, #4]
 8004586:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	461a      	mov	r2, r3
 8004592:	21a5      	movs	r1, #165	@ 0xa5
 8004594:	f001 fe3c 	bl	8006210 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80045a2:	3b01      	subs	r3, #1
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4413      	add	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	f023 0307 	bic.w	r3, r3, #7
 80045b0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	f003 0307 	and.w	r3, r3, #7
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00b      	beq.n	80045d4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	617b      	str	r3, [r7, #20]
}
 80045ce:	bf00      	nop
 80045d0:	bf00      	nop
 80045d2:	e7fd      	b.n	80045d0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d01f      	beq.n	800461a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045da:	2300      	movs	r3, #0
 80045dc:	61fb      	str	r3, [r7, #28]
 80045de:	e012      	b.n	8004606 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	4413      	add	r3, r2
 80045e6:	7819      	ldrb	r1, [r3, #0]
 80045e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	4413      	add	r3, r2
 80045ee:	3334      	adds	r3, #52	@ 0x34
 80045f0:	460a      	mov	r2, r1
 80045f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d006      	beq.n	800460e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	3301      	adds	r3, #1
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	2b0f      	cmp	r3, #15
 800460a:	d9e9      	bls.n	80045e0 <prvInitialiseNewTask+0x66>
 800460c:	e000      	b.n	8004610 <prvInitialiseNewTask+0x96>
			{
				break;
 800460e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004612:	2200      	movs	r2, #0
 8004614:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004618:	e003      	b.n	8004622 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800461a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461c:	2200      	movs	r2, #0
 800461e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004624:	2b37      	cmp	r3, #55	@ 0x37
 8004626:	d901      	bls.n	800462c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004628:	2337      	movs	r3, #55	@ 0x37
 800462a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004630:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004634:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004636:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	2200      	movs	r2, #0
 800463c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800463e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004640:	3304      	adds	r3, #4
 8004642:	4618      	mov	r0, r3
 8004644:	f7ff f966 	bl	8003914 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464a:	3318      	adds	r3, #24
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff f961 	bl	8003914 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004656:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800465a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800465e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004660:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004664:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004666:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466a:	2200      	movs	r2, #0
 800466c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	69b8      	ldr	r0, [r7, #24]
 800467c:	f001 f93e 	bl	80058fc <pxPortInitialiseStack>
 8004680:	4602      	mov	r2, r0
 8004682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004684:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004688:	2b00      	cmp	r3, #0
 800468a:	d002      	beq.n	8004692 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800468c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004692:	bf00      	nop
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046a4:	f001 fa58 	bl	8005b58 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004760 <prvAddNewTaskToReadyList+0xc4>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	3301      	adds	r3, #1
 80046ae:	4a2c      	ldr	r2, [pc, #176]	@ (8004760 <prvAddNewTaskToReadyList+0xc4>)
 80046b0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046b2:	4b2c      	ldr	r3, [pc, #176]	@ (8004764 <prvAddNewTaskToReadyList+0xc8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046ba:	4a2a      	ldr	r2, [pc, #168]	@ (8004764 <prvAddNewTaskToReadyList+0xc8>)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046c0:	4b27      	ldr	r3, [pc, #156]	@ (8004760 <prvAddNewTaskToReadyList+0xc4>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d110      	bne.n	80046ea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046c8:	f000 fc1e 	bl	8004f08 <prvInitialiseTaskLists>
 80046cc:	e00d      	b.n	80046ea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046ce:	4b26      	ldr	r3, [pc, #152]	@ (8004768 <prvAddNewTaskToReadyList+0xcc>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d109      	bne.n	80046ea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046d6:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <prvAddNewTaskToReadyList+0xc8>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d802      	bhi.n	80046ea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004764 <prvAddNewTaskToReadyList+0xc8>)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046ea:	4b20      	ldr	r3, [pc, #128]	@ (800476c <prvAddNewTaskToReadyList+0xd0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3301      	adds	r3, #1
 80046f0:	4a1e      	ldr	r2, [pc, #120]	@ (800476c <prvAddNewTaskToReadyList+0xd0>)
 80046f2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80046f4:	4b1d      	ldr	r3, [pc, #116]	@ (800476c <prvAddNewTaskToReadyList+0xd0>)
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004700:	4b1b      	ldr	r3, [pc, #108]	@ (8004770 <prvAddNewTaskToReadyList+0xd4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d903      	bls.n	8004710 <prvAddNewTaskToReadyList+0x74>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800470c:	4a18      	ldr	r2, [pc, #96]	@ (8004770 <prvAddNewTaskToReadyList+0xd4>)
 800470e:	6013      	str	r3, [r2, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004714:	4613      	mov	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4a15      	ldr	r2, [pc, #84]	@ (8004774 <prvAddNewTaskToReadyList+0xd8>)
 800471e:	441a      	add	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	3304      	adds	r3, #4
 8004724:	4619      	mov	r1, r3
 8004726:	4610      	mov	r0, r2
 8004728:	f7ff f901 	bl	800392e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800472c:	f001 fa46 	bl	8005bbc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004730:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <prvAddNewTaskToReadyList+0xcc>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00e      	beq.n	8004756 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004738:	4b0a      	ldr	r3, [pc, #40]	@ (8004764 <prvAddNewTaskToReadyList+0xc8>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	429a      	cmp	r2, r3
 8004744:	d207      	bcs.n	8004756 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004746:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <prvAddNewTaskToReadyList+0xdc>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	20010e20 	.word	0x20010e20
 8004764:	2001094c 	.word	0x2001094c
 8004768:	20010e2c 	.word	0x20010e2c
 800476c:	20010e3c 	.word	0x20010e3c
 8004770:	20010e28 	.word	0x20010e28
 8004774:	20010950 	.word	0x20010950
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004784:	2300      	movs	r3, #0
 8004786:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d018      	beq.n	80047c0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800478e:	4b14      	ldr	r3, [pc, #80]	@ (80047e0 <vTaskDelay+0x64>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d00b      	beq.n	80047ae <vTaskDelay+0x32>
	__asm volatile
 8004796:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800479a:	f383 8811 	msr	BASEPRI, r3
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f3bf 8f4f 	dsb	sy
 80047a6:	60bb      	str	r3, [r7, #8]
}
 80047a8:	bf00      	nop
 80047aa:	bf00      	nop
 80047ac:	e7fd      	b.n	80047aa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047ae:	f000 f883 	bl	80048b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047b2:	2100      	movs	r1, #0
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 fcf3 	bl	80051a0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047ba:	f000 f88b 	bl	80048d4 <xTaskResumeAll>
 80047be:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d107      	bne.n	80047d6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047c6:	4b07      	ldr	r3, [pc, #28]	@ (80047e4 <vTaskDelay+0x68>)
 80047c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047d6:	bf00      	nop
 80047d8:	3710      	adds	r7, #16
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20010e48 	.word	0x20010e48
 80047e4:	e000ed04 	.word	0xe000ed04

080047e8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b08a      	sub	sp, #40	@ 0x28
 80047ec:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047f6:	463a      	mov	r2, r7
 80047f8:	1d39      	adds	r1, r7, #4
 80047fa:	f107 0308 	add.w	r3, r7, #8
 80047fe:	4618      	mov	r0, r3
 8004800:	f7ff f834 	bl	800386c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004804:	6839      	ldr	r1, [r7, #0]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	9202      	str	r2, [sp, #8]
 800480c:	9301      	str	r3, [sp, #4]
 800480e:	2300      	movs	r3, #0
 8004810:	9300      	str	r3, [sp, #0]
 8004812:	2300      	movs	r3, #0
 8004814:	460a      	mov	r2, r1
 8004816:	4922      	ldr	r1, [pc, #136]	@ (80048a0 <vTaskStartScheduler+0xb8>)
 8004818:	4822      	ldr	r0, [pc, #136]	@ (80048a4 <vTaskStartScheduler+0xbc>)
 800481a:	f7ff fe09 	bl	8004430 <xTaskCreateStatic>
 800481e:	4603      	mov	r3, r0
 8004820:	4a21      	ldr	r2, [pc, #132]	@ (80048a8 <vTaskStartScheduler+0xc0>)
 8004822:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004824:	4b20      	ldr	r3, [pc, #128]	@ (80048a8 <vTaskStartScheduler+0xc0>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d002      	beq.n	8004832 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800482c:	2301      	movs	r3, #1
 800482e:	617b      	str	r3, [r7, #20]
 8004830:	e001      	b.n	8004836 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d102      	bne.n	8004842 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800483c:	f000 fd04 	bl	8005248 <xTimerCreateTimerTask>
 8004840:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d116      	bne.n	8004876 <vTaskStartScheduler+0x8e>
	__asm volatile
 8004848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484c:	f383 8811 	msr	BASEPRI, r3
 8004850:	f3bf 8f6f 	isb	sy
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	613b      	str	r3, [r7, #16]
}
 800485a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800485c:	4b13      	ldr	r3, [pc, #76]	@ (80048ac <vTaskStartScheduler+0xc4>)
 800485e:	f04f 32ff 	mov.w	r2, #4294967295
 8004862:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004864:	4b12      	ldr	r3, [pc, #72]	@ (80048b0 <vTaskStartScheduler+0xc8>)
 8004866:	2201      	movs	r2, #1
 8004868:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800486a:	4b12      	ldr	r3, [pc, #72]	@ (80048b4 <vTaskStartScheduler+0xcc>)
 800486c:	2200      	movs	r2, #0
 800486e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004870:	f001 f8ce 	bl	8005a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004874:	e00f      	b.n	8004896 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487c:	d10b      	bne.n	8004896 <vTaskStartScheduler+0xae>
	__asm volatile
 800487e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	60fb      	str	r3, [r7, #12]
}
 8004890:	bf00      	nop
 8004892:	bf00      	nop
 8004894:	e7fd      	b.n	8004892 <vTaskStartScheduler+0xaa>
}
 8004896:	bf00      	nop
 8004898:	3718      	adds	r7, #24
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	080075c4 	.word	0x080075c4
 80048a4:	08004ed9 	.word	0x08004ed9
 80048a8:	20010e44 	.word	0x20010e44
 80048ac:	20010e40 	.word	0x20010e40
 80048b0:	20010e2c 	.word	0x20010e2c
 80048b4:	20010e24 	.word	0x20010e24

080048b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <vTaskSuspendAll+0x18>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a03      	ldr	r2, [pc, #12]	@ (80048d0 <vTaskSuspendAll+0x18>)
 80048c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	20010e48 	.word	0x20010e48

080048d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048e2:	4b42      	ldr	r3, [pc, #264]	@ (80049ec <xTaskResumeAll+0x118>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <xTaskResumeAll+0x2e>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004902:	f001 f929 	bl	8005b58 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004906:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <xTaskResumeAll+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3b01      	subs	r3, #1
 800490c:	4a37      	ldr	r2, [pc, #220]	@ (80049ec <xTaskResumeAll+0x118>)
 800490e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <xTaskResumeAll+0x118>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d162      	bne.n	80049de <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004918:	4b35      	ldr	r3, [pc, #212]	@ (80049f0 <xTaskResumeAll+0x11c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d05e      	beq.n	80049de <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004920:	e02f      	b.n	8004982 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <xTaskResumeAll+0x120>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3318      	adds	r3, #24
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff f85a 	bl	80039e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff f855 	bl	80039e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004942:	4b2d      	ldr	r3, [pc, #180]	@ (80049f8 <xTaskResumeAll+0x124>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d903      	bls.n	8004952 <xTaskResumeAll+0x7e>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494e:	4a2a      	ldr	r2, [pc, #168]	@ (80049f8 <xTaskResumeAll+0x124>)
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004956:	4613      	mov	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4a27      	ldr	r2, [pc, #156]	@ (80049fc <xTaskResumeAll+0x128>)
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3304      	adds	r3, #4
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fe ffe0 	bl	800392e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004972:	4b23      	ldr	r3, [pc, #140]	@ (8004a00 <xTaskResumeAll+0x12c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004978:	429a      	cmp	r2, r3
 800497a:	d302      	bcc.n	8004982 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800497c:	4b21      	ldr	r3, [pc, #132]	@ (8004a04 <xTaskResumeAll+0x130>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004982:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <xTaskResumeAll+0x120>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1cb      	bne.n	8004922 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004990:	f000 fb58 	bl	8005044 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004994:	4b1c      	ldr	r3, [pc, #112]	@ (8004a08 <xTaskResumeAll+0x134>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d010      	beq.n	80049c2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049a0:	f000 f846 	bl	8004a30 <xTaskIncrementTick>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d002      	beq.n	80049b0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80049aa:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <xTaskResumeAll+0x130>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1f1      	bne.n	80049a0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80049bc:	4b12      	ldr	r3, [pc, #72]	@ (8004a08 <xTaskResumeAll+0x134>)
 80049be:	2200      	movs	r2, #0
 80049c0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049c2:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <xTaskResumeAll+0x130>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d009      	beq.n	80049de <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049ce:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <xTaskResumeAll+0x138>)
 80049d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	f3bf 8f4f 	dsb	sy
 80049da:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049de:	f001 f8ed 	bl	8005bbc <vPortExitCritical>

	return xAlreadyYielded;
 80049e2:	68bb      	ldr	r3, [r7, #8]
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3710      	adds	r7, #16
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	20010e48 	.word	0x20010e48
 80049f0:	20010e20 	.word	0x20010e20
 80049f4:	20010de0 	.word	0x20010de0
 80049f8:	20010e28 	.word	0x20010e28
 80049fc:	20010950 	.word	0x20010950
 8004a00:	2001094c 	.word	0x2001094c
 8004a04:	20010e34 	.word	0x20010e34
 8004a08:	20010e30 	.word	0x20010e30
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004a16:	4b05      	ldr	r3, [pc, #20]	@ (8004a2c <xTaskGetTickCount+0x1c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004a1c:	687b      	ldr	r3, [r7, #4]
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr
 8004a2a:	bf00      	nop
 8004a2c:	20010e24 	.word	0x20010e24

08004a30 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a3a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b78 <xTaskIncrementTick+0x148>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f040 8090 	bne.w	8004b64 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a44:	4b4d      	ldr	r3, [pc, #308]	@ (8004b7c <xTaskIncrementTick+0x14c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a4c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b7c <xTaskIncrementTick+0x14c>)
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d121      	bne.n	8004a9c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a58:	4b49      	ldr	r3, [pc, #292]	@ (8004b80 <xTaskIncrementTick+0x150>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d00b      	beq.n	8004a7a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	603b      	str	r3, [r7, #0]
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	e7fd      	b.n	8004a76 <xTaskIncrementTick+0x46>
 8004a7a:	4b41      	ldr	r3, [pc, #260]	@ (8004b80 <xTaskIncrementTick+0x150>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	60fb      	str	r3, [r7, #12]
 8004a80:	4b40      	ldr	r3, [pc, #256]	@ (8004b84 <xTaskIncrementTick+0x154>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a3e      	ldr	r2, [pc, #248]	@ (8004b80 <xTaskIncrementTick+0x150>)
 8004a86:	6013      	str	r3, [r2, #0]
 8004a88:	4a3e      	ldr	r2, [pc, #248]	@ (8004b84 <xTaskIncrementTick+0x154>)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b88 <xTaskIncrementTick+0x158>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	3301      	adds	r3, #1
 8004a94:	4a3c      	ldr	r2, [pc, #240]	@ (8004b88 <xTaskIncrementTick+0x158>)
 8004a96:	6013      	str	r3, [r2, #0]
 8004a98:	f000 fad4 	bl	8005044 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a9c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b8c <xTaskIncrementTick+0x15c>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	693a      	ldr	r2, [r7, #16]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d349      	bcc.n	8004b3a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa6:	4b36      	ldr	r3, [pc, #216]	@ (8004b80 <xTaskIncrementTick+0x150>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d104      	bne.n	8004aba <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ab0:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <xTaskIncrementTick+0x15c>)
 8004ab2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ab6:	601a      	str	r2, [r3, #0]
					break;
 8004ab8:	e03f      	b.n	8004b3a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aba:	4b31      	ldr	r3, [pc, #196]	@ (8004b80 <xTaskIncrementTick+0x150>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d203      	bcs.n	8004ada <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ad2:	4a2e      	ldr	r2, [pc, #184]	@ (8004b8c <xTaskIncrementTick+0x15c>)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ad8:	e02f      	b.n	8004b3a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f7fe ff82 	bl	80039e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d004      	beq.n	8004af6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	3318      	adds	r3, #24
 8004af0:	4618      	mov	r0, r3
 8004af2:	f7fe ff79 	bl	80039e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004afa:	4b25      	ldr	r3, [pc, #148]	@ (8004b90 <xTaskIncrementTick+0x160>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d903      	bls.n	8004b0a <xTaskIncrementTick+0xda>
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b06:	4a22      	ldr	r2, [pc, #136]	@ (8004b90 <xTaskIncrementTick+0x160>)
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4a1f      	ldr	r2, [pc, #124]	@ (8004b94 <xTaskIncrementTick+0x164>)
 8004b18:	441a      	add	r2, r3
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	3304      	adds	r3, #4
 8004b1e:	4619      	mov	r1, r3
 8004b20:	4610      	mov	r0, r2
 8004b22:	f7fe ff04 	bl	800392e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b98 <xTaskIncrementTick+0x168>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d3b8      	bcc.n	8004aa6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b34:	2301      	movs	r3, #1
 8004b36:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b38:	e7b5      	b.n	8004aa6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b3a:	4b17      	ldr	r3, [pc, #92]	@ (8004b98 <xTaskIncrementTick+0x168>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b40:	4914      	ldr	r1, [pc, #80]	@ (8004b94 <xTaskIncrementTick+0x164>)
 8004b42:	4613      	mov	r3, r2
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d901      	bls.n	8004b56 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b56:	4b11      	ldr	r3, [pc, #68]	@ (8004b9c <xTaskIncrementTick+0x16c>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d007      	beq.n	8004b6e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	e004      	b.n	8004b6e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b64:	4b0e      	ldr	r3, [pc, #56]	@ (8004ba0 <xTaskIncrementTick+0x170>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a0d      	ldr	r2, [pc, #52]	@ (8004ba0 <xTaskIncrementTick+0x170>)
 8004b6c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b6e:	697b      	ldr	r3, [r7, #20]
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20010e48 	.word	0x20010e48
 8004b7c:	20010e24 	.word	0x20010e24
 8004b80:	20010dd8 	.word	0x20010dd8
 8004b84:	20010ddc 	.word	0x20010ddc
 8004b88:	20010e38 	.word	0x20010e38
 8004b8c:	20010e40 	.word	0x20010e40
 8004b90:	20010e28 	.word	0x20010e28
 8004b94:	20010950 	.word	0x20010950
 8004b98:	2001094c 	.word	0x2001094c
 8004b9c:	20010e34 	.word	0x20010e34
 8004ba0:	20010e30 	.word	0x20010e30

08004ba4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004baa:	4b28      	ldr	r3, [pc, #160]	@ (8004c4c <vTaskSwitchContext+0xa8>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d003      	beq.n	8004bba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004bb2:	4b27      	ldr	r3, [pc, #156]	@ (8004c50 <vTaskSwitchContext+0xac>)
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004bb8:	e042      	b.n	8004c40 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004bba:	4b25      	ldr	r3, [pc, #148]	@ (8004c50 <vTaskSwitchContext+0xac>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bc0:	4b24      	ldr	r3, [pc, #144]	@ (8004c54 <vTaskSwitchContext+0xb0>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e011      	b.n	8004bec <vTaskSwitchContext+0x48>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10b      	bne.n	8004be6 <vTaskSwitchContext+0x42>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	607b      	str	r3, [r7, #4]
}
 8004be0:	bf00      	nop
 8004be2:	bf00      	nop
 8004be4:	e7fd      	b.n	8004be2 <vTaskSwitchContext+0x3e>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b01      	subs	r3, #1
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	491a      	ldr	r1, [pc, #104]	@ (8004c58 <vTaskSwitchContext+0xb4>)
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0e3      	beq.n	8004bc8 <vTaskSwitchContext+0x24>
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	4a13      	ldr	r2, [pc, #76]	@ (8004c58 <vTaskSwitchContext+0xb4>)
 8004c0c:	4413      	add	r3, r2
 8004c0e:	60bb      	str	r3, [r7, #8]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	605a      	str	r2, [r3, #4]
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3308      	adds	r3, #8
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d104      	bne.n	8004c30 <vTaskSwitchContext+0x8c>
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4a09      	ldr	r2, [pc, #36]	@ (8004c5c <vTaskSwitchContext+0xb8>)
 8004c38:	6013      	str	r3, [r2, #0]
 8004c3a:	4a06      	ldr	r2, [pc, #24]	@ (8004c54 <vTaskSwitchContext+0xb0>)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6013      	str	r3, [r2, #0]
}
 8004c40:	bf00      	nop
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	20010e48 	.word	0x20010e48
 8004c50:	20010e34 	.word	0x20010e34
 8004c54:	20010e28 	.word	0x20010e28
 8004c58:	20010950 	.word	0x20010950
 8004c5c:	2001094c 	.word	0x2001094c

08004c60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b084      	sub	sp, #16
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d10b      	bne.n	8004c88 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	60fb      	str	r3, [r7, #12]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c88:	4b07      	ldr	r3, [pc, #28]	@ (8004ca8 <vTaskPlaceOnEventList+0x48>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3318      	adds	r3, #24
 8004c8e:	4619      	mov	r1, r3
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7fe fe70 	bl	8003976 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c96:	2101      	movs	r1, #1
 8004c98:	6838      	ldr	r0, [r7, #0]
 8004c9a:	f000 fa81 	bl	80051a0 <prvAddCurrentTaskToDelayedList>
}
 8004c9e:	bf00      	nop
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	2001094c 	.word	0x2001094c

08004cac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10b      	bne.n	8004cd6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cc2:	f383 8811 	msr	BASEPRI, r3
 8004cc6:	f3bf 8f6f 	isb	sy
 8004cca:	f3bf 8f4f 	dsb	sy
 8004cce:	617b      	str	r3, [r7, #20]
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	e7fd      	b.n	8004cd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8004d00 <vTaskPlaceOnEventListRestricted+0x54>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	3318      	adds	r3, #24
 8004cdc:	4619      	mov	r1, r3
 8004cde:	68f8      	ldr	r0, [r7, #12]
 8004ce0:	f7fe fe25 	bl	800392e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004cea:	f04f 33ff 	mov.w	r3, #4294967295
 8004cee:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004cf0:	6879      	ldr	r1, [r7, #4]
 8004cf2:	68b8      	ldr	r0, [r7, #8]
 8004cf4:	f000 fa54 	bl	80051a0 <prvAddCurrentTaskToDelayedList>
	}
 8004cf8:	bf00      	nop
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	2001094c 	.word	0x2001094c

08004d04 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b086      	sub	sp, #24
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10b      	bne.n	8004d32 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	60fb      	str	r3, [r7, #12]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	3318      	adds	r3, #24
 8004d36:	4618      	mov	r0, r3
 8004d38:	f7fe fe56 	bl	80039e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004db4 <xTaskRemoveFromEventList+0xb0>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d11d      	bne.n	8004d80 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	3304      	adds	r3, #4
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f7fe fe4d 	bl	80039e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d52:	4b19      	ldr	r3, [pc, #100]	@ (8004db8 <xTaskRemoveFromEventList+0xb4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d903      	bls.n	8004d62 <xTaskRemoveFromEventList+0x5e>
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5e:	4a16      	ldr	r2, [pc, #88]	@ (8004db8 <xTaskRemoveFromEventList+0xb4>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4a13      	ldr	r2, [pc, #76]	@ (8004dbc <xTaskRemoveFromEventList+0xb8>)
 8004d70:	441a      	add	r2, r3
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3304      	adds	r3, #4
 8004d76:	4619      	mov	r1, r3
 8004d78:	4610      	mov	r0, r2
 8004d7a:	f7fe fdd8 	bl	800392e <vListInsertEnd>
 8004d7e:	e005      	b.n	8004d8c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	3318      	adds	r3, #24
 8004d84:	4619      	mov	r1, r3
 8004d86:	480e      	ldr	r0, [pc, #56]	@ (8004dc0 <xTaskRemoveFromEventList+0xbc>)
 8004d88:	f7fe fdd1 	bl	800392e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d90:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc4 <xTaskRemoveFromEventList+0xc0>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d905      	bls.n	8004da6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <xTaskRemoveFromEventList+0xc4>)
 8004da0:	2201      	movs	r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e001      	b.n	8004daa <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004da6:	2300      	movs	r3, #0
 8004da8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004daa:	697b      	ldr	r3, [r7, #20]
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	20010e48 	.word	0x20010e48
 8004db8:	20010e28 	.word	0x20010e28
 8004dbc:	20010950 	.word	0x20010950
 8004dc0:	20010de0 	.word	0x20010de0
 8004dc4:	2001094c 	.word	0x2001094c
 8004dc8:	20010e34 	.word	0x20010e34

08004dcc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	@ (8004df0 <vTaskInternalSetTimeOutState+0x24>)
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004ddc:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <vTaskInternalSetTimeOutState+0x28>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	605a      	str	r2, [r3, #4]
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20010e38 	.word	0x20010e38
 8004df4:	20010e24 	.word	0x20010e24

08004df8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b088      	sub	sp, #32
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10b      	bne.n	8004e20 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	613b      	str	r3, [r7, #16]
}
 8004e1a:	bf00      	nop
 8004e1c:	bf00      	nop
 8004e1e:	e7fd      	b.n	8004e1c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	60fb      	str	r3, [r7, #12]
}
 8004e38:	bf00      	nop
 8004e3a:	bf00      	nop
 8004e3c:	e7fd      	b.n	8004e3a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004e3e:	f000 fe8b 	bl	8005b58 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004e42:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <xTaskCheckForTimeOut+0xc0>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	1ad3      	subs	r3, r2, r3
 8004e50:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d102      	bne.n	8004e62 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	e023      	b.n	8004eaa <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	4b15      	ldr	r3, [pc, #84]	@ (8004ebc <xTaskCheckForTimeOut+0xc4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d007      	beq.n	8004e7e <xTaskCheckForTimeOut+0x86>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d302      	bcc.n	8004e7e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	e015      	b.n	8004eaa <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d20b      	bcs.n	8004ea0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	1ad2      	subs	r2, r2, r3
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	f7ff ff99 	bl	8004dcc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	61fb      	str	r3, [r7, #28]
 8004e9e:	e004      	b.n	8004eaa <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004eaa:	f000 fe87 	bl	8005bbc <vPortExitCritical>

	return xReturn;
 8004eae:	69fb      	ldr	r3, [r7, #28]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3720      	adds	r7, #32
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	20010e24 	.word	0x20010e24
 8004ebc:	20010e38 	.word	0x20010e38

08004ec0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ec4:	4b03      	ldr	r3, [pc, #12]	@ (8004ed4 <vTaskMissedYield+0x14>)
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	601a      	str	r2, [r3, #0]
}
 8004eca:	bf00      	nop
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	20010e34 	.word	0x20010e34

08004ed8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004ee0:	f000 f852 	bl	8004f88 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004ee4:	4b06      	ldr	r3, [pc, #24]	@ (8004f00 <prvIdleTask+0x28>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d9f9      	bls.n	8004ee0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004eec:	4b05      	ldr	r3, [pc, #20]	@ (8004f04 <prvIdleTask+0x2c>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004efc:	e7f0      	b.n	8004ee0 <prvIdleTask+0x8>
 8004efe:	bf00      	nop
 8004f00:	20010950 	.word	0x20010950
 8004f04:	e000ed04 	.word	0xe000ed04

08004f08 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f0e:	2300      	movs	r3, #0
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	e00c      	b.n	8004f2e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	4a12      	ldr	r2, [pc, #72]	@ (8004f68 <prvInitialiseTaskLists+0x60>)
 8004f20:	4413      	add	r3, r2
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fe fcd6 	bl	80038d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	607b      	str	r3, [r7, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2b37      	cmp	r3, #55	@ 0x37
 8004f32:	d9ef      	bls.n	8004f14 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f34:	480d      	ldr	r0, [pc, #52]	@ (8004f6c <prvInitialiseTaskLists+0x64>)
 8004f36:	f7fe fccd 	bl	80038d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f3a:	480d      	ldr	r0, [pc, #52]	@ (8004f70 <prvInitialiseTaskLists+0x68>)
 8004f3c:	f7fe fcca 	bl	80038d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f40:	480c      	ldr	r0, [pc, #48]	@ (8004f74 <prvInitialiseTaskLists+0x6c>)
 8004f42:	f7fe fcc7 	bl	80038d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004f46:	480c      	ldr	r0, [pc, #48]	@ (8004f78 <prvInitialiseTaskLists+0x70>)
 8004f48:	f7fe fcc4 	bl	80038d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004f4c:	480b      	ldr	r0, [pc, #44]	@ (8004f7c <prvInitialiseTaskLists+0x74>)
 8004f4e:	f7fe fcc1 	bl	80038d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004f52:	4b0b      	ldr	r3, [pc, #44]	@ (8004f80 <prvInitialiseTaskLists+0x78>)
 8004f54:	4a05      	ldr	r2, [pc, #20]	@ (8004f6c <prvInitialiseTaskLists+0x64>)
 8004f56:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004f58:	4b0a      	ldr	r3, [pc, #40]	@ (8004f84 <prvInitialiseTaskLists+0x7c>)
 8004f5a:	4a05      	ldr	r2, [pc, #20]	@ (8004f70 <prvInitialiseTaskLists+0x68>)
 8004f5c:	601a      	str	r2, [r3, #0]
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20010950 	.word	0x20010950
 8004f6c:	20010db0 	.word	0x20010db0
 8004f70:	20010dc4 	.word	0x20010dc4
 8004f74:	20010de0 	.word	0x20010de0
 8004f78:	20010df4 	.word	0x20010df4
 8004f7c:	20010e0c 	.word	0x20010e0c
 8004f80:	20010dd8 	.word	0x20010dd8
 8004f84:	20010ddc 	.word	0x20010ddc

08004f88 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f8e:	e019      	b.n	8004fc4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004f90:	f000 fde2 	bl	8005b58 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f94:	4b10      	ldr	r3, [pc, #64]	@ (8004fd8 <prvCheckTasksWaitingTermination+0x50>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3304      	adds	r3, #4
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f7fe fd21 	bl	80039e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8004fdc <prvCheckTasksWaitingTermination+0x54>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	3b01      	subs	r3, #1
 8004fac:	4a0b      	ldr	r2, [pc, #44]	@ (8004fdc <prvCheckTasksWaitingTermination+0x54>)
 8004fae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004fb0:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	3b01      	subs	r3, #1
 8004fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fb8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004fba:	f000 fdff 	bl	8005bbc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f810 	bl	8004fe4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004fc4:	4b06      	ldr	r3, [pc, #24]	@ (8004fe0 <prvCheckTasksWaitingTermination+0x58>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1e1      	bne.n	8004f90 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004fcc:	bf00      	nop
 8004fce:	bf00      	nop
 8004fd0:	3708      	adds	r7, #8
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20010df4 	.word	0x20010df4
 8004fdc:	20010e20 	.word	0x20010e20
 8004fe0:	20010e08 	.word	0x20010e08

08004fe4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b084      	sub	sp, #16
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d108      	bne.n	8005008 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 ff9c 	bl	8005f38 <vPortFree>
				vPortFree( pxTCB );
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 ff99 	bl	8005f38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005006:	e019      	b.n	800503c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800500e:	2b01      	cmp	r3, #1
 8005010:	d103      	bne.n	800501a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 ff90 	bl	8005f38 <vPortFree>
	}
 8005018:	e010      	b.n	800503c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005020:	2b02      	cmp	r3, #2
 8005022:	d00b      	beq.n	800503c <prvDeleteTCB+0x58>
	__asm volatile
 8005024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005028:	f383 8811 	msr	BASEPRI, r3
 800502c:	f3bf 8f6f 	isb	sy
 8005030:	f3bf 8f4f 	dsb	sy
 8005034:	60fb      	str	r3, [r7, #12]
}
 8005036:	bf00      	nop
 8005038:	bf00      	nop
 800503a:	e7fd      	b.n	8005038 <prvDeleteTCB+0x54>
	}
 800503c:	bf00      	nop
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504a:	4b0c      	ldr	r3, [pc, #48]	@ (800507c <prvResetNextTaskUnblockTime+0x38>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d104      	bne.n	800505e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005054:	4b0a      	ldr	r3, [pc, #40]	@ (8005080 <prvResetNextTaskUnblockTime+0x3c>)
 8005056:	f04f 32ff 	mov.w	r2, #4294967295
 800505a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800505c:	e008      	b.n	8005070 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800505e:	4b07      	ldr	r3, [pc, #28]	@ (800507c <prvResetNextTaskUnblockTime+0x38>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	68db      	ldr	r3, [r3, #12]
 8005066:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a04      	ldr	r2, [pc, #16]	@ (8005080 <prvResetNextTaskUnblockTime+0x3c>)
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	20010dd8 	.word	0x20010dd8
 8005080:	20010e40 	.word	0x20010e40

08005084 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005084:	b480      	push	{r7}
 8005086:	b083      	sub	sp, #12
 8005088:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <xTaskGetSchedulerState+0x34>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005092:	2301      	movs	r3, #1
 8005094:	607b      	str	r3, [r7, #4]
 8005096:	e008      	b.n	80050aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005098:	4b08      	ldr	r3, [pc, #32]	@ (80050bc <xTaskGetSchedulerState+0x38>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d102      	bne.n	80050a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80050a0:	2302      	movs	r3, #2
 80050a2:	607b      	str	r3, [r7, #4]
 80050a4:	e001      	b.n	80050aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80050a6:	2300      	movs	r3, #0
 80050a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80050aa:	687b      	ldr	r3, [r7, #4]
	}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr
 80050b8:	20010e2c 	.word	0x20010e2c
 80050bc:	20010e48 	.word	0x20010e48

080050c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050cc:	2300      	movs	r3, #0
 80050ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d058      	beq.n	8005188 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050d6:	4b2f      	ldr	r3, [pc, #188]	@ (8005194 <xTaskPriorityDisinherit+0xd4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	693a      	ldr	r2, [r7, #16]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d00b      	beq.n	80050f8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80050e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e4:	f383 8811 	msr	BASEPRI, r3
 80050e8:	f3bf 8f6f 	isb	sy
 80050ec:	f3bf 8f4f 	dsb	sy
 80050f0:	60fb      	str	r3, [r7, #12]
}
 80050f2:	bf00      	nop
 80050f4:	bf00      	nop
 80050f6:	e7fd      	b.n	80050f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60bb      	str	r3, [r7, #8]
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800511c:	1e5a      	subs	r2, r3, #1
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800512a:	429a      	cmp	r2, r3
 800512c:	d02c      	beq.n	8005188 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005132:	2b00      	cmp	r3, #0
 8005134:	d128      	bne.n	8005188 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	3304      	adds	r3, #4
 800513a:	4618      	mov	r0, r3
 800513c:	f7fe fc54 	bl	80039e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005158:	4b0f      	ldr	r3, [pc, #60]	@ (8005198 <xTaskPriorityDisinherit+0xd8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	429a      	cmp	r2, r3
 800515e:	d903      	bls.n	8005168 <xTaskPriorityDisinherit+0xa8>
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005164:	4a0c      	ldr	r2, [pc, #48]	@ (8005198 <xTaskPriorityDisinherit+0xd8>)
 8005166:	6013      	str	r3, [r2, #0]
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516c:	4613      	mov	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	4413      	add	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4a09      	ldr	r2, [pc, #36]	@ (800519c <xTaskPriorityDisinherit+0xdc>)
 8005176:	441a      	add	r2, r3
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	3304      	adds	r3, #4
 800517c:	4619      	mov	r1, r3
 800517e:	4610      	mov	r0, r2
 8005180:	f7fe fbd5 	bl	800392e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005188:	697b      	ldr	r3, [r7, #20]
	}
 800518a:	4618      	mov	r0, r3
 800518c:	3718      	adds	r7, #24
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	2001094c 	.word	0x2001094c
 8005198:	20010e28 	.word	0x20010e28
 800519c:	20010950 	.word	0x20010950

080051a0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80051aa:	4b21      	ldr	r3, [pc, #132]	@ (8005230 <prvAddCurrentTaskToDelayedList+0x90>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051b0:	4b20      	ldr	r3, [pc, #128]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	3304      	adds	r3, #4
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fc16 	bl	80039e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c2:	d10a      	bne.n	80051da <prvAddCurrentTaskToDelayedList+0x3a>
 80051c4:	683b      	ldr	r3, [r7, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4819      	ldr	r0, [pc, #100]	@ (8005238 <prvAddCurrentTaskToDelayedList+0x98>)
 80051d4:	f7fe fbab 	bl	800392e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80051d8:	e026      	b.n	8005228 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4413      	add	r3, r2
 80051e0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	429a      	cmp	r2, r3
 80051f0:	d209      	bcs.n	8005206 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80051f2:	4b12      	ldr	r3, [pc, #72]	@ (800523c <prvAddCurrentTaskToDelayedList+0x9c>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b0f      	ldr	r3, [pc, #60]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	3304      	adds	r3, #4
 80051fc:	4619      	mov	r1, r3
 80051fe:	4610      	mov	r0, r2
 8005200:	f7fe fbb9 	bl	8003976 <vListInsert>
}
 8005204:	e010      	b.n	8005228 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005206:	4b0e      	ldr	r3, [pc, #56]	@ (8005240 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	4b0a      	ldr	r3, [pc, #40]	@ (8005234 <prvAddCurrentTaskToDelayedList+0x94>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f7fe fbaf 	bl	8003976 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005218:	4b0a      	ldr	r3, [pc, #40]	@ (8005244 <prvAddCurrentTaskToDelayedList+0xa4>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	429a      	cmp	r2, r3
 8005220:	d202      	bcs.n	8005228 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005222:	4a08      	ldr	r2, [pc, #32]	@ (8005244 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	6013      	str	r3, [r2, #0]
}
 8005228:	bf00      	nop
 800522a:	3710      	adds	r7, #16
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}
 8005230:	20010e24 	.word	0x20010e24
 8005234:	2001094c 	.word	0x2001094c
 8005238:	20010e0c 	.word	0x20010e0c
 800523c:	20010ddc 	.word	0x20010ddc
 8005240:	20010dd8 	.word	0x20010dd8
 8005244:	20010e40 	.word	0x20010e40

08005248 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b08a      	sub	sp, #40	@ 0x28
 800524c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005252:	f000 fb13 	bl	800587c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005256:	4b1d      	ldr	r3, [pc, #116]	@ (80052cc <xTimerCreateTimerTask+0x84>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d021      	beq.n	80052a2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005266:	1d3a      	adds	r2, r7, #4
 8005268:	f107 0108 	add.w	r1, r7, #8
 800526c:	f107 030c 	add.w	r3, r7, #12
 8005270:	4618      	mov	r0, r3
 8005272:	f7fe fb15 	bl	80038a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	9202      	str	r2, [sp, #8]
 800527e:	9301      	str	r3, [sp, #4]
 8005280:	2302      	movs	r3, #2
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	460a      	mov	r2, r1
 8005288:	4911      	ldr	r1, [pc, #68]	@ (80052d0 <xTimerCreateTimerTask+0x88>)
 800528a:	4812      	ldr	r0, [pc, #72]	@ (80052d4 <xTimerCreateTimerTask+0x8c>)
 800528c:	f7ff f8d0 	bl	8004430 <xTaskCreateStatic>
 8005290:	4603      	mov	r3, r0
 8005292:	4a11      	ldr	r2, [pc, #68]	@ (80052d8 <xTimerCreateTimerTask+0x90>)
 8005294:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005296:	4b10      	ldr	r3, [pc, #64]	@ (80052d8 <xTimerCreateTimerTask+0x90>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d001      	beq.n	80052a2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800529e:	2301      	movs	r3, #1
 80052a0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d10b      	bne.n	80052c0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80052a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ac:	f383 8811 	msr	BASEPRI, r3
 80052b0:	f3bf 8f6f 	isb	sy
 80052b4:	f3bf 8f4f 	dsb	sy
 80052b8:	613b      	str	r3, [r7, #16]
}
 80052ba:	bf00      	nop
 80052bc:	bf00      	nop
 80052be:	e7fd      	b.n	80052bc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80052c0:	697b      	ldr	r3, [r7, #20]
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20010e7c 	.word	0x20010e7c
 80052d0:	080075cc 	.word	0x080075cc
 80052d4:	08005415 	.word	0x08005415
 80052d8:	20010e80 	.word	0x20010e80

080052dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b08a      	sub	sp, #40	@ 0x28
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80052ea:	2300      	movs	r3, #0
 80052ec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d10b      	bne.n	800530c <xTimerGenericCommand+0x30>
	__asm volatile
 80052f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f8:	f383 8811 	msr	BASEPRI, r3
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	f3bf 8f4f 	dsb	sy
 8005304:	623b      	str	r3, [r7, #32]
}
 8005306:	bf00      	nop
 8005308:	bf00      	nop
 800530a:	e7fd      	b.n	8005308 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800530c:	4b19      	ldr	r3, [pc, #100]	@ (8005374 <xTimerGenericCommand+0x98>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d02a      	beq.n	800536a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b05      	cmp	r3, #5
 8005324:	dc18      	bgt.n	8005358 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005326:	f7ff fead 	bl	8005084 <xTaskGetSchedulerState>
 800532a:	4603      	mov	r3, r0
 800532c:	2b02      	cmp	r3, #2
 800532e:	d109      	bne.n	8005344 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005330:	4b10      	ldr	r3, [pc, #64]	@ (8005374 <xTimerGenericCommand+0x98>)
 8005332:	6818      	ldr	r0, [r3, #0]
 8005334:	f107 0110 	add.w	r1, r7, #16
 8005338:	2300      	movs	r3, #0
 800533a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800533c:	f7fe fc88 	bl	8003c50 <xQueueGenericSend>
 8005340:	6278      	str	r0, [r7, #36]	@ 0x24
 8005342:	e012      	b.n	800536a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005344:	4b0b      	ldr	r3, [pc, #44]	@ (8005374 <xTimerGenericCommand+0x98>)
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	f107 0110 	add.w	r1, r7, #16
 800534c:	2300      	movs	r3, #0
 800534e:	2200      	movs	r2, #0
 8005350:	f7fe fc7e 	bl	8003c50 <xQueueGenericSend>
 8005354:	6278      	str	r0, [r7, #36]	@ 0x24
 8005356:	e008      	b.n	800536a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005358:	4b06      	ldr	r3, [pc, #24]	@ (8005374 <xTimerGenericCommand+0x98>)
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	f107 0110 	add.w	r1, r7, #16
 8005360:	2300      	movs	r3, #0
 8005362:	683a      	ldr	r2, [r7, #0]
 8005364:	f7fe fd76 	bl	8003e54 <xQueueGenericSendFromISR>
 8005368:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800536a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800536c:	4618      	mov	r0, r3
 800536e:	3728      	adds	r7, #40	@ 0x28
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	20010e7c 	.word	0x20010e7c

08005378 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af02      	add	r7, sp, #8
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005382:	4b23      	ldr	r3, [pc, #140]	@ (8005410 <prvProcessExpiredTimer+0x98>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	3304      	adds	r3, #4
 8005390:	4618      	mov	r0, r3
 8005392:	f7fe fb29 	bl	80039e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800539c:	f003 0304 	and.w	r3, r3, #4
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d023      	beq.n	80053ec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	699a      	ldr	r2, [r3, #24]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	18d1      	adds	r1, r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	683a      	ldr	r2, [r7, #0]
 80053b0:	6978      	ldr	r0, [r7, #20]
 80053b2:	f000 f8d5 	bl	8005560 <prvInsertTimerInActiveList>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d020      	beq.n	80053fe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80053bc:	2300      	movs	r3, #0
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	2100      	movs	r1, #0
 80053c6:	6978      	ldr	r0, [r7, #20]
 80053c8:	f7ff ff88 	bl	80052dc <xTimerGenericCommand>
 80053cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d114      	bne.n	80053fe <prvProcessExpiredTimer+0x86>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	60fb      	str	r3, [r7, #12]
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80053f2:	f023 0301 	bic.w	r3, r3, #1
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	6a1b      	ldr	r3, [r3, #32]
 8005402:	6978      	ldr	r0, [r7, #20]
 8005404:	4798      	blx	r3
}
 8005406:	bf00      	nop
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20010e74 	.word	0x20010e74

08005414 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b084      	sub	sp, #16
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f859 	bl	80054d8 <prvGetNextExpireTime>
 8005426:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	4619      	mov	r1, r3
 800542c:	68f8      	ldr	r0, [r7, #12]
 800542e:	f000 f805 	bl	800543c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005432:	f000 f8d7 	bl	80055e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005436:	bf00      	nop
 8005438:	e7f0      	b.n	800541c <prvTimerTask+0x8>
	...

0800543c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005446:	f7ff fa37 	bl	80048b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800544a:	f107 0308 	add.w	r3, r7, #8
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f866 	bl	8005520 <prvSampleTimeNow>
 8005454:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d130      	bne.n	80054be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10a      	bne.n	8005478 <prvProcessTimerOrBlockTask+0x3c>
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	429a      	cmp	r2, r3
 8005468:	d806      	bhi.n	8005478 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800546a:	f7ff fa33 	bl	80048d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800546e:	68f9      	ldr	r1, [r7, #12]
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f7ff ff81 	bl	8005378 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005476:	e024      	b.n	80054c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800547e:	4b13      	ldr	r3, [pc, #76]	@ (80054cc <prvProcessTimerOrBlockTask+0x90>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d101      	bne.n	800548c <prvProcessTimerOrBlockTask+0x50>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <prvProcessTimerOrBlockTask+0x52>
 800548c:	2300      	movs	r3, #0
 800548e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005490:	4b0f      	ldr	r3, [pc, #60]	@ (80054d0 <prvProcessTimerOrBlockTask+0x94>)
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	4619      	mov	r1, r3
 800549e:	f7fe ff93 	bl	80043c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80054a2:	f7ff fa17 	bl	80048d4 <xTaskResumeAll>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d10a      	bne.n	80054c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80054ac:	4b09      	ldr	r3, [pc, #36]	@ (80054d4 <prvProcessTimerOrBlockTask+0x98>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
}
 80054bc:	e001      	b.n	80054c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80054be:	f7ff fa09 	bl	80048d4 <xTaskResumeAll>
}
 80054c2:	bf00      	nop
 80054c4:	3710      	adds	r7, #16
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	20010e78 	.word	0x20010e78
 80054d0:	20010e7c 	.word	0x20010e7c
 80054d4:	e000ed04 	.word	0xe000ed04

080054d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80054e0:	4b0e      	ldr	r3, [pc, #56]	@ (800551c <prvGetNextExpireTime+0x44>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <prvGetNextExpireTime+0x16>
 80054ea:	2201      	movs	r2, #1
 80054ec:	e000      	b.n	80054f0 <prvGetNextExpireTime+0x18>
 80054ee:	2200      	movs	r2, #0
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d105      	bne.n	8005508 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80054fc:	4b07      	ldr	r3, [pc, #28]	@ (800551c <prvGetNextExpireTime+0x44>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60fb      	str	r3, [r7, #12]
 8005506:	e001      	b.n	800550c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005508:	2300      	movs	r3, #0
 800550a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800550c:	68fb      	ldr	r3, [r7, #12]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
 800551a:	bf00      	nop
 800551c:	20010e74 	.word	0x20010e74

08005520 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005528:	f7ff fa72 	bl	8004a10 <xTaskGetTickCount>
 800552c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800552e:	4b0b      	ldr	r3, [pc, #44]	@ (800555c <prvSampleTimeNow+0x3c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d205      	bcs.n	8005544 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005538:	f000 f93a 	bl	80057b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	601a      	str	r2, [r3, #0]
 8005542:	e002      	b.n	800554a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800554a:	4a04      	ldr	r2, [pc, #16]	@ (800555c <prvSampleTimeNow+0x3c>)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005550:	68fb      	ldr	r3, [r7, #12]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	20010e84 	.word	0x20010e84

08005560 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b086      	sub	sp, #24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
 800556c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800556e:	2300      	movs	r3, #0
 8005570:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	429a      	cmp	r2, r3
 8005584:	d812      	bhi.n	80055ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005594:	2301      	movs	r3, #1
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e01b      	b.n	80055d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800559a:	4b10      	ldr	r3, [pc, #64]	@ (80055dc <prvInsertTimerInActiveList+0x7c>)
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3304      	adds	r3, #4
 80055a2:	4619      	mov	r1, r3
 80055a4:	4610      	mov	r0, r2
 80055a6:	f7fe f9e6 	bl	8003976 <vListInsert>
 80055aa:	e012      	b.n	80055d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80055ac:	687a      	ldr	r2, [r7, #4]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d206      	bcs.n	80055c2 <prvInsertTimerInActiveList+0x62>
 80055b4:	68ba      	ldr	r2, [r7, #8]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d302      	bcc.n	80055c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80055bc:	2301      	movs	r3, #1
 80055be:	617b      	str	r3, [r7, #20]
 80055c0:	e007      	b.n	80055d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80055c2:	4b07      	ldr	r3, [pc, #28]	@ (80055e0 <prvInsertTimerInActiveList+0x80>)
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe f9d2 	bl	8003976 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80055d2:	697b      	ldr	r3, [r7, #20]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	20010e78 	.word	0x20010e78
 80055e0:	20010e74 	.word	0x20010e74

080055e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b08e      	sub	sp, #56	@ 0x38
 80055e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80055ea:	e0ce      	b.n	800578a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	da19      	bge.n	8005626 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80055f2:	1d3b      	adds	r3, r7, #4
 80055f4:	3304      	adds	r3, #4
 80055f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80055f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10b      	bne.n	8005616 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80055fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005602:	f383 8811 	msr	BASEPRI, r3
 8005606:	f3bf 8f6f 	isb	sy
 800560a:	f3bf 8f4f 	dsb	sy
 800560e:	61fb      	str	r3, [r7, #28]
}
 8005610:	bf00      	nop
 8005612:	bf00      	nop
 8005614:	e7fd      	b.n	8005612 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800561c:	6850      	ldr	r0, [r2, #4]
 800561e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005620:	6892      	ldr	r2, [r2, #8]
 8005622:	4611      	mov	r1, r2
 8005624:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2b00      	cmp	r3, #0
 800562a:	f2c0 80ae 	blt.w	800578a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d004      	beq.n	8005644 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800563a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563c:	3304      	adds	r3, #4
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe f9d2 	bl	80039e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005644:	463b      	mov	r3, r7
 8005646:	4618      	mov	r0, r3
 8005648:	f7ff ff6a 	bl	8005520 <prvSampleTimeNow>
 800564c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b09      	cmp	r3, #9
 8005652:	f200 8097 	bhi.w	8005784 <prvProcessReceivedCommands+0x1a0>
 8005656:	a201      	add	r2, pc, #4	@ (adr r2, 800565c <prvProcessReceivedCommands+0x78>)
 8005658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800565c:	08005685 	.word	0x08005685
 8005660:	08005685 	.word	0x08005685
 8005664:	08005685 	.word	0x08005685
 8005668:	080056fb 	.word	0x080056fb
 800566c:	0800570f 	.word	0x0800570f
 8005670:	0800575b 	.word	0x0800575b
 8005674:	08005685 	.word	0x08005685
 8005678:	08005685 	.word	0x08005685
 800567c:	080056fb 	.word	0x080056fb
 8005680:	0800570f 	.word	0x0800570f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005686:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	b2da      	uxtb	r2, r3
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800569a:	699b      	ldr	r3, [r3, #24]
 800569c:	18d1      	adds	r1, r2, r3
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056a4:	f7ff ff5c 	bl	8005560 <prvInsertTimerInActiveList>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d06c      	beq.n	8005788 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80056b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d061      	beq.n	8005788 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80056c4:	68ba      	ldr	r2, [r7, #8]
 80056c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	441a      	add	r2, r3
 80056cc:	2300      	movs	r3, #0
 80056ce:	9300      	str	r3, [sp, #0]
 80056d0:	2300      	movs	r3, #0
 80056d2:	2100      	movs	r1, #0
 80056d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80056d6:	f7ff fe01 	bl	80052dc <xTimerGenericCommand>
 80056da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80056dc:	6a3b      	ldr	r3, [r7, #32]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d152      	bne.n	8005788 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	61bb      	str	r3, [r7, #24]
}
 80056f4:	bf00      	nop
 80056f6:	bf00      	nop
 80056f8:	e7fd      	b.n	80056f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005700:	f023 0301 	bic.w	r3, r3, #1
 8005704:	b2da      	uxtb	r2, r3
 8005706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005708:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800570c:	e03d      	b.n	800578a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800570e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005710:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005724:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	699b      	ldr	r3, [r3, #24]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10b      	bne.n	8005746 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	617b      	str	r3, [r7, #20]
}
 8005740:	bf00      	nop
 8005742:	bf00      	nop
 8005744:	e7fd      	b.n	8005742 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005748:	699a      	ldr	r2, [r3, #24]
 800574a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574c:	18d1      	adds	r1, r2, r3
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005754:	f7ff ff04 	bl	8005560 <prvInsertTimerInActiveList>
					break;
 8005758:	e017      	b.n	800578a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800575a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d103      	bne.n	8005770 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005768:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800576a:	f000 fbe5 	bl	8005f38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800576e:	e00c      	b.n	800578a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005772:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005776:	f023 0301 	bic.w	r3, r3, #1
 800577a:	b2da      	uxtb	r2, r3
 800577c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005782:	e002      	b.n	800578a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005784:	bf00      	nop
 8005786:	e000      	b.n	800578a <prvProcessReceivedCommands+0x1a6>
					break;
 8005788:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800578a:	4b08      	ldr	r3, [pc, #32]	@ (80057ac <prvProcessReceivedCommands+0x1c8>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1d39      	adds	r1, r7, #4
 8005790:	2200      	movs	r2, #0
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe fbfc 	bl	8003f90 <xQueueReceive>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	f47f af26 	bne.w	80055ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80057a0:	bf00      	nop
 80057a2:	bf00      	nop
 80057a4:	3730      	adds	r7, #48	@ 0x30
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20010e7c 	.word	0x20010e7c

080057b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80057b6:	e049      	b.n	800584c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c2:	4b2c      	ldr	r3, [pc, #176]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	3304      	adds	r3, #4
 80057d0:	4618      	mov	r0, r3
 80057d2:	f7fe f909 	bl	80039e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057e4:	f003 0304 	and.w	r3, r3, #4
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d02f      	beq.n	800584c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	699b      	ldr	r3, [r3, #24]
 80057f0:	693a      	ldr	r2, [r7, #16]
 80057f2:	4413      	add	r3, r2
 80057f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80057f6:	68ba      	ldr	r2, [r7, #8]
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d90e      	bls.n	800581c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	68ba      	ldr	r2, [r7, #8]
 8005802:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800580a:	4b1a      	ldr	r3, [pc, #104]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fe f8ae 	bl	8003976 <vListInsert>
 800581a:	e017      	b.n	800584c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800581c:	2300      	movs	r3, #0
 800581e:	9300      	str	r3, [sp, #0]
 8005820:	2300      	movs	r3, #0
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	2100      	movs	r1, #0
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f7ff fd58 	bl	80052dc <xTimerGenericCommand>
 800582c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	603b      	str	r3, [r7, #0]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800584c:	4b09      	ldr	r3, [pc, #36]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1b0      	bne.n	80057b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005856:	4b07      	ldr	r3, [pc, #28]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800585c:	4b06      	ldr	r3, [pc, #24]	@ (8005878 <prvSwitchTimerLists+0xc8>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <prvSwitchTimerLists+0xc4>)
 8005862:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005864:	4a04      	ldr	r2, [pc, #16]	@ (8005878 <prvSwitchTimerLists+0xc8>)
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	6013      	str	r3, [r2, #0]
}
 800586a:	bf00      	nop
 800586c:	3718      	adds	r7, #24
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20010e74 	.word	0x20010e74
 8005878:	20010e78 	.word	0x20010e78

0800587c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005882:	f000 f969 	bl	8005b58 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005886:	4b15      	ldr	r3, [pc, #84]	@ (80058dc <prvCheckForValidListAndQueue+0x60>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d120      	bne.n	80058d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800588e:	4814      	ldr	r0, [pc, #80]	@ (80058e0 <prvCheckForValidListAndQueue+0x64>)
 8005890:	f7fe f820 	bl	80038d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005894:	4813      	ldr	r0, [pc, #76]	@ (80058e4 <prvCheckForValidListAndQueue+0x68>)
 8005896:	f7fe f81d 	bl	80038d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800589a:	4b13      	ldr	r3, [pc, #76]	@ (80058e8 <prvCheckForValidListAndQueue+0x6c>)
 800589c:	4a10      	ldr	r2, [pc, #64]	@ (80058e0 <prvCheckForValidListAndQueue+0x64>)
 800589e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80058a0:	4b12      	ldr	r3, [pc, #72]	@ (80058ec <prvCheckForValidListAndQueue+0x70>)
 80058a2:	4a10      	ldr	r2, [pc, #64]	@ (80058e4 <prvCheckForValidListAndQueue+0x68>)
 80058a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80058a6:	2300      	movs	r3, #0
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	4b11      	ldr	r3, [pc, #68]	@ (80058f0 <prvCheckForValidListAndQueue+0x74>)
 80058ac:	4a11      	ldr	r2, [pc, #68]	@ (80058f4 <prvCheckForValidListAndQueue+0x78>)
 80058ae:	2110      	movs	r1, #16
 80058b0:	200a      	movs	r0, #10
 80058b2:	f7fe f92d 	bl	8003b10 <xQueueGenericCreateStatic>
 80058b6:	4603      	mov	r3, r0
 80058b8:	4a08      	ldr	r2, [pc, #32]	@ (80058dc <prvCheckForValidListAndQueue+0x60>)
 80058ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80058bc:	4b07      	ldr	r3, [pc, #28]	@ (80058dc <prvCheckForValidListAndQueue+0x60>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80058c4:	4b05      	ldr	r3, [pc, #20]	@ (80058dc <prvCheckForValidListAndQueue+0x60>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	490b      	ldr	r1, [pc, #44]	@ (80058f8 <prvCheckForValidListAndQueue+0x7c>)
 80058ca:	4618      	mov	r0, r3
 80058cc:	f7fe fd52 	bl	8004374 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80058d0:	f000 f974 	bl	8005bbc <vPortExitCritical>
}
 80058d4:	bf00      	nop
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20010e7c 	.word	0x20010e7c
 80058e0:	20010e4c 	.word	0x20010e4c
 80058e4:	20010e60 	.word	0x20010e60
 80058e8:	20010e74 	.word	0x20010e74
 80058ec:	20010e78 	.word	0x20010e78
 80058f0:	20010f28 	.word	0x20010f28
 80058f4:	20010e88 	.word	0x20010e88
 80058f8:	080075d4 	.word	0x080075d4

080058fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	3b04      	subs	r3, #4
 800590c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3b04      	subs	r3, #4
 800591a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	f023 0201 	bic.w	r2, r3, #1
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	3b04      	subs	r3, #4
 800592a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800592c:	4a0c      	ldr	r2, [pc, #48]	@ (8005960 <pxPortInitialiseStack+0x64>)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	3b14      	subs	r3, #20
 8005936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	3b04      	subs	r3, #4
 8005942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f06f 0202 	mvn.w	r2, #2
 800594a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3b20      	subs	r3, #32
 8005950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005952:	68fb      	ldr	r3, [r7, #12]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3714      	adds	r7, #20
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr
 8005960:	08005965 	.word	0x08005965

08005964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005964:	b480      	push	{r7}
 8005966:	b085      	sub	sp, #20
 8005968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800596a:	2300      	movs	r3, #0
 800596c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800596e:	4b13      	ldr	r3, [pc, #76]	@ (80059bc <prvTaskExitError+0x58>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005976:	d00b      	beq.n	8005990 <prvTaskExitError+0x2c>
	__asm volatile
 8005978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597c:	f383 8811 	msr	BASEPRI, r3
 8005980:	f3bf 8f6f 	isb	sy
 8005984:	f3bf 8f4f 	dsb	sy
 8005988:	60fb      	str	r3, [r7, #12]
}
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	e7fd      	b.n	800598c <prvTaskExitError+0x28>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60bb      	str	r3, [r7, #8]
}
 80059a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80059a4:	bf00      	nop
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d0fc      	beq.n	80059a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80059ac:	bf00      	nop
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	20000020 	.word	0x20000020

080059c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80059c0:	4b07      	ldr	r3, [pc, #28]	@ (80059e0 <pxCurrentTCBConst2>)
 80059c2:	6819      	ldr	r1, [r3, #0]
 80059c4:	6808      	ldr	r0, [r1, #0]
 80059c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ca:	f380 8809 	msr	PSP, r0
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f04f 0000 	mov.w	r0, #0
 80059d6:	f380 8811 	msr	BASEPRI, r0
 80059da:	4770      	bx	lr
 80059dc:	f3af 8000 	nop.w

080059e0 <pxCurrentTCBConst2>:
 80059e0:	2001094c 	.word	0x2001094c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80059e4:	bf00      	nop
 80059e6:	bf00      	nop

080059e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80059e8:	4808      	ldr	r0, [pc, #32]	@ (8005a0c <prvPortStartFirstTask+0x24>)
 80059ea:	6800      	ldr	r0, [r0, #0]
 80059ec:	6800      	ldr	r0, [r0, #0]
 80059ee:	f380 8808 	msr	MSP, r0
 80059f2:	f04f 0000 	mov.w	r0, #0
 80059f6:	f380 8814 	msr	CONTROL, r0
 80059fa:	b662      	cpsie	i
 80059fc:	b661      	cpsie	f
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	f3bf 8f6f 	isb	sy
 8005a06:	df00      	svc	0
 8005a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005a0a:	bf00      	nop
 8005a0c:	e000ed08 	.word	0xe000ed08

08005a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005a16:	4b47      	ldr	r3, [pc, #284]	@ (8005b34 <xPortStartScheduler+0x124>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a47      	ldr	r2, [pc, #284]	@ (8005b38 <xPortStartScheduler+0x128>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d10b      	bne.n	8005a38 <xPortStartScheduler+0x28>
	__asm volatile
 8005a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a24:	f383 8811 	msr	BASEPRI, r3
 8005a28:	f3bf 8f6f 	isb	sy
 8005a2c:	f3bf 8f4f 	dsb	sy
 8005a30:	613b      	str	r3, [r7, #16]
}
 8005a32:	bf00      	nop
 8005a34:	bf00      	nop
 8005a36:	e7fd      	b.n	8005a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005a38:	4b3e      	ldr	r3, [pc, #248]	@ (8005b34 <xPortStartScheduler+0x124>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005b3c <xPortStartScheduler+0x12c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d10b      	bne.n	8005a5a <xPortStartScheduler+0x4a>
	__asm volatile
 8005a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a46:	f383 8811 	msr	BASEPRI, r3
 8005a4a:	f3bf 8f6f 	isb	sy
 8005a4e:	f3bf 8f4f 	dsb	sy
 8005a52:	60fb      	str	r3, [r7, #12]
}
 8005a54:	bf00      	nop
 8005a56:	bf00      	nop
 8005a58:	e7fd      	b.n	8005a56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005a5a:	4b39      	ldr	r3, [pc, #228]	@ (8005b40 <xPortStartScheduler+0x130>)
 8005a5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	22ff      	movs	r2, #255	@ 0xff
 8005a6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	b2db      	uxtb	r3, r3
 8005a78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	4b31      	ldr	r3, [pc, #196]	@ (8005b44 <xPortStartScheduler+0x134>)
 8005a80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005a82:	4b31      	ldr	r3, [pc, #196]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a84:	2207      	movs	r2, #7
 8005a86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a88:	e009      	b.n	8005a9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3b01      	subs	r3, #1
 8005a90:	4a2d      	ldr	r2, [pc, #180]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005a92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a94:	78fb      	ldrb	r3, [r7, #3]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	005b      	lsls	r3, r3, #1
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a9e:	78fb      	ldrb	r3, [r7, #3]
 8005aa0:	b2db      	uxtb	r3, r3
 8005aa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa6:	2b80      	cmp	r3, #128	@ 0x80
 8005aa8:	d0ef      	beq.n	8005a8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005aaa:	4b27      	ldr	r3, [pc, #156]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f1c3 0307 	rsb	r3, r3, #7
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d00b      	beq.n	8005ace <xPortStartScheduler+0xbe>
	__asm volatile
 8005ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aba:	f383 8811 	msr	BASEPRI, r3
 8005abe:	f3bf 8f6f 	isb	sy
 8005ac2:	f3bf 8f4f 	dsb	sy
 8005ac6:	60bb      	str	r3, [r7, #8]
}
 8005ac8:	bf00      	nop
 8005aca:	bf00      	nop
 8005acc:	e7fd      	b.n	8005aca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005ace:	4b1e      	ldr	r3, [pc, #120]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	4a1c      	ldr	r2, [pc, #112]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ad6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005ae0:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <xPortStartScheduler+0x138>)
 8005ae2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	b2da      	uxtb	r2, r3
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005aec:	4b17      	ldr	r3, [pc, #92]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a16      	ldr	r2, [pc, #88]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005af2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005af6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005af8:	4b14      	ldr	r3, [pc, #80]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a13      	ldr	r2, [pc, #76]	@ (8005b4c <xPortStartScheduler+0x13c>)
 8005afe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005b02:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005b04:	f000 f8da 	bl	8005cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005b08:	4b11      	ldr	r3, [pc, #68]	@ (8005b50 <xPortStartScheduler+0x140>)
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005b0e:	f000 f8f9 	bl	8005d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005b12:	4b10      	ldr	r3, [pc, #64]	@ (8005b54 <xPortStartScheduler+0x144>)
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4a0f      	ldr	r2, [pc, #60]	@ (8005b54 <xPortStartScheduler+0x144>)
 8005b18:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005b1c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005b1e:	f7ff ff63 	bl	80059e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005b22:	f7ff f83f 	bl	8004ba4 <vTaskSwitchContext>
	prvTaskExitError();
 8005b26:	f7ff ff1d 	bl	8005964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	e000ed00 	.word	0xe000ed00
 8005b38:	410fc271 	.word	0x410fc271
 8005b3c:	410fc270 	.word	0x410fc270
 8005b40:	e000e400 	.word	0xe000e400
 8005b44:	20010f78 	.word	0x20010f78
 8005b48:	20010f7c 	.word	0x20010f7c
 8005b4c:	e000ed20 	.word	0xe000ed20
 8005b50:	20000020 	.word	0x20000020
 8005b54:	e000ef34 	.word	0xe000ef34

08005b58 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005b72:	4b10      	ldr	r3, [pc, #64]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	3301      	adds	r3, #1
 8005b78:	4a0e      	ldr	r2, [pc, #56]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b7a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005b7c:	4b0d      	ldr	r3, [pc, #52]	@ (8005bb4 <vPortEnterCritical+0x5c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d110      	bne.n	8005ba6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005b84:	4b0c      	ldr	r3, [pc, #48]	@ (8005bb8 <vPortEnterCritical+0x60>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <vPortEnterCritical+0x4e>
	__asm volatile
 8005b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b92:	f383 8811 	msr	BASEPRI, r3
 8005b96:	f3bf 8f6f 	isb	sy
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	603b      	str	r3, [r7, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	e7fd      	b.n	8005ba2 <vPortEnterCritical+0x4a>
	}
}
 8005ba6:	bf00      	nop
 8005ba8:	370c      	adds	r7, #12
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000020 	.word	0x20000020
 8005bb8:	e000ed04 	.word	0xe000ed04

08005bbc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005bc2:	4b12      	ldr	r3, [pc, #72]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10b      	bne.n	8005be2 <vPortExitCritical+0x26>
	__asm volatile
 8005bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bce:	f383 8811 	msr	BASEPRI, r3
 8005bd2:	f3bf 8f6f 	isb	sy
 8005bd6:	f3bf 8f4f 	dsb	sy
 8005bda:	607b      	str	r3, [r7, #4]
}
 8005bdc:	bf00      	nop
 8005bde:	bf00      	nop
 8005be0:	e7fd      	b.n	8005bde <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	@ (8005c0c <vPortExitCritical+0x50>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3b01      	subs	r3, #1
 8005be8:	4a08      	ldr	r2, [pc, #32]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005bec:	4b07      	ldr	r3, [pc, #28]	@ (8005c0c <vPortExitCritical+0x50>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d105      	bne.n	8005c00 <vPortExitCritical+0x44>
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
}
 8005bfe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000020 	.word	0x20000020

08005c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005c10:	f3ef 8009 	mrs	r0, PSP
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	4b15      	ldr	r3, [pc, #84]	@ (8005c70 <pxCurrentTCBConst>)
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	f01e 0f10 	tst.w	lr, #16
 8005c20:	bf08      	it	eq
 8005c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	6010      	str	r0, [r2, #0]
 8005c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005c34:	f380 8811 	msr	BASEPRI, r0
 8005c38:	f3bf 8f4f 	dsb	sy
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f7fe ffb0 	bl	8004ba4 <vTaskSwitchContext>
 8005c44:	f04f 0000 	mov.w	r0, #0
 8005c48:	f380 8811 	msr	BASEPRI, r0
 8005c4c:	bc09      	pop	{r0, r3}
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	6808      	ldr	r0, [r1, #0]
 8005c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c56:	f01e 0f10 	tst.w	lr, #16
 8005c5a:	bf08      	it	eq
 8005c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005c60:	f380 8809 	msr	PSP, r0
 8005c64:	f3bf 8f6f 	isb	sy
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	f3af 8000 	nop.w

08005c70 <pxCurrentTCBConst>:
 8005c70:	2001094c 	.word	0x2001094c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop

08005c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8005c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c82:	f383 8811 	msr	BASEPRI, r3
 8005c86:	f3bf 8f6f 	isb	sy
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	607b      	str	r3, [r7, #4]
}
 8005c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c92:	f7fe fecd 	bl	8004a30 <xTaskIncrementTick>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d003      	beq.n	8005ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c9c:	4b06      	ldr	r3, [pc, #24]	@ (8005cb8 <xPortSysTickHandler+0x40>)
 8005c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	f383 8811 	msr	BASEPRI, r3
}
 8005cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	e000ed04 	.word	0xe000ed04

08005cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8005cf4 <vPortSetupTimerInterrupt+0x38>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf8 <vPortSetupTimerInterrupt+0x3c>)
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8005cfc <vPortSetupTimerInterrupt+0x40>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	099b      	lsrs	r3, r3, #6
 8005cd8:	4a09      	ldr	r2, [pc, #36]	@ (8005d00 <vPortSetupTimerInterrupt+0x44>)
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005cde:	4b04      	ldr	r3, [pc, #16]	@ (8005cf0 <vPortSetupTimerInterrupt+0x34>)
 8005ce0:	2207      	movs	r2, #7
 8005ce2:	601a      	str	r2, [r3, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e010 	.word	0xe000e010
 8005cf4:	e000e018 	.word	0xe000e018
 8005cf8:	20000014 	.word	0x20000014
 8005cfc:	10624dd3 	.word	0x10624dd3
 8005d00:	e000e014 	.word	0xe000e014

08005d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005d14 <vPortEnableVFP+0x10>
 8005d08:	6801      	ldr	r1, [r0, #0]
 8005d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005d0e:	6001      	str	r1, [r0, #0]
 8005d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005d12:	bf00      	nop
 8005d14:	e000ed88 	.word	0xe000ed88

08005d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005d1e:	f3ef 8305 	mrs	r3, IPSR
 8005d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b0f      	cmp	r3, #15
 8005d28:	d915      	bls.n	8005d56 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005d2a:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <vPortValidateInterruptPriority+0x74>)
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	4413      	add	r3, r2
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005d34:	4b16      	ldr	r3, [pc, #88]	@ (8005d90 <vPortValidateInterruptPriority+0x78>)
 8005d36:	781b      	ldrb	r3, [r3, #0]
 8005d38:	7afa      	ldrb	r2, [r7, #11]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d20b      	bcs.n	8005d56 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	607b      	str	r3, [r7, #4]
}
 8005d50:	bf00      	nop
 8005d52:	bf00      	nop
 8005d54:	e7fd      	b.n	8005d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005d56:	4b0f      	ldr	r3, [pc, #60]	@ (8005d94 <vPortValidateInterruptPriority+0x7c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8005d98 <vPortValidateInterruptPriority+0x80>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d90b      	bls.n	8005d7e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d6a:	f383 8811 	msr	BASEPRI, r3
 8005d6e:	f3bf 8f6f 	isb	sy
 8005d72:	f3bf 8f4f 	dsb	sy
 8005d76:	603b      	str	r3, [r7, #0]
}
 8005d78:	bf00      	nop
 8005d7a:	bf00      	nop
 8005d7c:	e7fd      	b.n	8005d7a <vPortValidateInterruptPriority+0x62>
	}
 8005d7e:	bf00      	nop
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	e000e3f0 	.word	0xe000e3f0
 8005d90:	20010f78 	.word	0x20010f78
 8005d94:	e000ed0c 	.word	0xe000ed0c
 8005d98:	20010f7c 	.word	0x20010f7c

08005d9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	@ 0x28
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005da8:	f7fe fd86 	bl	80048b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005dac:	4b5c      	ldr	r3, [pc, #368]	@ (8005f20 <pvPortMalloc+0x184>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d101      	bne.n	8005db8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005db4:	f000 f924 	bl	8006000 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005db8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f24 <pvPortMalloc+0x188>)
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4013      	ands	r3, r2
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	f040 8095 	bne.w	8005ef0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d01e      	beq.n	8005e0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005dcc:	2208      	movs	r2, #8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	4413      	add	r3, r2
 8005dd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	f003 0307 	and.w	r3, r3, #7
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d015      	beq.n	8005e0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f023 0307 	bic.w	r3, r3, #7
 8005de4:	3308      	adds	r3, #8
 8005de6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d00b      	beq.n	8005e0a <pvPortMalloc+0x6e>
	__asm volatile
 8005df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df6:	f383 8811 	msr	BASEPRI, r3
 8005dfa:	f3bf 8f6f 	isb	sy
 8005dfe:	f3bf 8f4f 	dsb	sy
 8005e02:	617b      	str	r3, [r7, #20]
}
 8005e04:	bf00      	nop
 8005e06:	bf00      	nop
 8005e08:	e7fd      	b.n	8005e06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d06f      	beq.n	8005ef0 <pvPortMalloc+0x154>
 8005e10:	4b45      	ldr	r3, [pc, #276]	@ (8005f28 <pvPortMalloc+0x18c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d86a      	bhi.n	8005ef0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e1a:	4b44      	ldr	r3, [pc, #272]	@ (8005f2c <pvPortMalloc+0x190>)
 8005e1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005e1e:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <pvPortMalloc+0x190>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e24:	e004      	b.n	8005e30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005e26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	429a      	cmp	r2, r3
 8005e38:	d903      	bls.n	8005e42 <pvPortMalloc+0xa6>
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f1      	bne.n	8005e26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005e42:	4b37      	ldr	r3, [pc, #220]	@ (8005f20 <pvPortMalloc+0x184>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d051      	beq.n	8005ef0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005e4c:	6a3b      	ldr	r3, [r7, #32]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2208      	movs	r2, #8
 8005e52:	4413      	add	r3, r2
 8005e54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	685a      	ldr	r2, [r3, #4]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	1ad2      	subs	r2, r2, r3
 8005e66:	2308      	movs	r3, #8
 8005e68:	005b      	lsls	r3, r3, #1
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d920      	bls.n	8005eb0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4413      	add	r3, r2
 8005e74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e76:	69bb      	ldr	r3, [r7, #24]
 8005e78:	f003 0307 	and.w	r3, r3, #7
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00b      	beq.n	8005e98 <pvPortMalloc+0xfc>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	613b      	str	r3, [r7, #16]
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9a:	685a      	ldr	r2, [r3, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	1ad2      	subs	r2, r2, r3
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005eaa:	69b8      	ldr	r0, [r7, #24]
 8005eac:	f000 f90a 	bl	80060c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f28 <pvPortMalloc+0x18c>)
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	4a1b      	ldr	r2, [pc, #108]	@ (8005f28 <pvPortMalloc+0x18c>)
 8005ebc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005ebe:	4b1a      	ldr	r3, [pc, #104]	@ (8005f28 <pvPortMalloc+0x18c>)
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f30 <pvPortMalloc+0x194>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d203      	bcs.n	8005ed2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005eca:	4b17      	ldr	r3, [pc, #92]	@ (8005f28 <pvPortMalloc+0x18c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a18      	ldr	r2, [pc, #96]	@ (8005f30 <pvPortMalloc+0x194>)
 8005ed0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	4b13      	ldr	r3, [pc, #76]	@ (8005f24 <pvPortMalloc+0x188>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ede:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ee6:	4b13      	ldr	r3, [pc, #76]	@ (8005f34 <pvPortMalloc+0x198>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	4a11      	ldr	r2, [pc, #68]	@ (8005f34 <pvPortMalloc+0x198>)
 8005eee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005ef0:	f7fe fcf0 	bl	80048d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	f003 0307 	and.w	r3, r3, #7
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00b      	beq.n	8005f16 <pvPortMalloc+0x17a>
	__asm volatile
 8005efe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f02:	f383 8811 	msr	BASEPRI, r3
 8005f06:	f3bf 8f6f 	isb	sy
 8005f0a:	f3bf 8f4f 	dsb	sy
 8005f0e:	60fb      	str	r3, [r7, #12]
}
 8005f10:	bf00      	nop
 8005f12:	bf00      	nop
 8005f14:	e7fd      	b.n	8005f12 <pvPortMalloc+0x176>
	return pvReturn;
 8005f16:	69fb      	ldr	r3, [r7, #28]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3728      	adds	r7, #40	@ 0x28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20014b88 	.word	0x20014b88
 8005f24:	20014b9c 	.word	0x20014b9c
 8005f28:	20014b8c 	.word	0x20014b8c
 8005f2c:	20014b80 	.word	0x20014b80
 8005f30:	20014b90 	.word	0x20014b90
 8005f34:	20014b94 	.word	0x20014b94

08005f38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d04f      	beq.n	8005fea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005f4a:	2308      	movs	r3, #8
 8005f4c:	425b      	negs	r3, r3
 8005f4e:	697a      	ldr	r2, [r7, #20]
 8005f50:	4413      	add	r3, r2
 8005f52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	685a      	ldr	r2, [r3, #4]
 8005f5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ff4 <vPortFree+0xbc>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4013      	ands	r3, r2
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d10b      	bne.n	8005f7e <vPortFree+0x46>
	__asm volatile
 8005f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6a:	f383 8811 	msr	BASEPRI, r3
 8005f6e:	f3bf 8f6f 	isb	sy
 8005f72:	f3bf 8f4f 	dsb	sy
 8005f76:	60fb      	str	r3, [r7, #12]
}
 8005f78:	bf00      	nop
 8005f7a:	bf00      	nop
 8005f7c:	e7fd      	b.n	8005f7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <vPortFree+0x66>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	60bb      	str	r3, [r7, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	bf00      	nop
 8005f9c:	e7fd      	b.n	8005f9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	4b14      	ldr	r3, [pc, #80]	@ (8005ff4 <vPortFree+0xbc>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d01e      	beq.n	8005fea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11a      	bne.n	8005fea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8005ff4 <vPortFree+0xbc>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	43db      	mvns	r3, r3
 8005fbe:	401a      	ands	r2, r3
 8005fc0:	693b      	ldr	r3, [r7, #16]
 8005fc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005fc4:	f7fe fc78 	bl	80048b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	685a      	ldr	r2, [r3, #4]
 8005fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff8 <vPortFree+0xc0>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4413      	add	r3, r2
 8005fd2:	4a09      	ldr	r2, [pc, #36]	@ (8005ff8 <vPortFree+0xc0>)
 8005fd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005fd6:	6938      	ldr	r0, [r7, #16]
 8005fd8:	f000 f874 	bl	80060c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005fdc:	4b07      	ldr	r3, [pc, #28]	@ (8005ffc <vPortFree+0xc4>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	4a06      	ldr	r2, [pc, #24]	@ (8005ffc <vPortFree+0xc4>)
 8005fe4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005fe6:	f7fe fc75 	bl	80048d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005fea:	bf00      	nop
 8005fec:	3718      	adds	r7, #24
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}
 8005ff2:	bf00      	nop
 8005ff4:	20014b9c 	.word	0x20014b9c
 8005ff8:	20014b8c 	.word	0x20014b8c
 8005ffc:	20014b98 	.word	0x20014b98

08006000 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006006:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800600a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800600c:	4b27      	ldr	r3, [pc, #156]	@ (80060ac <prvHeapInit+0xac>)
 800600e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f003 0307 	and.w	r3, r3, #7
 8006016:	2b00      	cmp	r3, #0
 8006018:	d00c      	beq.n	8006034 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3307      	adds	r3, #7
 800601e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f023 0307 	bic.w	r3, r3, #7
 8006026:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	4a1f      	ldr	r2, [pc, #124]	@ (80060ac <prvHeapInit+0xac>)
 8006030:	4413      	add	r3, r2
 8006032:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006038:	4a1d      	ldr	r2, [pc, #116]	@ (80060b0 <prvHeapInit+0xb0>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800603e:	4b1c      	ldr	r3, [pc, #112]	@ (80060b0 <prvHeapInit+0xb0>)
 8006040:	2200      	movs	r2, #0
 8006042:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	4413      	add	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800604c:	2208      	movs	r2, #8
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	1a9b      	subs	r3, r3, r2
 8006052:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0307 	bic.w	r3, r3, #7
 800605a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4a15      	ldr	r2, [pc, #84]	@ (80060b4 <prvHeapInit+0xb4>)
 8006060:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006062:	4b14      	ldr	r3, [pc, #80]	@ (80060b4 <prvHeapInit+0xb4>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800606a:	4b12      	ldr	r3, [pc, #72]	@ (80060b4 <prvHeapInit+0xb4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	68fa      	ldr	r2, [r7, #12]
 800607a:	1ad2      	subs	r2, r2, r3
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006080:	4b0c      	ldr	r3, [pc, #48]	@ (80060b4 <prvHeapInit+0xb4>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	4a0a      	ldr	r2, [pc, #40]	@ (80060b8 <prvHeapInit+0xb8>)
 800608e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	4a09      	ldr	r2, [pc, #36]	@ (80060bc <prvHeapInit+0xbc>)
 8006096:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006098:	4b09      	ldr	r3, [pc, #36]	@ (80060c0 <prvHeapInit+0xc0>)
 800609a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800609e:	601a      	str	r2, [r3, #0]
}
 80060a0:	bf00      	nop
 80060a2:	3714      	adds	r7, #20
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr
 80060ac:	20010f80 	.word	0x20010f80
 80060b0:	20014b80 	.word	0x20014b80
 80060b4:	20014b88 	.word	0x20014b88
 80060b8:	20014b90 	.word	0x20014b90
 80060bc:	20014b8c 	.word	0x20014b8c
 80060c0:	20014b9c 	.word	0x20014b9c

080060c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80060cc:	4b28      	ldr	r3, [pc, #160]	@ (8006170 <prvInsertBlockIntoFreeList+0xac>)
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	e002      	b.n	80060d8 <prvInsertBlockIntoFreeList+0x14>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d8f7      	bhi.n	80060d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	4413      	add	r3, r2
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d108      	bne.n	8006106 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	441a      	add	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	441a      	add	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d118      	bne.n	800614c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681a      	ldr	r2, [r3, #0]
 800611e:	4b15      	ldr	r3, [pc, #84]	@ (8006174 <prvInsertBlockIntoFreeList+0xb0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	429a      	cmp	r2, r3
 8006124:	d00d      	beq.n	8006142 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685a      	ldr	r2, [r3, #4]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	441a      	add	r2, r3
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	e008      	b.n	8006154 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006142:	4b0c      	ldr	r3, [pc, #48]	@ (8006174 <prvInsertBlockIntoFreeList+0xb0>)
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	e003      	b.n	8006154 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	429a      	cmp	r2, r3
 800615a:	d002      	beq.n	8006162 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006162:	bf00      	nop
 8006164:	3714      	adds	r7, #20
 8006166:	46bd      	mov	sp, r7
 8006168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616c:	4770      	bx	lr
 800616e:	bf00      	nop
 8006170:	20014b80 	.word	0x20014b80
 8006174:	20014b88 	.word	0x20014b88

08006178 <siscanf>:
 8006178:	b40e      	push	{r1, r2, r3}
 800617a:	b530      	push	{r4, r5, lr}
 800617c:	b09c      	sub	sp, #112	@ 0x70
 800617e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8006180:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006184:	f854 5b04 	ldr.w	r5, [r4], #4
 8006188:	f8ad 2014 	strh.w	r2, [sp, #20]
 800618c:	9002      	str	r0, [sp, #8]
 800618e:	9006      	str	r0, [sp, #24]
 8006190:	f7fa f826 	bl	80001e0 <strlen>
 8006194:	4b0b      	ldr	r3, [pc, #44]	@ (80061c4 <siscanf+0x4c>)
 8006196:	9003      	str	r0, [sp, #12]
 8006198:	9007      	str	r0, [sp, #28]
 800619a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800619c:	480a      	ldr	r0, [pc, #40]	@ (80061c8 <siscanf+0x50>)
 800619e:	9401      	str	r4, [sp, #4]
 80061a0:	2300      	movs	r3, #0
 80061a2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061a4:	9314      	str	r3, [sp, #80]	@ 0x50
 80061a6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80061aa:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061ae:	462a      	mov	r2, r5
 80061b0:	4623      	mov	r3, r4
 80061b2:	a902      	add	r1, sp, #8
 80061b4:	6800      	ldr	r0, [r0, #0]
 80061b6:	f000 fb39 	bl	800682c <__ssvfiscanf_r>
 80061ba:	b01c      	add	sp, #112	@ 0x70
 80061bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061c0:	b003      	add	sp, #12
 80061c2:	4770      	bx	lr
 80061c4:	080061cd 	.word	0x080061cd
 80061c8:	20000024 	.word	0x20000024

080061cc <__seofread>:
 80061cc:	2000      	movs	r0, #0
 80061ce:	4770      	bx	lr

080061d0 <_vsiprintf_r>:
 80061d0:	b500      	push	{lr}
 80061d2:	b09b      	sub	sp, #108	@ 0x6c
 80061d4:	9100      	str	r1, [sp, #0]
 80061d6:	9104      	str	r1, [sp, #16]
 80061d8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80061dc:	9105      	str	r1, [sp, #20]
 80061de:	9102      	str	r1, [sp, #8]
 80061e0:	4905      	ldr	r1, [pc, #20]	@ (80061f8 <_vsiprintf_r+0x28>)
 80061e2:	9103      	str	r1, [sp, #12]
 80061e4:	4669      	mov	r1, sp
 80061e6:	f000 f9cd 	bl	8006584 <_svfiprintf_r>
 80061ea:	9b00      	ldr	r3, [sp, #0]
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
 80061f0:	b01b      	add	sp, #108	@ 0x6c
 80061f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80061f6:	bf00      	nop
 80061f8:	ffff0208 	.word	0xffff0208

080061fc <vsiprintf>:
 80061fc:	4613      	mov	r3, r2
 80061fe:	460a      	mov	r2, r1
 8006200:	4601      	mov	r1, r0
 8006202:	4802      	ldr	r0, [pc, #8]	@ (800620c <vsiprintf+0x10>)
 8006204:	6800      	ldr	r0, [r0, #0]
 8006206:	f7ff bfe3 	b.w	80061d0 <_vsiprintf_r>
 800620a:	bf00      	nop
 800620c:	20000024 	.word	0x20000024

08006210 <memset>:
 8006210:	4402      	add	r2, r0
 8006212:	4603      	mov	r3, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <strchr>:
 8006220:	b2c9      	uxtb	r1, r1
 8006222:	4603      	mov	r3, r0
 8006224:	4618      	mov	r0, r3
 8006226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800622a:	b112      	cbz	r2, 8006232 <strchr+0x12>
 800622c:	428a      	cmp	r2, r1
 800622e:	d1f9      	bne.n	8006224 <strchr+0x4>
 8006230:	4770      	bx	lr
 8006232:	2900      	cmp	r1, #0
 8006234:	bf18      	it	ne
 8006236:	2000      	movne	r0, #0
 8006238:	4770      	bx	lr

0800623a <strstr>:
 800623a:	780a      	ldrb	r2, [r1, #0]
 800623c:	b570      	push	{r4, r5, r6, lr}
 800623e:	b96a      	cbnz	r2, 800625c <strstr+0x22>
 8006240:	bd70      	pop	{r4, r5, r6, pc}
 8006242:	429a      	cmp	r2, r3
 8006244:	d109      	bne.n	800625a <strstr+0x20>
 8006246:	460c      	mov	r4, r1
 8006248:	4605      	mov	r5, r0
 800624a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800624e:	2b00      	cmp	r3, #0
 8006250:	d0f6      	beq.n	8006240 <strstr+0x6>
 8006252:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8006256:	429e      	cmp	r6, r3
 8006258:	d0f7      	beq.n	800624a <strstr+0x10>
 800625a:	3001      	adds	r0, #1
 800625c:	7803      	ldrb	r3, [r0, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1ef      	bne.n	8006242 <strstr+0x8>
 8006262:	4618      	mov	r0, r3
 8006264:	e7ec      	b.n	8006240 <strstr+0x6>
	...

08006268 <__errno>:
 8006268:	4b01      	ldr	r3, [pc, #4]	@ (8006270 <__errno+0x8>)
 800626a:	6818      	ldr	r0, [r3, #0]
 800626c:	4770      	bx	lr
 800626e:	bf00      	nop
 8006270:	20000024 	.word	0x20000024

08006274 <__libc_init_array>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	4d0d      	ldr	r5, [pc, #52]	@ (80062ac <__libc_init_array+0x38>)
 8006278:	4c0d      	ldr	r4, [pc, #52]	@ (80062b0 <__libc_init_array+0x3c>)
 800627a:	1b64      	subs	r4, r4, r5
 800627c:	10a4      	asrs	r4, r4, #2
 800627e:	2600      	movs	r6, #0
 8006280:	42a6      	cmp	r6, r4
 8006282:	d109      	bne.n	8006298 <__libc_init_array+0x24>
 8006284:	4d0b      	ldr	r5, [pc, #44]	@ (80062b4 <__libc_init_array+0x40>)
 8006286:	4c0c      	ldr	r4, [pc, #48]	@ (80062b8 <__libc_init_array+0x44>)
 8006288:	f001 f8e0 	bl	800744c <_init>
 800628c:	1b64      	subs	r4, r4, r5
 800628e:	10a4      	asrs	r4, r4, #2
 8006290:	2600      	movs	r6, #0
 8006292:	42a6      	cmp	r6, r4
 8006294:	d105      	bne.n	80062a2 <__libc_init_array+0x2e>
 8006296:	bd70      	pop	{r4, r5, r6, pc}
 8006298:	f855 3b04 	ldr.w	r3, [r5], #4
 800629c:	4798      	blx	r3
 800629e:	3601      	adds	r6, #1
 80062a0:	e7ee      	b.n	8006280 <__libc_init_array+0xc>
 80062a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062a6:	4798      	blx	r3
 80062a8:	3601      	adds	r6, #1
 80062aa:	e7f2      	b.n	8006292 <__libc_init_array+0x1e>
 80062ac:	080077cc 	.word	0x080077cc
 80062b0:	080077cc 	.word	0x080077cc
 80062b4:	080077cc 	.word	0x080077cc
 80062b8:	080077d0 	.word	0x080077d0

080062bc <__retarget_lock_acquire_recursive>:
 80062bc:	4770      	bx	lr

080062be <__retarget_lock_release_recursive>:
 80062be:	4770      	bx	lr

080062c0 <memcpy>:
 80062c0:	440a      	add	r2, r1
 80062c2:	4291      	cmp	r1, r2
 80062c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c8:	d100      	bne.n	80062cc <memcpy+0xc>
 80062ca:	4770      	bx	lr
 80062cc:	b510      	push	{r4, lr}
 80062ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062d6:	4291      	cmp	r1, r2
 80062d8:	d1f9      	bne.n	80062ce <memcpy+0xe>
 80062da:	bd10      	pop	{r4, pc}

080062dc <_free_r>:
 80062dc:	b538      	push	{r3, r4, r5, lr}
 80062de:	4605      	mov	r5, r0
 80062e0:	2900      	cmp	r1, #0
 80062e2:	d041      	beq.n	8006368 <_free_r+0x8c>
 80062e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062e8:	1f0c      	subs	r4, r1, #4
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	bfb8      	it	lt
 80062ee:	18e4      	addlt	r4, r4, r3
 80062f0:	f000 f8e0 	bl	80064b4 <__malloc_lock>
 80062f4:	4a1d      	ldr	r2, [pc, #116]	@ (800636c <_free_r+0x90>)
 80062f6:	6813      	ldr	r3, [r2, #0]
 80062f8:	b933      	cbnz	r3, 8006308 <_free_r+0x2c>
 80062fa:	6063      	str	r3, [r4, #4]
 80062fc:	6014      	str	r4, [r2, #0]
 80062fe:	4628      	mov	r0, r5
 8006300:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006304:	f000 b8dc 	b.w	80064c0 <__malloc_unlock>
 8006308:	42a3      	cmp	r3, r4
 800630a:	d908      	bls.n	800631e <_free_r+0x42>
 800630c:	6820      	ldr	r0, [r4, #0]
 800630e:	1821      	adds	r1, r4, r0
 8006310:	428b      	cmp	r3, r1
 8006312:	bf01      	itttt	eq
 8006314:	6819      	ldreq	r1, [r3, #0]
 8006316:	685b      	ldreq	r3, [r3, #4]
 8006318:	1809      	addeq	r1, r1, r0
 800631a:	6021      	streq	r1, [r4, #0]
 800631c:	e7ed      	b.n	80062fa <_free_r+0x1e>
 800631e:	461a      	mov	r2, r3
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	b10b      	cbz	r3, 8006328 <_free_r+0x4c>
 8006324:	42a3      	cmp	r3, r4
 8006326:	d9fa      	bls.n	800631e <_free_r+0x42>
 8006328:	6811      	ldr	r1, [r2, #0]
 800632a:	1850      	adds	r0, r2, r1
 800632c:	42a0      	cmp	r0, r4
 800632e:	d10b      	bne.n	8006348 <_free_r+0x6c>
 8006330:	6820      	ldr	r0, [r4, #0]
 8006332:	4401      	add	r1, r0
 8006334:	1850      	adds	r0, r2, r1
 8006336:	4283      	cmp	r3, r0
 8006338:	6011      	str	r1, [r2, #0]
 800633a:	d1e0      	bne.n	80062fe <_free_r+0x22>
 800633c:	6818      	ldr	r0, [r3, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	6053      	str	r3, [r2, #4]
 8006342:	4408      	add	r0, r1
 8006344:	6010      	str	r0, [r2, #0]
 8006346:	e7da      	b.n	80062fe <_free_r+0x22>
 8006348:	d902      	bls.n	8006350 <_free_r+0x74>
 800634a:	230c      	movs	r3, #12
 800634c:	602b      	str	r3, [r5, #0]
 800634e:	e7d6      	b.n	80062fe <_free_r+0x22>
 8006350:	6820      	ldr	r0, [r4, #0]
 8006352:	1821      	adds	r1, r4, r0
 8006354:	428b      	cmp	r3, r1
 8006356:	bf04      	itt	eq
 8006358:	6819      	ldreq	r1, [r3, #0]
 800635a:	685b      	ldreq	r3, [r3, #4]
 800635c:	6063      	str	r3, [r4, #4]
 800635e:	bf04      	itt	eq
 8006360:	1809      	addeq	r1, r1, r0
 8006362:	6021      	streq	r1, [r4, #0]
 8006364:	6054      	str	r4, [r2, #4]
 8006366:	e7ca      	b.n	80062fe <_free_r+0x22>
 8006368:	bd38      	pop	{r3, r4, r5, pc}
 800636a:	bf00      	nop
 800636c:	20014ce4 	.word	0x20014ce4

08006370 <sbrk_aligned>:
 8006370:	b570      	push	{r4, r5, r6, lr}
 8006372:	4e0f      	ldr	r6, [pc, #60]	@ (80063b0 <sbrk_aligned+0x40>)
 8006374:	460c      	mov	r4, r1
 8006376:	6831      	ldr	r1, [r6, #0]
 8006378:	4605      	mov	r5, r0
 800637a:	b911      	cbnz	r1, 8006382 <sbrk_aligned+0x12>
 800637c:	f000 ff34 	bl	80071e8 <_sbrk_r>
 8006380:	6030      	str	r0, [r6, #0]
 8006382:	4621      	mov	r1, r4
 8006384:	4628      	mov	r0, r5
 8006386:	f000 ff2f 	bl	80071e8 <_sbrk_r>
 800638a:	1c43      	adds	r3, r0, #1
 800638c:	d103      	bne.n	8006396 <sbrk_aligned+0x26>
 800638e:	f04f 34ff 	mov.w	r4, #4294967295
 8006392:	4620      	mov	r0, r4
 8006394:	bd70      	pop	{r4, r5, r6, pc}
 8006396:	1cc4      	adds	r4, r0, #3
 8006398:	f024 0403 	bic.w	r4, r4, #3
 800639c:	42a0      	cmp	r0, r4
 800639e:	d0f8      	beq.n	8006392 <sbrk_aligned+0x22>
 80063a0:	1a21      	subs	r1, r4, r0
 80063a2:	4628      	mov	r0, r5
 80063a4:	f000 ff20 	bl	80071e8 <_sbrk_r>
 80063a8:	3001      	adds	r0, #1
 80063aa:	d1f2      	bne.n	8006392 <sbrk_aligned+0x22>
 80063ac:	e7ef      	b.n	800638e <sbrk_aligned+0x1e>
 80063ae:	bf00      	nop
 80063b0:	20014ce0 	.word	0x20014ce0

080063b4 <_malloc_r>:
 80063b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063b8:	1ccd      	adds	r5, r1, #3
 80063ba:	f025 0503 	bic.w	r5, r5, #3
 80063be:	3508      	adds	r5, #8
 80063c0:	2d0c      	cmp	r5, #12
 80063c2:	bf38      	it	cc
 80063c4:	250c      	movcc	r5, #12
 80063c6:	2d00      	cmp	r5, #0
 80063c8:	4606      	mov	r6, r0
 80063ca:	db01      	blt.n	80063d0 <_malloc_r+0x1c>
 80063cc:	42a9      	cmp	r1, r5
 80063ce:	d904      	bls.n	80063da <_malloc_r+0x26>
 80063d0:	230c      	movs	r3, #12
 80063d2:	6033      	str	r3, [r6, #0]
 80063d4:	2000      	movs	r0, #0
 80063d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064b0 <_malloc_r+0xfc>
 80063de:	f000 f869 	bl	80064b4 <__malloc_lock>
 80063e2:	f8d8 3000 	ldr.w	r3, [r8]
 80063e6:	461c      	mov	r4, r3
 80063e8:	bb44      	cbnz	r4, 800643c <_malloc_r+0x88>
 80063ea:	4629      	mov	r1, r5
 80063ec:	4630      	mov	r0, r6
 80063ee:	f7ff ffbf 	bl	8006370 <sbrk_aligned>
 80063f2:	1c43      	adds	r3, r0, #1
 80063f4:	4604      	mov	r4, r0
 80063f6:	d158      	bne.n	80064aa <_malloc_r+0xf6>
 80063f8:	f8d8 4000 	ldr.w	r4, [r8]
 80063fc:	4627      	mov	r7, r4
 80063fe:	2f00      	cmp	r7, #0
 8006400:	d143      	bne.n	800648a <_malloc_r+0xd6>
 8006402:	2c00      	cmp	r4, #0
 8006404:	d04b      	beq.n	800649e <_malloc_r+0xea>
 8006406:	6823      	ldr	r3, [r4, #0]
 8006408:	4639      	mov	r1, r7
 800640a:	4630      	mov	r0, r6
 800640c:	eb04 0903 	add.w	r9, r4, r3
 8006410:	f000 feea 	bl	80071e8 <_sbrk_r>
 8006414:	4581      	cmp	r9, r0
 8006416:	d142      	bne.n	800649e <_malloc_r+0xea>
 8006418:	6821      	ldr	r1, [r4, #0]
 800641a:	1a6d      	subs	r5, r5, r1
 800641c:	4629      	mov	r1, r5
 800641e:	4630      	mov	r0, r6
 8006420:	f7ff ffa6 	bl	8006370 <sbrk_aligned>
 8006424:	3001      	adds	r0, #1
 8006426:	d03a      	beq.n	800649e <_malloc_r+0xea>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	442b      	add	r3, r5
 800642c:	6023      	str	r3, [r4, #0]
 800642e:	f8d8 3000 	ldr.w	r3, [r8]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	bb62      	cbnz	r2, 8006490 <_malloc_r+0xdc>
 8006436:	f8c8 7000 	str.w	r7, [r8]
 800643a:	e00f      	b.n	800645c <_malloc_r+0xa8>
 800643c:	6822      	ldr	r2, [r4, #0]
 800643e:	1b52      	subs	r2, r2, r5
 8006440:	d420      	bmi.n	8006484 <_malloc_r+0xd0>
 8006442:	2a0b      	cmp	r2, #11
 8006444:	d917      	bls.n	8006476 <_malloc_r+0xc2>
 8006446:	1961      	adds	r1, r4, r5
 8006448:	42a3      	cmp	r3, r4
 800644a:	6025      	str	r5, [r4, #0]
 800644c:	bf18      	it	ne
 800644e:	6059      	strne	r1, [r3, #4]
 8006450:	6863      	ldr	r3, [r4, #4]
 8006452:	bf08      	it	eq
 8006454:	f8c8 1000 	streq.w	r1, [r8]
 8006458:	5162      	str	r2, [r4, r5]
 800645a:	604b      	str	r3, [r1, #4]
 800645c:	4630      	mov	r0, r6
 800645e:	f000 f82f 	bl	80064c0 <__malloc_unlock>
 8006462:	f104 000b 	add.w	r0, r4, #11
 8006466:	1d23      	adds	r3, r4, #4
 8006468:	f020 0007 	bic.w	r0, r0, #7
 800646c:	1ac2      	subs	r2, r0, r3
 800646e:	bf1c      	itt	ne
 8006470:	1a1b      	subne	r3, r3, r0
 8006472:	50a3      	strne	r3, [r4, r2]
 8006474:	e7af      	b.n	80063d6 <_malloc_r+0x22>
 8006476:	6862      	ldr	r2, [r4, #4]
 8006478:	42a3      	cmp	r3, r4
 800647a:	bf0c      	ite	eq
 800647c:	f8c8 2000 	streq.w	r2, [r8]
 8006480:	605a      	strne	r2, [r3, #4]
 8006482:	e7eb      	b.n	800645c <_malloc_r+0xa8>
 8006484:	4623      	mov	r3, r4
 8006486:	6864      	ldr	r4, [r4, #4]
 8006488:	e7ae      	b.n	80063e8 <_malloc_r+0x34>
 800648a:	463c      	mov	r4, r7
 800648c:	687f      	ldr	r7, [r7, #4]
 800648e:	e7b6      	b.n	80063fe <_malloc_r+0x4a>
 8006490:	461a      	mov	r2, r3
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	42a3      	cmp	r3, r4
 8006496:	d1fb      	bne.n	8006490 <_malloc_r+0xdc>
 8006498:	2300      	movs	r3, #0
 800649a:	6053      	str	r3, [r2, #4]
 800649c:	e7de      	b.n	800645c <_malloc_r+0xa8>
 800649e:	230c      	movs	r3, #12
 80064a0:	6033      	str	r3, [r6, #0]
 80064a2:	4630      	mov	r0, r6
 80064a4:	f000 f80c 	bl	80064c0 <__malloc_unlock>
 80064a8:	e794      	b.n	80063d4 <_malloc_r+0x20>
 80064aa:	6005      	str	r5, [r0, #0]
 80064ac:	e7d6      	b.n	800645c <_malloc_r+0xa8>
 80064ae:	bf00      	nop
 80064b0:	20014ce4 	.word	0x20014ce4

080064b4 <__malloc_lock>:
 80064b4:	4801      	ldr	r0, [pc, #4]	@ (80064bc <__malloc_lock+0x8>)
 80064b6:	f7ff bf01 	b.w	80062bc <__retarget_lock_acquire_recursive>
 80064ba:	bf00      	nop
 80064bc:	20014cdc 	.word	0x20014cdc

080064c0 <__malloc_unlock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	@ (80064c8 <__malloc_unlock+0x8>)
 80064c2:	f7ff befc 	b.w	80062be <__retarget_lock_release_recursive>
 80064c6:	bf00      	nop
 80064c8:	20014cdc 	.word	0x20014cdc

080064cc <__ssputs_r>:
 80064cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064d0:	688e      	ldr	r6, [r1, #8]
 80064d2:	461f      	mov	r7, r3
 80064d4:	42be      	cmp	r6, r7
 80064d6:	680b      	ldr	r3, [r1, #0]
 80064d8:	4682      	mov	sl, r0
 80064da:	460c      	mov	r4, r1
 80064dc:	4690      	mov	r8, r2
 80064de:	d82d      	bhi.n	800653c <__ssputs_r+0x70>
 80064e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80064e8:	d026      	beq.n	8006538 <__ssputs_r+0x6c>
 80064ea:	6965      	ldr	r5, [r4, #20]
 80064ec:	6909      	ldr	r1, [r1, #16]
 80064ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064f2:	eba3 0901 	sub.w	r9, r3, r1
 80064f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064fa:	1c7b      	adds	r3, r7, #1
 80064fc:	444b      	add	r3, r9
 80064fe:	106d      	asrs	r5, r5, #1
 8006500:	429d      	cmp	r5, r3
 8006502:	bf38      	it	cc
 8006504:	461d      	movcc	r5, r3
 8006506:	0553      	lsls	r3, r2, #21
 8006508:	d527      	bpl.n	800655a <__ssputs_r+0x8e>
 800650a:	4629      	mov	r1, r5
 800650c:	f7ff ff52 	bl	80063b4 <_malloc_r>
 8006510:	4606      	mov	r6, r0
 8006512:	b360      	cbz	r0, 800656e <__ssputs_r+0xa2>
 8006514:	6921      	ldr	r1, [r4, #16]
 8006516:	464a      	mov	r2, r9
 8006518:	f7ff fed2 	bl	80062c0 <memcpy>
 800651c:	89a3      	ldrh	r3, [r4, #12]
 800651e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006522:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006526:	81a3      	strh	r3, [r4, #12]
 8006528:	6126      	str	r6, [r4, #16]
 800652a:	6165      	str	r5, [r4, #20]
 800652c:	444e      	add	r6, r9
 800652e:	eba5 0509 	sub.w	r5, r5, r9
 8006532:	6026      	str	r6, [r4, #0]
 8006534:	60a5      	str	r5, [r4, #8]
 8006536:	463e      	mov	r6, r7
 8006538:	42be      	cmp	r6, r7
 800653a:	d900      	bls.n	800653e <__ssputs_r+0x72>
 800653c:	463e      	mov	r6, r7
 800653e:	6820      	ldr	r0, [r4, #0]
 8006540:	4632      	mov	r2, r6
 8006542:	4641      	mov	r1, r8
 8006544:	f000 fe35 	bl	80071b2 <memmove>
 8006548:	68a3      	ldr	r3, [r4, #8]
 800654a:	1b9b      	subs	r3, r3, r6
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	4433      	add	r3, r6
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	2000      	movs	r0, #0
 8006556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800655a:	462a      	mov	r2, r5
 800655c:	f000 fe54 	bl	8007208 <_realloc_r>
 8006560:	4606      	mov	r6, r0
 8006562:	2800      	cmp	r0, #0
 8006564:	d1e0      	bne.n	8006528 <__ssputs_r+0x5c>
 8006566:	6921      	ldr	r1, [r4, #16]
 8006568:	4650      	mov	r0, sl
 800656a:	f7ff feb7 	bl	80062dc <_free_r>
 800656e:	230c      	movs	r3, #12
 8006570:	f8ca 3000 	str.w	r3, [sl]
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800657a:	81a3      	strh	r3, [r4, #12]
 800657c:	f04f 30ff 	mov.w	r0, #4294967295
 8006580:	e7e9      	b.n	8006556 <__ssputs_r+0x8a>
	...

08006584 <_svfiprintf_r>:
 8006584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006588:	4698      	mov	r8, r3
 800658a:	898b      	ldrh	r3, [r1, #12]
 800658c:	061b      	lsls	r3, r3, #24
 800658e:	b09d      	sub	sp, #116	@ 0x74
 8006590:	4607      	mov	r7, r0
 8006592:	460d      	mov	r5, r1
 8006594:	4614      	mov	r4, r2
 8006596:	d510      	bpl.n	80065ba <_svfiprintf_r+0x36>
 8006598:	690b      	ldr	r3, [r1, #16]
 800659a:	b973      	cbnz	r3, 80065ba <_svfiprintf_r+0x36>
 800659c:	2140      	movs	r1, #64	@ 0x40
 800659e:	f7ff ff09 	bl	80063b4 <_malloc_r>
 80065a2:	6028      	str	r0, [r5, #0]
 80065a4:	6128      	str	r0, [r5, #16]
 80065a6:	b930      	cbnz	r0, 80065b6 <_svfiprintf_r+0x32>
 80065a8:	230c      	movs	r3, #12
 80065aa:	603b      	str	r3, [r7, #0]
 80065ac:	f04f 30ff 	mov.w	r0, #4294967295
 80065b0:	b01d      	add	sp, #116	@ 0x74
 80065b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b6:	2340      	movs	r3, #64	@ 0x40
 80065b8:	616b      	str	r3, [r5, #20]
 80065ba:	2300      	movs	r3, #0
 80065bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80065be:	2320      	movs	r3, #32
 80065c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80065c8:	2330      	movs	r3, #48	@ 0x30
 80065ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006768 <_svfiprintf_r+0x1e4>
 80065ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065d2:	f04f 0901 	mov.w	r9, #1
 80065d6:	4623      	mov	r3, r4
 80065d8:	469a      	mov	sl, r3
 80065da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065de:	b10a      	cbz	r2, 80065e4 <_svfiprintf_r+0x60>
 80065e0:	2a25      	cmp	r2, #37	@ 0x25
 80065e2:	d1f9      	bne.n	80065d8 <_svfiprintf_r+0x54>
 80065e4:	ebba 0b04 	subs.w	fp, sl, r4
 80065e8:	d00b      	beq.n	8006602 <_svfiprintf_r+0x7e>
 80065ea:	465b      	mov	r3, fp
 80065ec:	4622      	mov	r2, r4
 80065ee:	4629      	mov	r1, r5
 80065f0:	4638      	mov	r0, r7
 80065f2:	f7ff ff6b 	bl	80064cc <__ssputs_r>
 80065f6:	3001      	adds	r0, #1
 80065f8:	f000 80a7 	beq.w	800674a <_svfiprintf_r+0x1c6>
 80065fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80065fe:	445a      	add	r2, fp
 8006600:	9209      	str	r2, [sp, #36]	@ 0x24
 8006602:	f89a 3000 	ldrb.w	r3, [sl]
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 809f 	beq.w	800674a <_svfiprintf_r+0x1c6>
 800660c:	2300      	movs	r3, #0
 800660e:	f04f 32ff 	mov.w	r2, #4294967295
 8006612:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006616:	f10a 0a01 	add.w	sl, sl, #1
 800661a:	9304      	str	r3, [sp, #16]
 800661c:	9307      	str	r3, [sp, #28]
 800661e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006622:	931a      	str	r3, [sp, #104]	@ 0x68
 8006624:	4654      	mov	r4, sl
 8006626:	2205      	movs	r2, #5
 8006628:	f814 1b01 	ldrb.w	r1, [r4], #1
 800662c:	484e      	ldr	r0, [pc, #312]	@ (8006768 <_svfiprintf_r+0x1e4>)
 800662e:	f7f9 fddf 	bl	80001f0 <memchr>
 8006632:	9a04      	ldr	r2, [sp, #16]
 8006634:	b9d8      	cbnz	r0, 800666e <_svfiprintf_r+0xea>
 8006636:	06d0      	lsls	r0, r2, #27
 8006638:	bf44      	itt	mi
 800663a:	2320      	movmi	r3, #32
 800663c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006640:	0711      	lsls	r1, r2, #28
 8006642:	bf44      	itt	mi
 8006644:	232b      	movmi	r3, #43	@ 0x2b
 8006646:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800664a:	f89a 3000 	ldrb.w	r3, [sl]
 800664e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006650:	d015      	beq.n	800667e <_svfiprintf_r+0xfa>
 8006652:	9a07      	ldr	r2, [sp, #28]
 8006654:	4654      	mov	r4, sl
 8006656:	2000      	movs	r0, #0
 8006658:	f04f 0c0a 	mov.w	ip, #10
 800665c:	4621      	mov	r1, r4
 800665e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006662:	3b30      	subs	r3, #48	@ 0x30
 8006664:	2b09      	cmp	r3, #9
 8006666:	d94b      	bls.n	8006700 <_svfiprintf_r+0x17c>
 8006668:	b1b0      	cbz	r0, 8006698 <_svfiprintf_r+0x114>
 800666a:	9207      	str	r2, [sp, #28]
 800666c:	e014      	b.n	8006698 <_svfiprintf_r+0x114>
 800666e:	eba0 0308 	sub.w	r3, r0, r8
 8006672:	fa09 f303 	lsl.w	r3, r9, r3
 8006676:	4313      	orrs	r3, r2
 8006678:	9304      	str	r3, [sp, #16]
 800667a:	46a2      	mov	sl, r4
 800667c:	e7d2      	b.n	8006624 <_svfiprintf_r+0xa0>
 800667e:	9b03      	ldr	r3, [sp, #12]
 8006680:	1d19      	adds	r1, r3, #4
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	9103      	str	r1, [sp, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	bfbb      	ittet	lt
 800668a:	425b      	neglt	r3, r3
 800668c:	f042 0202 	orrlt.w	r2, r2, #2
 8006690:	9307      	strge	r3, [sp, #28]
 8006692:	9307      	strlt	r3, [sp, #28]
 8006694:	bfb8      	it	lt
 8006696:	9204      	strlt	r2, [sp, #16]
 8006698:	7823      	ldrb	r3, [r4, #0]
 800669a:	2b2e      	cmp	r3, #46	@ 0x2e
 800669c:	d10a      	bne.n	80066b4 <_svfiprintf_r+0x130>
 800669e:	7863      	ldrb	r3, [r4, #1]
 80066a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80066a2:	d132      	bne.n	800670a <_svfiprintf_r+0x186>
 80066a4:	9b03      	ldr	r3, [sp, #12]
 80066a6:	1d1a      	adds	r2, r3, #4
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	9203      	str	r2, [sp, #12]
 80066ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066b0:	3402      	adds	r4, #2
 80066b2:	9305      	str	r3, [sp, #20]
 80066b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006778 <_svfiprintf_r+0x1f4>
 80066b8:	7821      	ldrb	r1, [r4, #0]
 80066ba:	2203      	movs	r2, #3
 80066bc:	4650      	mov	r0, sl
 80066be:	f7f9 fd97 	bl	80001f0 <memchr>
 80066c2:	b138      	cbz	r0, 80066d4 <_svfiprintf_r+0x150>
 80066c4:	9b04      	ldr	r3, [sp, #16]
 80066c6:	eba0 000a 	sub.w	r0, r0, sl
 80066ca:	2240      	movs	r2, #64	@ 0x40
 80066cc:	4082      	lsls	r2, r0
 80066ce:	4313      	orrs	r3, r2
 80066d0:	3401      	adds	r4, #1
 80066d2:	9304      	str	r3, [sp, #16]
 80066d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066d8:	4824      	ldr	r0, [pc, #144]	@ (800676c <_svfiprintf_r+0x1e8>)
 80066da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066de:	2206      	movs	r2, #6
 80066e0:	f7f9 fd86 	bl	80001f0 <memchr>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	d036      	beq.n	8006756 <_svfiprintf_r+0x1d2>
 80066e8:	4b21      	ldr	r3, [pc, #132]	@ (8006770 <_svfiprintf_r+0x1ec>)
 80066ea:	bb1b      	cbnz	r3, 8006734 <_svfiprintf_r+0x1b0>
 80066ec:	9b03      	ldr	r3, [sp, #12]
 80066ee:	3307      	adds	r3, #7
 80066f0:	f023 0307 	bic.w	r3, r3, #7
 80066f4:	3308      	adds	r3, #8
 80066f6:	9303      	str	r3, [sp, #12]
 80066f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066fa:	4433      	add	r3, r6
 80066fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80066fe:	e76a      	b.n	80065d6 <_svfiprintf_r+0x52>
 8006700:	fb0c 3202 	mla	r2, ip, r2, r3
 8006704:	460c      	mov	r4, r1
 8006706:	2001      	movs	r0, #1
 8006708:	e7a8      	b.n	800665c <_svfiprintf_r+0xd8>
 800670a:	2300      	movs	r3, #0
 800670c:	3401      	adds	r4, #1
 800670e:	9305      	str	r3, [sp, #20]
 8006710:	4619      	mov	r1, r3
 8006712:	f04f 0c0a 	mov.w	ip, #10
 8006716:	4620      	mov	r0, r4
 8006718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800671c:	3a30      	subs	r2, #48	@ 0x30
 800671e:	2a09      	cmp	r2, #9
 8006720:	d903      	bls.n	800672a <_svfiprintf_r+0x1a6>
 8006722:	2b00      	cmp	r3, #0
 8006724:	d0c6      	beq.n	80066b4 <_svfiprintf_r+0x130>
 8006726:	9105      	str	r1, [sp, #20]
 8006728:	e7c4      	b.n	80066b4 <_svfiprintf_r+0x130>
 800672a:	fb0c 2101 	mla	r1, ip, r1, r2
 800672e:	4604      	mov	r4, r0
 8006730:	2301      	movs	r3, #1
 8006732:	e7f0      	b.n	8006716 <_svfiprintf_r+0x192>
 8006734:	ab03      	add	r3, sp, #12
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	462a      	mov	r2, r5
 800673a:	4b0e      	ldr	r3, [pc, #56]	@ (8006774 <_svfiprintf_r+0x1f0>)
 800673c:	a904      	add	r1, sp, #16
 800673e:	4638      	mov	r0, r7
 8006740:	f3af 8000 	nop.w
 8006744:	1c42      	adds	r2, r0, #1
 8006746:	4606      	mov	r6, r0
 8006748:	d1d6      	bne.n	80066f8 <_svfiprintf_r+0x174>
 800674a:	89ab      	ldrh	r3, [r5, #12]
 800674c:	065b      	lsls	r3, r3, #25
 800674e:	f53f af2d 	bmi.w	80065ac <_svfiprintf_r+0x28>
 8006752:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006754:	e72c      	b.n	80065b0 <_svfiprintf_r+0x2c>
 8006756:	ab03      	add	r3, sp, #12
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	462a      	mov	r2, r5
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <_svfiprintf_r+0x1f0>)
 800675e:	a904      	add	r1, sp, #16
 8006760:	4638      	mov	r0, r7
 8006762:	f000 fa45 	bl	8006bf0 <_printf_i>
 8006766:	e7ed      	b.n	8006744 <_svfiprintf_r+0x1c0>
 8006768:	08007674 	.word	0x08007674
 800676c:	0800767e 	.word	0x0800767e
 8006770:	00000000 	.word	0x00000000
 8006774:	080064cd 	.word	0x080064cd
 8006778:	0800767a 	.word	0x0800767a

0800677c <_sungetc_r>:
 800677c:	b538      	push	{r3, r4, r5, lr}
 800677e:	1c4b      	adds	r3, r1, #1
 8006780:	4614      	mov	r4, r2
 8006782:	d103      	bne.n	800678c <_sungetc_r+0x10>
 8006784:	f04f 35ff 	mov.w	r5, #4294967295
 8006788:	4628      	mov	r0, r5
 800678a:	bd38      	pop	{r3, r4, r5, pc}
 800678c:	8993      	ldrh	r3, [r2, #12]
 800678e:	f023 0320 	bic.w	r3, r3, #32
 8006792:	8193      	strh	r3, [r2, #12]
 8006794:	6853      	ldr	r3, [r2, #4]
 8006796:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006798:	b2cd      	uxtb	r5, r1
 800679a:	b18a      	cbz	r2, 80067c0 <_sungetc_r+0x44>
 800679c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800679e:	429a      	cmp	r2, r3
 80067a0:	dd08      	ble.n	80067b4 <_sungetc_r+0x38>
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	6022      	str	r2, [r4, #0]
 80067a8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80067ac:	6863      	ldr	r3, [r4, #4]
 80067ae:	3301      	adds	r3, #1
 80067b0:	6063      	str	r3, [r4, #4]
 80067b2:	e7e9      	b.n	8006788 <_sungetc_r+0xc>
 80067b4:	4621      	mov	r1, r4
 80067b6:	f000 fcc2 	bl	800713e <__submore>
 80067ba:	2800      	cmp	r0, #0
 80067bc:	d0f1      	beq.n	80067a2 <_sungetc_r+0x26>
 80067be:	e7e1      	b.n	8006784 <_sungetc_r+0x8>
 80067c0:	6921      	ldr	r1, [r4, #16]
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	b141      	cbz	r1, 80067d8 <_sungetc_r+0x5c>
 80067c6:	4291      	cmp	r1, r2
 80067c8:	d206      	bcs.n	80067d8 <_sungetc_r+0x5c>
 80067ca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80067ce:	42a9      	cmp	r1, r5
 80067d0:	d102      	bne.n	80067d8 <_sungetc_r+0x5c>
 80067d2:	3a01      	subs	r2, #1
 80067d4:	6022      	str	r2, [r4, #0]
 80067d6:	e7ea      	b.n	80067ae <_sungetc_r+0x32>
 80067d8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80067dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80067e2:	2303      	movs	r3, #3
 80067e4:	63a3      	str	r3, [r4, #56]	@ 0x38
 80067e6:	4623      	mov	r3, r4
 80067e8:	f803 5f46 	strb.w	r5, [r3, #70]!
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	2301      	movs	r3, #1
 80067f0:	e7de      	b.n	80067b0 <_sungetc_r+0x34>

080067f2 <__ssrefill_r>:
 80067f2:	b510      	push	{r4, lr}
 80067f4:	460c      	mov	r4, r1
 80067f6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80067f8:	b169      	cbz	r1, 8006816 <__ssrefill_r+0x24>
 80067fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067fe:	4299      	cmp	r1, r3
 8006800:	d001      	beq.n	8006806 <__ssrefill_r+0x14>
 8006802:	f7ff fd6b 	bl	80062dc <_free_r>
 8006806:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006808:	6063      	str	r3, [r4, #4]
 800680a:	2000      	movs	r0, #0
 800680c:	6360      	str	r0, [r4, #52]	@ 0x34
 800680e:	b113      	cbz	r3, 8006816 <__ssrefill_r+0x24>
 8006810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	bd10      	pop	{r4, pc}
 8006816:	6923      	ldr	r3, [r4, #16]
 8006818:	6023      	str	r3, [r4, #0]
 800681a:	2300      	movs	r3, #0
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	f043 0320 	orr.w	r3, r3, #32
 8006824:	81a3      	strh	r3, [r4, #12]
 8006826:	f04f 30ff 	mov.w	r0, #4294967295
 800682a:	e7f3      	b.n	8006814 <__ssrefill_r+0x22>

0800682c <__ssvfiscanf_r>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	460c      	mov	r4, r1
 8006832:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006836:	2100      	movs	r1, #0
 8006838:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800683c:	49a5      	ldr	r1, [pc, #660]	@ (8006ad4 <__ssvfiscanf_r+0x2a8>)
 800683e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006840:	f10d 0804 	add.w	r8, sp, #4
 8006844:	49a4      	ldr	r1, [pc, #656]	@ (8006ad8 <__ssvfiscanf_r+0x2ac>)
 8006846:	4fa5      	ldr	r7, [pc, #660]	@ (8006adc <__ssvfiscanf_r+0x2b0>)
 8006848:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800684c:	4606      	mov	r6, r0
 800684e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	7813      	ldrb	r3, [r2, #0]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 8158 	beq.w	8006b0a <__ssvfiscanf_r+0x2de>
 800685a:	5cf9      	ldrb	r1, [r7, r3]
 800685c:	f011 0108 	ands.w	r1, r1, #8
 8006860:	f102 0501 	add.w	r5, r2, #1
 8006864:	d019      	beq.n	800689a <__ssvfiscanf_r+0x6e>
 8006866:	6863      	ldr	r3, [r4, #4]
 8006868:	2b00      	cmp	r3, #0
 800686a:	dd0f      	ble.n	800688c <__ssvfiscanf_r+0x60>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	781a      	ldrb	r2, [r3, #0]
 8006870:	5cba      	ldrb	r2, [r7, r2]
 8006872:	0712      	lsls	r2, r2, #28
 8006874:	d401      	bmi.n	800687a <__ssvfiscanf_r+0x4e>
 8006876:	462a      	mov	r2, r5
 8006878:	e7eb      	b.n	8006852 <__ssvfiscanf_r+0x26>
 800687a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800687c:	3201      	adds	r2, #1
 800687e:	9245      	str	r2, [sp, #276]	@ 0x114
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	3301      	adds	r3, #1
 8006884:	3a01      	subs	r2, #1
 8006886:	6062      	str	r2, [r4, #4]
 8006888:	6023      	str	r3, [r4, #0]
 800688a:	e7ec      	b.n	8006866 <__ssvfiscanf_r+0x3a>
 800688c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800688e:	4621      	mov	r1, r4
 8006890:	4630      	mov	r0, r6
 8006892:	4798      	blx	r3
 8006894:	2800      	cmp	r0, #0
 8006896:	d0e9      	beq.n	800686c <__ssvfiscanf_r+0x40>
 8006898:	e7ed      	b.n	8006876 <__ssvfiscanf_r+0x4a>
 800689a:	2b25      	cmp	r3, #37	@ 0x25
 800689c:	d012      	beq.n	80068c4 <__ssvfiscanf_r+0x98>
 800689e:	4699      	mov	r9, r3
 80068a0:	6863      	ldr	r3, [r4, #4]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f340 8093 	ble.w	80069ce <__ssvfiscanf_r+0x1a2>
 80068a8:	6822      	ldr	r2, [r4, #0]
 80068aa:	7813      	ldrb	r3, [r2, #0]
 80068ac:	454b      	cmp	r3, r9
 80068ae:	f040 812c 	bne.w	8006b0a <__ssvfiscanf_r+0x2de>
 80068b2:	6863      	ldr	r3, [r4, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	6063      	str	r3, [r4, #4]
 80068b8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80068ba:	3201      	adds	r2, #1
 80068bc:	3301      	adds	r3, #1
 80068be:	6022      	str	r2, [r4, #0]
 80068c0:	9345      	str	r3, [sp, #276]	@ 0x114
 80068c2:	e7d8      	b.n	8006876 <__ssvfiscanf_r+0x4a>
 80068c4:	9141      	str	r1, [sp, #260]	@ 0x104
 80068c6:	9143      	str	r1, [sp, #268]	@ 0x10c
 80068c8:	7853      	ldrb	r3, [r2, #1]
 80068ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80068cc:	bf02      	ittt	eq
 80068ce:	2310      	moveq	r3, #16
 80068d0:	1c95      	addeq	r5, r2, #2
 80068d2:	9341      	streq	r3, [sp, #260]	@ 0x104
 80068d4:	220a      	movs	r2, #10
 80068d6:	46a9      	mov	r9, r5
 80068d8:	f819 1b01 	ldrb.w	r1, [r9], #1
 80068dc:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 80068e0:	2b09      	cmp	r3, #9
 80068e2:	d91e      	bls.n	8006922 <__ssvfiscanf_r+0xf6>
 80068e4:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8006ae0 <__ssvfiscanf_r+0x2b4>
 80068e8:	2203      	movs	r2, #3
 80068ea:	4650      	mov	r0, sl
 80068ec:	f7f9 fc80 	bl	80001f0 <memchr>
 80068f0:	b138      	cbz	r0, 8006902 <__ssvfiscanf_r+0xd6>
 80068f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80068f4:	eba0 000a 	sub.w	r0, r0, sl
 80068f8:	2301      	movs	r3, #1
 80068fa:	4083      	lsls	r3, r0
 80068fc:	4313      	orrs	r3, r2
 80068fe:	9341      	str	r3, [sp, #260]	@ 0x104
 8006900:	464d      	mov	r5, r9
 8006902:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006906:	2b78      	cmp	r3, #120	@ 0x78
 8006908:	d806      	bhi.n	8006918 <__ssvfiscanf_r+0xec>
 800690a:	2b57      	cmp	r3, #87	@ 0x57
 800690c:	d810      	bhi.n	8006930 <__ssvfiscanf_r+0x104>
 800690e:	2b25      	cmp	r3, #37	@ 0x25
 8006910:	d0c5      	beq.n	800689e <__ssvfiscanf_r+0x72>
 8006912:	d857      	bhi.n	80069c4 <__ssvfiscanf_r+0x198>
 8006914:	2b00      	cmp	r3, #0
 8006916:	d065      	beq.n	80069e4 <__ssvfiscanf_r+0x1b8>
 8006918:	2303      	movs	r3, #3
 800691a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800691c:	230a      	movs	r3, #10
 800691e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006920:	e078      	b.n	8006a14 <__ssvfiscanf_r+0x1e8>
 8006922:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006924:	fb02 1103 	mla	r1, r2, r3, r1
 8006928:	3930      	subs	r1, #48	@ 0x30
 800692a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800692c:	464d      	mov	r5, r9
 800692e:	e7d2      	b.n	80068d6 <__ssvfiscanf_r+0xaa>
 8006930:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006934:	2a20      	cmp	r2, #32
 8006936:	d8ef      	bhi.n	8006918 <__ssvfiscanf_r+0xec>
 8006938:	a101      	add	r1, pc, #4	@ (adr r1, 8006940 <__ssvfiscanf_r+0x114>)
 800693a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800693e:	bf00      	nop
 8006940:	080069f3 	.word	0x080069f3
 8006944:	08006919 	.word	0x08006919
 8006948:	08006919 	.word	0x08006919
 800694c:	08006a4d 	.word	0x08006a4d
 8006950:	08006919 	.word	0x08006919
 8006954:	08006919 	.word	0x08006919
 8006958:	08006919 	.word	0x08006919
 800695c:	08006919 	.word	0x08006919
 8006960:	08006919 	.word	0x08006919
 8006964:	08006919 	.word	0x08006919
 8006968:	08006919 	.word	0x08006919
 800696c:	08006a63 	.word	0x08006a63
 8006970:	08006a49 	.word	0x08006a49
 8006974:	080069cb 	.word	0x080069cb
 8006978:	080069cb 	.word	0x080069cb
 800697c:	080069cb 	.word	0x080069cb
 8006980:	08006919 	.word	0x08006919
 8006984:	08006a05 	.word	0x08006a05
 8006988:	08006919 	.word	0x08006919
 800698c:	08006919 	.word	0x08006919
 8006990:	08006919 	.word	0x08006919
 8006994:	08006919 	.word	0x08006919
 8006998:	08006a73 	.word	0x08006a73
 800699c:	08006a0d 	.word	0x08006a0d
 80069a0:	080069eb 	.word	0x080069eb
 80069a4:	08006919 	.word	0x08006919
 80069a8:	08006919 	.word	0x08006919
 80069ac:	08006a6f 	.word	0x08006a6f
 80069b0:	08006919 	.word	0x08006919
 80069b4:	08006a49 	.word	0x08006a49
 80069b8:	08006919 	.word	0x08006919
 80069bc:	08006919 	.word	0x08006919
 80069c0:	080069f3 	.word	0x080069f3
 80069c4:	3b45      	subs	r3, #69	@ 0x45
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d8a6      	bhi.n	8006918 <__ssvfiscanf_r+0xec>
 80069ca:	2305      	movs	r3, #5
 80069cc:	e021      	b.n	8006a12 <__ssvfiscanf_r+0x1e6>
 80069ce:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80069d0:	4621      	mov	r1, r4
 80069d2:	4630      	mov	r0, r6
 80069d4:	4798      	blx	r3
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f af66 	beq.w	80068a8 <__ssvfiscanf_r+0x7c>
 80069dc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 80069de:	2800      	cmp	r0, #0
 80069e0:	f040 808b 	bne.w	8006afa <__ssvfiscanf_r+0x2ce>
 80069e4:	f04f 30ff 	mov.w	r0, #4294967295
 80069e8:	e08b      	b.n	8006b02 <__ssvfiscanf_r+0x2d6>
 80069ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069ec:	f042 0220 	orr.w	r2, r2, #32
 80069f0:	9241      	str	r2, [sp, #260]	@ 0x104
 80069f2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 80069f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80069f8:	9241      	str	r2, [sp, #260]	@ 0x104
 80069fa:	2210      	movs	r2, #16
 80069fc:	2b6e      	cmp	r3, #110	@ 0x6e
 80069fe:	9242      	str	r2, [sp, #264]	@ 0x108
 8006a00:	d902      	bls.n	8006a08 <__ssvfiscanf_r+0x1dc>
 8006a02:	e005      	b.n	8006a10 <__ssvfiscanf_r+0x1e4>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9342      	str	r3, [sp, #264]	@ 0x108
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e002      	b.n	8006a12 <__ssvfiscanf_r+0x1e6>
 8006a0c:	2308      	movs	r3, #8
 8006a0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006a10:	2304      	movs	r3, #4
 8006a12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	dd39      	ble.n	8006a8e <__ssvfiscanf_r+0x262>
 8006a1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a1c:	0659      	lsls	r1, r3, #25
 8006a1e:	d404      	bmi.n	8006a2a <__ssvfiscanf_r+0x1fe>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	5cba      	ldrb	r2, [r7, r2]
 8006a26:	0712      	lsls	r2, r2, #28
 8006a28:	d438      	bmi.n	8006a9c <__ssvfiscanf_r+0x270>
 8006a2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006a2c:	2b02      	cmp	r3, #2
 8006a2e:	dc47      	bgt.n	8006ac0 <__ssvfiscanf_r+0x294>
 8006a30:	466b      	mov	r3, sp
 8006a32:	4622      	mov	r2, r4
 8006a34:	a941      	add	r1, sp, #260	@ 0x104
 8006a36:	4630      	mov	r0, r6
 8006a38:	f000 f9fa 	bl	8006e30 <_scanf_chars>
 8006a3c:	2801      	cmp	r0, #1
 8006a3e:	d064      	beq.n	8006b0a <__ssvfiscanf_r+0x2de>
 8006a40:	2802      	cmp	r0, #2
 8006a42:	f47f af18 	bne.w	8006876 <__ssvfiscanf_r+0x4a>
 8006a46:	e7c9      	b.n	80069dc <__ssvfiscanf_r+0x1b0>
 8006a48:	220a      	movs	r2, #10
 8006a4a:	e7d7      	b.n	80069fc <__ssvfiscanf_r+0x1d0>
 8006a4c:	4629      	mov	r1, r5
 8006a4e:	4640      	mov	r0, r8
 8006a50:	f000 fb3c 	bl	80070cc <__sccl>
 8006a54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a5a:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7d7      	b.n	8006a12 <__ssvfiscanf_r+0x1e6>
 8006a62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006a64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a68:	9341      	str	r3, [sp, #260]	@ 0x104
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	e7d1      	b.n	8006a12 <__ssvfiscanf_r+0x1e6>
 8006a6e:	2302      	movs	r3, #2
 8006a70:	e7cf      	b.n	8006a12 <__ssvfiscanf_r+0x1e6>
 8006a72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006a74:	06c3      	lsls	r3, r0, #27
 8006a76:	f53f aefe 	bmi.w	8006876 <__ssvfiscanf_r+0x4a>
 8006a7a:	9b00      	ldr	r3, [sp, #0]
 8006a7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a7e:	1d19      	adds	r1, r3, #4
 8006a80:	9100      	str	r1, [sp, #0]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	07c0      	lsls	r0, r0, #31
 8006a86:	bf4c      	ite	mi
 8006a88:	801a      	strhmi	r2, [r3, #0]
 8006a8a:	601a      	strpl	r2, [r3, #0]
 8006a8c:	e6f3      	b.n	8006876 <__ssvfiscanf_r+0x4a>
 8006a8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006a90:	4621      	mov	r1, r4
 8006a92:	4630      	mov	r0, r6
 8006a94:	4798      	blx	r3
 8006a96:	2800      	cmp	r0, #0
 8006a98:	d0bf      	beq.n	8006a1a <__ssvfiscanf_r+0x1ee>
 8006a9a:	e79f      	b.n	80069dc <__ssvfiscanf_r+0x1b0>
 8006a9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006a9e:	3201      	adds	r2, #1
 8006aa0:	9245      	str	r2, [sp, #276]	@ 0x114
 8006aa2:	6862      	ldr	r2, [r4, #4]
 8006aa4:	3a01      	subs	r2, #1
 8006aa6:	2a00      	cmp	r2, #0
 8006aa8:	6062      	str	r2, [r4, #4]
 8006aaa:	dd02      	ble.n	8006ab2 <__ssvfiscanf_r+0x286>
 8006aac:	3301      	adds	r3, #1
 8006aae:	6023      	str	r3, [r4, #0]
 8006ab0:	e7b6      	b.n	8006a20 <__ssvfiscanf_r+0x1f4>
 8006ab2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ab4:	4621      	mov	r1, r4
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	4798      	blx	r3
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0b0      	beq.n	8006a20 <__ssvfiscanf_r+0x1f4>
 8006abe:	e78d      	b.n	80069dc <__ssvfiscanf_r+0x1b0>
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	dc0f      	bgt.n	8006ae4 <__ssvfiscanf_r+0x2b8>
 8006ac4:	466b      	mov	r3, sp
 8006ac6:	4622      	mov	r2, r4
 8006ac8:	a941      	add	r1, sp, #260	@ 0x104
 8006aca:	4630      	mov	r0, r6
 8006acc:	f000 fa0a 	bl	8006ee4 <_scanf_i>
 8006ad0:	e7b4      	b.n	8006a3c <__ssvfiscanf_r+0x210>
 8006ad2:	bf00      	nop
 8006ad4:	0800677d 	.word	0x0800677d
 8006ad8:	080067f3 	.word	0x080067f3
 8006adc:	080076c3 	.word	0x080076c3
 8006ae0:	0800767a 	.word	0x0800767a
 8006ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b10 <__ssvfiscanf_r+0x2e4>)
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	f43f aec5 	beq.w	8006876 <__ssvfiscanf_r+0x4a>
 8006aec:	466b      	mov	r3, sp
 8006aee:	4622      	mov	r2, r4
 8006af0:	a941      	add	r1, sp, #260	@ 0x104
 8006af2:	4630      	mov	r0, r6
 8006af4:	f3af 8000 	nop.w
 8006af8:	e7a0      	b.n	8006a3c <__ssvfiscanf_r+0x210>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	065b      	lsls	r3, r3, #25
 8006afe:	f53f af71 	bmi.w	80069e4 <__ssvfiscanf_r+0x1b8>
 8006b02:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b0a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006b0c:	e7f9      	b.n	8006b02 <__ssvfiscanf_r+0x2d6>
 8006b0e:	bf00      	nop
 8006b10:	00000000 	.word	0x00000000

08006b14 <_printf_common>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	4616      	mov	r6, r2
 8006b1a:	4698      	mov	r8, r3
 8006b1c:	688a      	ldr	r2, [r1, #8]
 8006b1e:	690b      	ldr	r3, [r1, #16]
 8006b20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006b24:	4293      	cmp	r3, r2
 8006b26:	bfb8      	it	lt
 8006b28:	4613      	movlt	r3, r2
 8006b2a:	6033      	str	r3, [r6, #0]
 8006b2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b30:	4607      	mov	r7, r0
 8006b32:	460c      	mov	r4, r1
 8006b34:	b10a      	cbz	r2, 8006b3a <_printf_common+0x26>
 8006b36:	3301      	adds	r3, #1
 8006b38:	6033      	str	r3, [r6, #0]
 8006b3a:	6823      	ldr	r3, [r4, #0]
 8006b3c:	0699      	lsls	r1, r3, #26
 8006b3e:	bf42      	ittt	mi
 8006b40:	6833      	ldrmi	r3, [r6, #0]
 8006b42:	3302      	addmi	r3, #2
 8006b44:	6033      	strmi	r3, [r6, #0]
 8006b46:	6825      	ldr	r5, [r4, #0]
 8006b48:	f015 0506 	ands.w	r5, r5, #6
 8006b4c:	d106      	bne.n	8006b5c <_printf_common+0x48>
 8006b4e:	f104 0a19 	add.w	sl, r4, #25
 8006b52:	68e3      	ldr	r3, [r4, #12]
 8006b54:	6832      	ldr	r2, [r6, #0]
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	42ab      	cmp	r3, r5
 8006b5a:	dc26      	bgt.n	8006baa <_printf_common+0x96>
 8006b5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b60:	6822      	ldr	r2, [r4, #0]
 8006b62:	3b00      	subs	r3, #0
 8006b64:	bf18      	it	ne
 8006b66:	2301      	movne	r3, #1
 8006b68:	0692      	lsls	r2, r2, #26
 8006b6a:	d42b      	bmi.n	8006bc4 <_printf_common+0xb0>
 8006b6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b70:	4641      	mov	r1, r8
 8006b72:	4638      	mov	r0, r7
 8006b74:	47c8      	blx	r9
 8006b76:	3001      	adds	r0, #1
 8006b78:	d01e      	beq.n	8006bb8 <_printf_common+0xa4>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	6922      	ldr	r2, [r4, #16]
 8006b7e:	f003 0306 	and.w	r3, r3, #6
 8006b82:	2b04      	cmp	r3, #4
 8006b84:	bf02      	ittt	eq
 8006b86:	68e5      	ldreq	r5, [r4, #12]
 8006b88:	6833      	ldreq	r3, [r6, #0]
 8006b8a:	1aed      	subeq	r5, r5, r3
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	bf0c      	ite	eq
 8006b90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b94:	2500      	movne	r5, #0
 8006b96:	4293      	cmp	r3, r2
 8006b98:	bfc4      	itt	gt
 8006b9a:	1a9b      	subgt	r3, r3, r2
 8006b9c:	18ed      	addgt	r5, r5, r3
 8006b9e:	2600      	movs	r6, #0
 8006ba0:	341a      	adds	r4, #26
 8006ba2:	42b5      	cmp	r5, r6
 8006ba4:	d11a      	bne.n	8006bdc <_printf_common+0xc8>
 8006ba6:	2000      	movs	r0, #0
 8006ba8:	e008      	b.n	8006bbc <_printf_common+0xa8>
 8006baa:	2301      	movs	r3, #1
 8006bac:	4652      	mov	r2, sl
 8006bae:	4641      	mov	r1, r8
 8006bb0:	4638      	mov	r0, r7
 8006bb2:	47c8      	blx	r9
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d103      	bne.n	8006bc0 <_printf_common+0xac>
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bc0:	3501      	adds	r5, #1
 8006bc2:	e7c6      	b.n	8006b52 <_printf_common+0x3e>
 8006bc4:	18e1      	adds	r1, r4, r3
 8006bc6:	1c5a      	adds	r2, r3, #1
 8006bc8:	2030      	movs	r0, #48	@ 0x30
 8006bca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006bce:	4422      	add	r2, r4
 8006bd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bd8:	3302      	adds	r3, #2
 8006bda:	e7c7      	b.n	8006b6c <_printf_common+0x58>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	4622      	mov	r2, r4
 8006be0:	4641      	mov	r1, r8
 8006be2:	4638      	mov	r0, r7
 8006be4:	47c8      	blx	r9
 8006be6:	3001      	adds	r0, #1
 8006be8:	d0e6      	beq.n	8006bb8 <_printf_common+0xa4>
 8006bea:	3601      	adds	r6, #1
 8006bec:	e7d9      	b.n	8006ba2 <_printf_common+0x8e>
	...

08006bf0 <_printf_i>:
 8006bf0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bf4:	7e0f      	ldrb	r7, [r1, #24]
 8006bf6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bf8:	2f78      	cmp	r7, #120	@ 0x78
 8006bfa:	4691      	mov	r9, r2
 8006bfc:	4680      	mov	r8, r0
 8006bfe:	460c      	mov	r4, r1
 8006c00:	469a      	mov	sl, r3
 8006c02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c06:	d807      	bhi.n	8006c18 <_printf_i+0x28>
 8006c08:	2f62      	cmp	r7, #98	@ 0x62
 8006c0a:	d80a      	bhi.n	8006c22 <_printf_i+0x32>
 8006c0c:	2f00      	cmp	r7, #0
 8006c0e:	f000 80d2 	beq.w	8006db6 <_printf_i+0x1c6>
 8006c12:	2f58      	cmp	r7, #88	@ 0x58
 8006c14:	f000 80b9 	beq.w	8006d8a <_printf_i+0x19a>
 8006c18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006c20:	e03a      	b.n	8006c98 <_printf_i+0xa8>
 8006c22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006c26:	2b15      	cmp	r3, #21
 8006c28:	d8f6      	bhi.n	8006c18 <_printf_i+0x28>
 8006c2a:	a101      	add	r1, pc, #4	@ (adr r1, 8006c30 <_printf_i+0x40>)
 8006c2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c30:	08006c89 	.word	0x08006c89
 8006c34:	08006c9d 	.word	0x08006c9d
 8006c38:	08006c19 	.word	0x08006c19
 8006c3c:	08006c19 	.word	0x08006c19
 8006c40:	08006c19 	.word	0x08006c19
 8006c44:	08006c19 	.word	0x08006c19
 8006c48:	08006c9d 	.word	0x08006c9d
 8006c4c:	08006c19 	.word	0x08006c19
 8006c50:	08006c19 	.word	0x08006c19
 8006c54:	08006c19 	.word	0x08006c19
 8006c58:	08006c19 	.word	0x08006c19
 8006c5c:	08006d9d 	.word	0x08006d9d
 8006c60:	08006cc7 	.word	0x08006cc7
 8006c64:	08006d57 	.word	0x08006d57
 8006c68:	08006c19 	.word	0x08006c19
 8006c6c:	08006c19 	.word	0x08006c19
 8006c70:	08006dbf 	.word	0x08006dbf
 8006c74:	08006c19 	.word	0x08006c19
 8006c78:	08006cc7 	.word	0x08006cc7
 8006c7c:	08006c19 	.word	0x08006c19
 8006c80:	08006c19 	.word	0x08006c19
 8006c84:	08006d5f 	.word	0x08006d5f
 8006c88:	6833      	ldr	r3, [r6, #0]
 8006c8a:	1d1a      	adds	r2, r3, #4
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6032      	str	r2, [r6, #0]
 8006c90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e09d      	b.n	8006dd8 <_printf_i+0x1e8>
 8006c9c:	6833      	ldr	r3, [r6, #0]
 8006c9e:	6820      	ldr	r0, [r4, #0]
 8006ca0:	1d19      	adds	r1, r3, #4
 8006ca2:	6031      	str	r1, [r6, #0]
 8006ca4:	0606      	lsls	r6, r0, #24
 8006ca6:	d501      	bpl.n	8006cac <_printf_i+0xbc>
 8006ca8:	681d      	ldr	r5, [r3, #0]
 8006caa:	e003      	b.n	8006cb4 <_printf_i+0xc4>
 8006cac:	0645      	lsls	r5, r0, #25
 8006cae:	d5fb      	bpl.n	8006ca8 <_printf_i+0xb8>
 8006cb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006cb4:	2d00      	cmp	r5, #0
 8006cb6:	da03      	bge.n	8006cc0 <_printf_i+0xd0>
 8006cb8:	232d      	movs	r3, #45	@ 0x2d
 8006cba:	426d      	negs	r5, r5
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc0:	4859      	ldr	r0, [pc, #356]	@ (8006e28 <_printf_i+0x238>)
 8006cc2:	230a      	movs	r3, #10
 8006cc4:	e011      	b.n	8006cea <_printf_i+0xfa>
 8006cc6:	6821      	ldr	r1, [r4, #0]
 8006cc8:	6833      	ldr	r3, [r6, #0]
 8006cca:	0608      	lsls	r0, r1, #24
 8006ccc:	f853 5b04 	ldr.w	r5, [r3], #4
 8006cd0:	d402      	bmi.n	8006cd8 <_printf_i+0xe8>
 8006cd2:	0649      	lsls	r1, r1, #25
 8006cd4:	bf48      	it	mi
 8006cd6:	b2ad      	uxthmi	r5, r5
 8006cd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cda:	4853      	ldr	r0, [pc, #332]	@ (8006e28 <_printf_i+0x238>)
 8006cdc:	6033      	str	r3, [r6, #0]
 8006cde:	bf14      	ite	ne
 8006ce0:	230a      	movne	r3, #10
 8006ce2:	2308      	moveq	r3, #8
 8006ce4:	2100      	movs	r1, #0
 8006ce6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cea:	6866      	ldr	r6, [r4, #4]
 8006cec:	60a6      	str	r6, [r4, #8]
 8006cee:	2e00      	cmp	r6, #0
 8006cf0:	bfa2      	ittt	ge
 8006cf2:	6821      	ldrge	r1, [r4, #0]
 8006cf4:	f021 0104 	bicge.w	r1, r1, #4
 8006cf8:	6021      	strge	r1, [r4, #0]
 8006cfa:	b90d      	cbnz	r5, 8006d00 <_printf_i+0x110>
 8006cfc:	2e00      	cmp	r6, #0
 8006cfe:	d04b      	beq.n	8006d98 <_printf_i+0x1a8>
 8006d00:	4616      	mov	r6, r2
 8006d02:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d06:	fb03 5711 	mls	r7, r3, r1, r5
 8006d0a:	5dc7      	ldrb	r7, [r0, r7]
 8006d0c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d10:	462f      	mov	r7, r5
 8006d12:	42bb      	cmp	r3, r7
 8006d14:	460d      	mov	r5, r1
 8006d16:	d9f4      	bls.n	8006d02 <_printf_i+0x112>
 8006d18:	2b08      	cmp	r3, #8
 8006d1a:	d10b      	bne.n	8006d34 <_printf_i+0x144>
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	07df      	lsls	r7, r3, #31
 8006d20:	d508      	bpl.n	8006d34 <_printf_i+0x144>
 8006d22:	6923      	ldr	r3, [r4, #16]
 8006d24:	6861      	ldr	r1, [r4, #4]
 8006d26:	4299      	cmp	r1, r3
 8006d28:	bfde      	ittt	le
 8006d2a:	2330      	movle	r3, #48	@ 0x30
 8006d2c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d30:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d34:	1b92      	subs	r2, r2, r6
 8006d36:	6122      	str	r2, [r4, #16]
 8006d38:	f8cd a000 	str.w	sl, [sp]
 8006d3c:	464b      	mov	r3, r9
 8006d3e:	aa03      	add	r2, sp, #12
 8006d40:	4621      	mov	r1, r4
 8006d42:	4640      	mov	r0, r8
 8006d44:	f7ff fee6 	bl	8006b14 <_printf_common>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d14a      	bne.n	8006de2 <_printf_i+0x1f2>
 8006d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d50:	b004      	add	sp, #16
 8006d52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	f043 0320 	orr.w	r3, r3, #32
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	4833      	ldr	r0, [pc, #204]	@ (8006e2c <_printf_i+0x23c>)
 8006d60:	2778      	movs	r7, #120	@ 0x78
 8006d62:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	6831      	ldr	r1, [r6, #0]
 8006d6a:	061f      	lsls	r7, r3, #24
 8006d6c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d70:	d402      	bmi.n	8006d78 <_printf_i+0x188>
 8006d72:	065f      	lsls	r7, r3, #25
 8006d74:	bf48      	it	mi
 8006d76:	b2ad      	uxthmi	r5, r5
 8006d78:	6031      	str	r1, [r6, #0]
 8006d7a:	07d9      	lsls	r1, r3, #31
 8006d7c:	bf44      	itt	mi
 8006d7e:	f043 0320 	orrmi.w	r3, r3, #32
 8006d82:	6023      	strmi	r3, [r4, #0]
 8006d84:	b11d      	cbz	r5, 8006d8e <_printf_i+0x19e>
 8006d86:	2310      	movs	r3, #16
 8006d88:	e7ac      	b.n	8006ce4 <_printf_i+0xf4>
 8006d8a:	4827      	ldr	r0, [pc, #156]	@ (8006e28 <_printf_i+0x238>)
 8006d8c:	e7e9      	b.n	8006d62 <_printf_i+0x172>
 8006d8e:	6823      	ldr	r3, [r4, #0]
 8006d90:	f023 0320 	bic.w	r3, r3, #32
 8006d94:	6023      	str	r3, [r4, #0]
 8006d96:	e7f6      	b.n	8006d86 <_printf_i+0x196>
 8006d98:	4616      	mov	r6, r2
 8006d9a:	e7bd      	b.n	8006d18 <_printf_i+0x128>
 8006d9c:	6833      	ldr	r3, [r6, #0]
 8006d9e:	6825      	ldr	r5, [r4, #0]
 8006da0:	6961      	ldr	r1, [r4, #20]
 8006da2:	1d18      	adds	r0, r3, #4
 8006da4:	6030      	str	r0, [r6, #0]
 8006da6:	062e      	lsls	r6, r5, #24
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	d501      	bpl.n	8006db0 <_printf_i+0x1c0>
 8006dac:	6019      	str	r1, [r3, #0]
 8006dae:	e002      	b.n	8006db6 <_printf_i+0x1c6>
 8006db0:	0668      	lsls	r0, r5, #25
 8006db2:	d5fb      	bpl.n	8006dac <_printf_i+0x1bc>
 8006db4:	8019      	strh	r1, [r3, #0]
 8006db6:	2300      	movs	r3, #0
 8006db8:	6123      	str	r3, [r4, #16]
 8006dba:	4616      	mov	r6, r2
 8006dbc:	e7bc      	b.n	8006d38 <_printf_i+0x148>
 8006dbe:	6833      	ldr	r3, [r6, #0]
 8006dc0:	1d1a      	adds	r2, r3, #4
 8006dc2:	6032      	str	r2, [r6, #0]
 8006dc4:	681e      	ldr	r6, [r3, #0]
 8006dc6:	6862      	ldr	r2, [r4, #4]
 8006dc8:	2100      	movs	r1, #0
 8006dca:	4630      	mov	r0, r6
 8006dcc:	f7f9 fa10 	bl	80001f0 <memchr>
 8006dd0:	b108      	cbz	r0, 8006dd6 <_printf_i+0x1e6>
 8006dd2:	1b80      	subs	r0, r0, r6
 8006dd4:	6060      	str	r0, [r4, #4]
 8006dd6:	6863      	ldr	r3, [r4, #4]
 8006dd8:	6123      	str	r3, [r4, #16]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006de0:	e7aa      	b.n	8006d38 <_printf_i+0x148>
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	4632      	mov	r2, r6
 8006de6:	4649      	mov	r1, r9
 8006de8:	4640      	mov	r0, r8
 8006dea:	47d0      	blx	sl
 8006dec:	3001      	adds	r0, #1
 8006dee:	d0ad      	beq.n	8006d4c <_printf_i+0x15c>
 8006df0:	6823      	ldr	r3, [r4, #0]
 8006df2:	079b      	lsls	r3, r3, #30
 8006df4:	d413      	bmi.n	8006e1e <_printf_i+0x22e>
 8006df6:	68e0      	ldr	r0, [r4, #12]
 8006df8:	9b03      	ldr	r3, [sp, #12]
 8006dfa:	4298      	cmp	r0, r3
 8006dfc:	bfb8      	it	lt
 8006dfe:	4618      	movlt	r0, r3
 8006e00:	e7a6      	b.n	8006d50 <_printf_i+0x160>
 8006e02:	2301      	movs	r3, #1
 8006e04:	4632      	mov	r2, r6
 8006e06:	4649      	mov	r1, r9
 8006e08:	4640      	mov	r0, r8
 8006e0a:	47d0      	blx	sl
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d09d      	beq.n	8006d4c <_printf_i+0x15c>
 8006e10:	3501      	adds	r5, #1
 8006e12:	68e3      	ldr	r3, [r4, #12]
 8006e14:	9903      	ldr	r1, [sp, #12]
 8006e16:	1a5b      	subs	r3, r3, r1
 8006e18:	42ab      	cmp	r3, r5
 8006e1a:	dcf2      	bgt.n	8006e02 <_printf_i+0x212>
 8006e1c:	e7eb      	b.n	8006df6 <_printf_i+0x206>
 8006e1e:	2500      	movs	r5, #0
 8006e20:	f104 0619 	add.w	r6, r4, #25
 8006e24:	e7f5      	b.n	8006e12 <_printf_i+0x222>
 8006e26:	bf00      	nop
 8006e28:	08007685 	.word	0x08007685
 8006e2c:	08007696 	.word	0x08007696

08006e30 <_scanf_chars>:
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	4615      	mov	r5, r2
 8006e36:	688a      	ldr	r2, [r1, #8]
 8006e38:	4680      	mov	r8, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	b932      	cbnz	r2, 8006e4c <_scanf_chars+0x1c>
 8006e3e:	698a      	ldr	r2, [r1, #24]
 8006e40:	2a00      	cmp	r2, #0
 8006e42:	bf14      	ite	ne
 8006e44:	f04f 32ff 	movne.w	r2, #4294967295
 8006e48:	2201      	moveq	r2, #1
 8006e4a:	608a      	str	r2, [r1, #8]
 8006e4c:	6822      	ldr	r2, [r4, #0]
 8006e4e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8006ee0 <_scanf_chars+0xb0>
 8006e52:	06d1      	lsls	r1, r2, #27
 8006e54:	bf5f      	itttt	pl
 8006e56:	681a      	ldrpl	r2, [r3, #0]
 8006e58:	1d11      	addpl	r1, r2, #4
 8006e5a:	6019      	strpl	r1, [r3, #0]
 8006e5c:	6816      	ldrpl	r6, [r2, #0]
 8006e5e:	2700      	movs	r7, #0
 8006e60:	69a0      	ldr	r0, [r4, #24]
 8006e62:	b188      	cbz	r0, 8006e88 <_scanf_chars+0x58>
 8006e64:	2801      	cmp	r0, #1
 8006e66:	d107      	bne.n	8006e78 <_scanf_chars+0x48>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	781a      	ldrb	r2, [r3, #0]
 8006e6c:	6963      	ldr	r3, [r4, #20]
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	b953      	cbnz	r3, 8006e88 <_scanf_chars+0x58>
 8006e72:	2f00      	cmp	r7, #0
 8006e74:	d031      	beq.n	8006eda <_scanf_chars+0xaa>
 8006e76:	e022      	b.n	8006ebe <_scanf_chars+0x8e>
 8006e78:	2802      	cmp	r0, #2
 8006e7a:	d120      	bne.n	8006ebe <_scanf_chars+0x8e>
 8006e7c:	682b      	ldr	r3, [r5, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	f819 3003 	ldrb.w	r3, [r9, r3]
 8006e84:	071b      	lsls	r3, r3, #28
 8006e86:	d41a      	bmi.n	8006ebe <_scanf_chars+0x8e>
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	06da      	lsls	r2, r3, #27
 8006e8c:	bf5e      	ittt	pl
 8006e8e:	682b      	ldrpl	r3, [r5, #0]
 8006e90:	781b      	ldrbpl	r3, [r3, #0]
 8006e92:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006e96:	682a      	ldr	r2, [r5, #0]
 8006e98:	686b      	ldr	r3, [r5, #4]
 8006e9a:	3201      	adds	r2, #1
 8006e9c:	602a      	str	r2, [r5, #0]
 8006e9e:	68a2      	ldr	r2, [r4, #8]
 8006ea0:	3b01      	subs	r3, #1
 8006ea2:	3a01      	subs	r2, #1
 8006ea4:	606b      	str	r3, [r5, #4]
 8006ea6:	3701      	adds	r7, #1
 8006ea8:	60a2      	str	r2, [r4, #8]
 8006eaa:	b142      	cbz	r2, 8006ebe <_scanf_chars+0x8e>
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	dcd7      	bgt.n	8006e60 <_scanf_chars+0x30>
 8006eb0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	4798      	blx	r3
 8006eba:	2800      	cmp	r0, #0
 8006ebc:	d0d0      	beq.n	8006e60 <_scanf_chars+0x30>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	f013 0310 	ands.w	r3, r3, #16
 8006ec4:	d105      	bne.n	8006ed2 <_scanf_chars+0xa2>
 8006ec6:	68e2      	ldr	r2, [r4, #12]
 8006ec8:	3201      	adds	r2, #1
 8006eca:	60e2      	str	r2, [r4, #12]
 8006ecc:	69a2      	ldr	r2, [r4, #24]
 8006ece:	b102      	cbz	r2, 8006ed2 <_scanf_chars+0xa2>
 8006ed0:	7033      	strb	r3, [r6, #0]
 8006ed2:	6923      	ldr	r3, [r4, #16]
 8006ed4:	443b      	add	r3, r7
 8006ed6:	6123      	str	r3, [r4, #16]
 8006ed8:	2000      	movs	r0, #0
 8006eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ede:	bf00      	nop
 8006ee0:	080076c3 	.word	0x080076c3

08006ee4 <_scanf_i>:
 8006ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ee8:	4698      	mov	r8, r3
 8006eea:	4b74      	ldr	r3, [pc, #464]	@ (80070bc <_scanf_i+0x1d8>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	4682      	mov	sl, r0
 8006ef0:	4616      	mov	r6, r2
 8006ef2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006ef6:	b087      	sub	sp, #28
 8006ef8:	ab03      	add	r3, sp, #12
 8006efa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006efe:	4b70      	ldr	r3, [pc, #448]	@ (80070c0 <_scanf_i+0x1dc>)
 8006f00:	69a1      	ldr	r1, [r4, #24]
 8006f02:	4a70      	ldr	r2, [pc, #448]	@ (80070c4 <_scanf_i+0x1e0>)
 8006f04:	2903      	cmp	r1, #3
 8006f06:	bf08      	it	eq
 8006f08:	461a      	moveq	r2, r3
 8006f0a:	68a3      	ldr	r3, [r4, #8]
 8006f0c:	9201      	str	r2, [sp, #4]
 8006f0e:	1e5a      	subs	r2, r3, #1
 8006f10:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006f14:	bf88      	it	hi
 8006f16:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006f1a:	4627      	mov	r7, r4
 8006f1c:	bf82      	ittt	hi
 8006f1e:	eb03 0905 	addhi.w	r9, r3, r5
 8006f22:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006f26:	60a3      	strhi	r3, [r4, #8]
 8006f28:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006f2c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8006f30:	bf98      	it	ls
 8006f32:	f04f 0900 	movls.w	r9, #0
 8006f36:	6023      	str	r3, [r4, #0]
 8006f38:	463d      	mov	r5, r7
 8006f3a:	f04f 0b00 	mov.w	fp, #0
 8006f3e:	6831      	ldr	r1, [r6, #0]
 8006f40:	ab03      	add	r3, sp, #12
 8006f42:	7809      	ldrb	r1, [r1, #0]
 8006f44:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f48:	2202      	movs	r2, #2
 8006f4a:	f7f9 f951 	bl	80001f0 <memchr>
 8006f4e:	b328      	cbz	r0, 8006f9c <_scanf_i+0xb8>
 8006f50:	f1bb 0f01 	cmp.w	fp, #1
 8006f54:	d159      	bne.n	800700a <_scanf_i+0x126>
 8006f56:	6862      	ldr	r2, [r4, #4]
 8006f58:	b92a      	cbnz	r2, 8006f66 <_scanf_i+0x82>
 8006f5a:	6822      	ldr	r2, [r4, #0]
 8006f5c:	2108      	movs	r1, #8
 8006f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f62:	6061      	str	r1, [r4, #4]
 8006f64:	6022      	str	r2, [r4, #0]
 8006f66:	6822      	ldr	r2, [r4, #0]
 8006f68:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	68a2      	ldr	r2, [r4, #8]
 8006f70:	1e51      	subs	r1, r2, #1
 8006f72:	60a1      	str	r1, [r4, #8]
 8006f74:	b192      	cbz	r2, 8006f9c <_scanf_i+0xb8>
 8006f76:	6832      	ldr	r2, [r6, #0]
 8006f78:	1c51      	adds	r1, r2, #1
 8006f7a:	6031      	str	r1, [r6, #0]
 8006f7c:	7812      	ldrb	r2, [r2, #0]
 8006f7e:	f805 2b01 	strb.w	r2, [r5], #1
 8006f82:	6872      	ldr	r2, [r6, #4]
 8006f84:	3a01      	subs	r2, #1
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	6072      	str	r2, [r6, #4]
 8006f8a:	dc07      	bgt.n	8006f9c <_scanf_i+0xb8>
 8006f8c:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8006f90:	4631      	mov	r1, r6
 8006f92:	4650      	mov	r0, sl
 8006f94:	4790      	blx	r2
 8006f96:	2800      	cmp	r0, #0
 8006f98:	f040 8085 	bne.w	80070a6 <_scanf_i+0x1c2>
 8006f9c:	f10b 0b01 	add.w	fp, fp, #1
 8006fa0:	f1bb 0f03 	cmp.w	fp, #3
 8006fa4:	d1cb      	bne.n	8006f3e <_scanf_i+0x5a>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	b90b      	cbnz	r3, 8006fae <_scanf_i+0xca>
 8006faa:	230a      	movs	r3, #10
 8006fac:	6063      	str	r3, [r4, #4]
 8006fae:	6863      	ldr	r3, [r4, #4]
 8006fb0:	4945      	ldr	r1, [pc, #276]	@ (80070c8 <_scanf_i+0x1e4>)
 8006fb2:	6960      	ldr	r0, [r4, #20]
 8006fb4:	1ac9      	subs	r1, r1, r3
 8006fb6:	f000 f889 	bl	80070cc <__sccl>
 8006fba:	f04f 0b00 	mov.w	fp, #0
 8006fbe:	68a3      	ldr	r3, [r4, #8]
 8006fc0:	6822      	ldr	r2, [r4, #0]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d03d      	beq.n	8007042 <_scanf_i+0x15e>
 8006fc6:	6831      	ldr	r1, [r6, #0]
 8006fc8:	6960      	ldr	r0, [r4, #20]
 8006fca:	f891 c000 	ldrb.w	ip, [r1]
 8006fce:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006fd2:	2800      	cmp	r0, #0
 8006fd4:	d035      	beq.n	8007042 <_scanf_i+0x15e>
 8006fd6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8006fda:	d124      	bne.n	8007026 <_scanf_i+0x142>
 8006fdc:	0510      	lsls	r0, r2, #20
 8006fde:	d522      	bpl.n	8007026 <_scanf_i+0x142>
 8006fe0:	f10b 0b01 	add.w	fp, fp, #1
 8006fe4:	f1b9 0f00 	cmp.w	r9, #0
 8006fe8:	d003      	beq.n	8006ff2 <_scanf_i+0x10e>
 8006fea:	3301      	adds	r3, #1
 8006fec:	f109 39ff 	add.w	r9, r9, #4294967295
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6873      	ldr	r3, [r6, #4]
 8006ff4:	3b01      	subs	r3, #1
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	6073      	str	r3, [r6, #4]
 8006ffa:	dd1b      	ble.n	8007034 <_scanf_i+0x150>
 8006ffc:	6833      	ldr	r3, [r6, #0]
 8006ffe:	3301      	adds	r3, #1
 8007000:	6033      	str	r3, [r6, #0]
 8007002:	68a3      	ldr	r3, [r4, #8]
 8007004:	3b01      	subs	r3, #1
 8007006:	60a3      	str	r3, [r4, #8]
 8007008:	e7d9      	b.n	8006fbe <_scanf_i+0xda>
 800700a:	f1bb 0f02 	cmp.w	fp, #2
 800700e:	d1ae      	bne.n	8006f6e <_scanf_i+0x8a>
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007016:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800701a:	d1bf      	bne.n	8006f9c <_scanf_i+0xb8>
 800701c:	2110      	movs	r1, #16
 800701e:	6061      	str	r1, [r4, #4]
 8007020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007024:	e7a2      	b.n	8006f6c <_scanf_i+0x88>
 8007026:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800702a:	6022      	str	r2, [r4, #0]
 800702c:	780b      	ldrb	r3, [r1, #0]
 800702e:	f805 3b01 	strb.w	r3, [r5], #1
 8007032:	e7de      	b.n	8006ff2 <_scanf_i+0x10e>
 8007034:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007038:	4631      	mov	r1, r6
 800703a:	4650      	mov	r0, sl
 800703c:	4798      	blx	r3
 800703e:	2800      	cmp	r0, #0
 8007040:	d0df      	beq.n	8007002 <_scanf_i+0x11e>
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	05d9      	lsls	r1, r3, #23
 8007046:	d50d      	bpl.n	8007064 <_scanf_i+0x180>
 8007048:	42bd      	cmp	r5, r7
 800704a:	d909      	bls.n	8007060 <_scanf_i+0x17c>
 800704c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007050:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007054:	4632      	mov	r2, r6
 8007056:	4650      	mov	r0, sl
 8007058:	4798      	blx	r3
 800705a:	f105 39ff 	add.w	r9, r5, #4294967295
 800705e:	464d      	mov	r5, r9
 8007060:	42bd      	cmp	r5, r7
 8007062:	d028      	beq.n	80070b6 <_scanf_i+0x1d2>
 8007064:	6822      	ldr	r2, [r4, #0]
 8007066:	f012 0210 	ands.w	r2, r2, #16
 800706a:	d113      	bne.n	8007094 <_scanf_i+0x1b0>
 800706c:	702a      	strb	r2, [r5, #0]
 800706e:	6863      	ldr	r3, [r4, #4]
 8007070:	9e01      	ldr	r6, [sp, #4]
 8007072:	4639      	mov	r1, r7
 8007074:	4650      	mov	r0, sl
 8007076:	47b0      	blx	r6
 8007078:	f8d8 3000 	ldr.w	r3, [r8]
 800707c:	6821      	ldr	r1, [r4, #0]
 800707e:	1d1a      	adds	r2, r3, #4
 8007080:	f8c8 2000 	str.w	r2, [r8]
 8007084:	f011 0f20 	tst.w	r1, #32
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	d00f      	beq.n	80070ac <_scanf_i+0x1c8>
 800708c:	6018      	str	r0, [r3, #0]
 800708e:	68e3      	ldr	r3, [r4, #12]
 8007090:	3301      	adds	r3, #1
 8007092:	60e3      	str	r3, [r4, #12]
 8007094:	6923      	ldr	r3, [r4, #16]
 8007096:	1bed      	subs	r5, r5, r7
 8007098:	445d      	add	r5, fp
 800709a:	442b      	add	r3, r5
 800709c:	6123      	str	r3, [r4, #16]
 800709e:	2000      	movs	r0, #0
 80070a0:	b007      	add	sp, #28
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	f04f 0b00 	mov.w	fp, #0
 80070aa:	e7ca      	b.n	8007042 <_scanf_i+0x15e>
 80070ac:	07ca      	lsls	r2, r1, #31
 80070ae:	bf4c      	ite	mi
 80070b0:	8018      	strhmi	r0, [r3, #0]
 80070b2:	6018      	strpl	r0, [r3, #0]
 80070b4:	e7eb      	b.n	800708e <_scanf_i+0x1aa>
 80070b6:	2001      	movs	r0, #1
 80070b8:	e7f2      	b.n	80070a0 <_scanf_i+0x1bc>
 80070ba:	bf00      	nop
 80070bc:	080075dc 	.word	0x080075dc
 80070c0:	08007359 	.word	0x08007359
 80070c4:	08007439 	.word	0x08007439
 80070c8:	080076b7 	.word	0x080076b7

080070cc <__sccl>:
 80070cc:	b570      	push	{r4, r5, r6, lr}
 80070ce:	780b      	ldrb	r3, [r1, #0]
 80070d0:	4604      	mov	r4, r0
 80070d2:	2b5e      	cmp	r3, #94	@ 0x5e
 80070d4:	bf0b      	itete	eq
 80070d6:	784b      	ldrbeq	r3, [r1, #1]
 80070d8:	1c4a      	addne	r2, r1, #1
 80070da:	1c8a      	addeq	r2, r1, #2
 80070dc:	2100      	movne	r1, #0
 80070de:	bf08      	it	eq
 80070e0:	2101      	moveq	r1, #1
 80070e2:	3801      	subs	r0, #1
 80070e4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80070e8:	f800 1f01 	strb.w	r1, [r0, #1]!
 80070ec:	42a8      	cmp	r0, r5
 80070ee:	d1fb      	bne.n	80070e8 <__sccl+0x1c>
 80070f0:	b90b      	cbnz	r3, 80070f6 <__sccl+0x2a>
 80070f2:	1e50      	subs	r0, r2, #1
 80070f4:	bd70      	pop	{r4, r5, r6, pc}
 80070f6:	f081 0101 	eor.w	r1, r1, #1
 80070fa:	54e1      	strb	r1, [r4, r3]
 80070fc:	4610      	mov	r0, r2
 80070fe:	4602      	mov	r2, r0
 8007100:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007104:	2d2d      	cmp	r5, #45	@ 0x2d
 8007106:	d005      	beq.n	8007114 <__sccl+0x48>
 8007108:	2d5d      	cmp	r5, #93	@ 0x5d
 800710a:	d016      	beq.n	800713a <__sccl+0x6e>
 800710c:	2d00      	cmp	r5, #0
 800710e:	d0f1      	beq.n	80070f4 <__sccl+0x28>
 8007110:	462b      	mov	r3, r5
 8007112:	e7f2      	b.n	80070fa <__sccl+0x2e>
 8007114:	7846      	ldrb	r6, [r0, #1]
 8007116:	2e5d      	cmp	r6, #93	@ 0x5d
 8007118:	d0fa      	beq.n	8007110 <__sccl+0x44>
 800711a:	42b3      	cmp	r3, r6
 800711c:	dcf8      	bgt.n	8007110 <__sccl+0x44>
 800711e:	3002      	adds	r0, #2
 8007120:	461a      	mov	r2, r3
 8007122:	3201      	adds	r2, #1
 8007124:	4296      	cmp	r6, r2
 8007126:	54a1      	strb	r1, [r4, r2]
 8007128:	dcfb      	bgt.n	8007122 <__sccl+0x56>
 800712a:	1af2      	subs	r2, r6, r3
 800712c:	3a01      	subs	r2, #1
 800712e:	1c5d      	adds	r5, r3, #1
 8007130:	42b3      	cmp	r3, r6
 8007132:	bfa8      	it	ge
 8007134:	2200      	movge	r2, #0
 8007136:	18ab      	adds	r3, r5, r2
 8007138:	e7e1      	b.n	80070fe <__sccl+0x32>
 800713a:	4610      	mov	r0, r2
 800713c:	e7da      	b.n	80070f4 <__sccl+0x28>

0800713e <__submore>:
 800713e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007142:	460c      	mov	r4, r1
 8007144:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8007146:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800714a:	4299      	cmp	r1, r3
 800714c:	d11d      	bne.n	800718a <__submore+0x4c>
 800714e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8007152:	f7ff f92f 	bl	80063b4 <_malloc_r>
 8007156:	b918      	cbnz	r0, 8007160 <__submore+0x22>
 8007158:	f04f 30ff 	mov.w	r0, #4294967295
 800715c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007160:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007164:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007166:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800716a:	6360      	str	r0, [r4, #52]	@ 0x34
 800716c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007170:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007174:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8007178:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800717c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8007180:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007184:	6020      	str	r0, [r4, #0]
 8007186:	2000      	movs	r0, #0
 8007188:	e7e8      	b.n	800715c <__submore+0x1e>
 800718a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800718c:	0077      	lsls	r7, r6, #1
 800718e:	463a      	mov	r2, r7
 8007190:	f000 f83a 	bl	8007208 <_realloc_r>
 8007194:	4605      	mov	r5, r0
 8007196:	2800      	cmp	r0, #0
 8007198:	d0de      	beq.n	8007158 <__submore+0x1a>
 800719a:	eb00 0806 	add.w	r8, r0, r6
 800719e:	4601      	mov	r1, r0
 80071a0:	4632      	mov	r2, r6
 80071a2:	4640      	mov	r0, r8
 80071a4:	f7ff f88c 	bl	80062c0 <memcpy>
 80071a8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80071ac:	f8c4 8000 	str.w	r8, [r4]
 80071b0:	e7e9      	b.n	8007186 <__submore+0x48>

080071b2 <memmove>:
 80071b2:	4288      	cmp	r0, r1
 80071b4:	b510      	push	{r4, lr}
 80071b6:	eb01 0402 	add.w	r4, r1, r2
 80071ba:	d902      	bls.n	80071c2 <memmove+0x10>
 80071bc:	4284      	cmp	r4, r0
 80071be:	4623      	mov	r3, r4
 80071c0:	d807      	bhi.n	80071d2 <memmove+0x20>
 80071c2:	1e43      	subs	r3, r0, #1
 80071c4:	42a1      	cmp	r1, r4
 80071c6:	d008      	beq.n	80071da <memmove+0x28>
 80071c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80071cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 80071d0:	e7f8      	b.n	80071c4 <memmove+0x12>
 80071d2:	4402      	add	r2, r0
 80071d4:	4601      	mov	r1, r0
 80071d6:	428a      	cmp	r2, r1
 80071d8:	d100      	bne.n	80071dc <memmove+0x2a>
 80071da:	bd10      	pop	{r4, pc}
 80071dc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80071e0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80071e4:	e7f7      	b.n	80071d6 <memmove+0x24>
	...

080071e8 <_sbrk_r>:
 80071e8:	b538      	push	{r3, r4, r5, lr}
 80071ea:	4d06      	ldr	r5, [pc, #24]	@ (8007204 <_sbrk_r+0x1c>)
 80071ec:	2300      	movs	r3, #0
 80071ee:	4604      	mov	r4, r0
 80071f0:	4608      	mov	r0, r1
 80071f2:	602b      	str	r3, [r5, #0]
 80071f4:	f7f9 fd80 	bl	8000cf8 <_sbrk>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d102      	bne.n	8007202 <_sbrk_r+0x1a>
 80071fc:	682b      	ldr	r3, [r5, #0]
 80071fe:	b103      	cbz	r3, 8007202 <_sbrk_r+0x1a>
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	bd38      	pop	{r3, r4, r5, pc}
 8007204:	20014cd8 	.word	0x20014cd8

08007208 <_realloc_r>:
 8007208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800720c:	4680      	mov	r8, r0
 800720e:	4615      	mov	r5, r2
 8007210:	460c      	mov	r4, r1
 8007212:	b921      	cbnz	r1, 800721e <_realloc_r+0x16>
 8007214:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007218:	4611      	mov	r1, r2
 800721a:	f7ff b8cb 	b.w	80063b4 <_malloc_r>
 800721e:	b92a      	cbnz	r2, 800722c <_realloc_r+0x24>
 8007220:	f7ff f85c 	bl	80062dc <_free_r>
 8007224:	2400      	movs	r4, #0
 8007226:	4620      	mov	r0, r4
 8007228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800722c:	f000 f906 	bl	800743c <_malloc_usable_size_r>
 8007230:	4285      	cmp	r5, r0
 8007232:	4606      	mov	r6, r0
 8007234:	d802      	bhi.n	800723c <_realloc_r+0x34>
 8007236:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800723a:	d8f4      	bhi.n	8007226 <_realloc_r+0x1e>
 800723c:	4629      	mov	r1, r5
 800723e:	4640      	mov	r0, r8
 8007240:	f7ff f8b8 	bl	80063b4 <_malloc_r>
 8007244:	4607      	mov	r7, r0
 8007246:	2800      	cmp	r0, #0
 8007248:	d0ec      	beq.n	8007224 <_realloc_r+0x1c>
 800724a:	42b5      	cmp	r5, r6
 800724c:	462a      	mov	r2, r5
 800724e:	4621      	mov	r1, r4
 8007250:	bf28      	it	cs
 8007252:	4632      	movcs	r2, r6
 8007254:	f7ff f834 	bl	80062c0 <memcpy>
 8007258:	4621      	mov	r1, r4
 800725a:	4640      	mov	r0, r8
 800725c:	f7ff f83e 	bl	80062dc <_free_r>
 8007260:	463c      	mov	r4, r7
 8007262:	e7e0      	b.n	8007226 <_realloc_r+0x1e>

08007264 <_strtol_l.constprop.0>:
 8007264:	2b24      	cmp	r3, #36	@ 0x24
 8007266:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800726a:	4686      	mov	lr, r0
 800726c:	4690      	mov	r8, r2
 800726e:	d801      	bhi.n	8007274 <_strtol_l.constprop.0+0x10>
 8007270:	2b01      	cmp	r3, #1
 8007272:	d106      	bne.n	8007282 <_strtol_l.constprop.0+0x1e>
 8007274:	f7fe fff8 	bl	8006268 <__errno>
 8007278:	2316      	movs	r3, #22
 800727a:	6003      	str	r3, [r0, #0]
 800727c:	2000      	movs	r0, #0
 800727e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007282:	4834      	ldr	r0, [pc, #208]	@ (8007354 <_strtol_l.constprop.0+0xf0>)
 8007284:	460d      	mov	r5, r1
 8007286:	462a      	mov	r2, r5
 8007288:	f815 4b01 	ldrb.w	r4, [r5], #1
 800728c:	5d06      	ldrb	r6, [r0, r4]
 800728e:	f016 0608 	ands.w	r6, r6, #8
 8007292:	d1f8      	bne.n	8007286 <_strtol_l.constprop.0+0x22>
 8007294:	2c2d      	cmp	r4, #45	@ 0x2d
 8007296:	d12d      	bne.n	80072f4 <_strtol_l.constprop.0+0x90>
 8007298:	782c      	ldrb	r4, [r5, #0]
 800729a:	2601      	movs	r6, #1
 800729c:	1c95      	adds	r5, r2, #2
 800729e:	f033 0210 	bics.w	r2, r3, #16
 80072a2:	d109      	bne.n	80072b8 <_strtol_l.constprop.0+0x54>
 80072a4:	2c30      	cmp	r4, #48	@ 0x30
 80072a6:	d12a      	bne.n	80072fe <_strtol_l.constprop.0+0x9a>
 80072a8:	782a      	ldrb	r2, [r5, #0]
 80072aa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072ae:	2a58      	cmp	r2, #88	@ 0x58
 80072b0:	d125      	bne.n	80072fe <_strtol_l.constprop.0+0x9a>
 80072b2:	786c      	ldrb	r4, [r5, #1]
 80072b4:	2310      	movs	r3, #16
 80072b6:	3502      	adds	r5, #2
 80072b8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072bc:	f10c 3cff 	add.w	ip, ip, #4294967295
 80072c0:	2200      	movs	r2, #0
 80072c2:	fbbc f9f3 	udiv	r9, ip, r3
 80072c6:	4610      	mov	r0, r2
 80072c8:	fb03 ca19 	mls	sl, r3, r9, ip
 80072cc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072d0:	2f09      	cmp	r7, #9
 80072d2:	d81b      	bhi.n	800730c <_strtol_l.constprop.0+0xa8>
 80072d4:	463c      	mov	r4, r7
 80072d6:	42a3      	cmp	r3, r4
 80072d8:	dd27      	ble.n	800732a <_strtol_l.constprop.0+0xc6>
 80072da:	1c57      	adds	r7, r2, #1
 80072dc:	d007      	beq.n	80072ee <_strtol_l.constprop.0+0x8a>
 80072de:	4581      	cmp	r9, r0
 80072e0:	d320      	bcc.n	8007324 <_strtol_l.constprop.0+0xc0>
 80072e2:	d101      	bne.n	80072e8 <_strtol_l.constprop.0+0x84>
 80072e4:	45a2      	cmp	sl, r4
 80072e6:	db1d      	blt.n	8007324 <_strtol_l.constprop.0+0xc0>
 80072e8:	fb00 4003 	mla	r0, r0, r3, r4
 80072ec:	2201      	movs	r2, #1
 80072ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072f2:	e7eb      	b.n	80072cc <_strtol_l.constprop.0+0x68>
 80072f4:	2c2b      	cmp	r4, #43	@ 0x2b
 80072f6:	bf04      	itt	eq
 80072f8:	782c      	ldrbeq	r4, [r5, #0]
 80072fa:	1c95      	addeq	r5, r2, #2
 80072fc:	e7cf      	b.n	800729e <_strtol_l.constprop.0+0x3a>
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d1da      	bne.n	80072b8 <_strtol_l.constprop.0+0x54>
 8007302:	2c30      	cmp	r4, #48	@ 0x30
 8007304:	bf0c      	ite	eq
 8007306:	2308      	moveq	r3, #8
 8007308:	230a      	movne	r3, #10
 800730a:	e7d5      	b.n	80072b8 <_strtol_l.constprop.0+0x54>
 800730c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007310:	2f19      	cmp	r7, #25
 8007312:	d801      	bhi.n	8007318 <_strtol_l.constprop.0+0xb4>
 8007314:	3c37      	subs	r4, #55	@ 0x37
 8007316:	e7de      	b.n	80072d6 <_strtol_l.constprop.0+0x72>
 8007318:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800731c:	2f19      	cmp	r7, #25
 800731e:	d804      	bhi.n	800732a <_strtol_l.constprop.0+0xc6>
 8007320:	3c57      	subs	r4, #87	@ 0x57
 8007322:	e7d8      	b.n	80072d6 <_strtol_l.constprop.0+0x72>
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	e7e1      	b.n	80072ee <_strtol_l.constprop.0+0x8a>
 800732a:	1c53      	adds	r3, r2, #1
 800732c:	d108      	bne.n	8007340 <_strtol_l.constprop.0+0xdc>
 800732e:	2322      	movs	r3, #34	@ 0x22
 8007330:	f8ce 3000 	str.w	r3, [lr]
 8007334:	4660      	mov	r0, ip
 8007336:	f1b8 0f00 	cmp.w	r8, #0
 800733a:	d0a0      	beq.n	800727e <_strtol_l.constprop.0+0x1a>
 800733c:	1e69      	subs	r1, r5, #1
 800733e:	e006      	b.n	800734e <_strtol_l.constprop.0+0xea>
 8007340:	b106      	cbz	r6, 8007344 <_strtol_l.constprop.0+0xe0>
 8007342:	4240      	negs	r0, r0
 8007344:	f1b8 0f00 	cmp.w	r8, #0
 8007348:	d099      	beq.n	800727e <_strtol_l.constprop.0+0x1a>
 800734a:	2a00      	cmp	r2, #0
 800734c:	d1f6      	bne.n	800733c <_strtol_l.constprop.0+0xd8>
 800734e:	f8c8 1000 	str.w	r1, [r8]
 8007352:	e794      	b.n	800727e <_strtol_l.constprop.0+0x1a>
 8007354:	080076c3 	.word	0x080076c3

08007358 <_strtol_r>:
 8007358:	f7ff bf84 	b.w	8007264 <_strtol_l.constprop.0>

0800735c <_strtoul_l.constprop.0>:
 800735c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007360:	4e34      	ldr	r6, [pc, #208]	@ (8007434 <_strtoul_l.constprop.0+0xd8>)
 8007362:	4686      	mov	lr, r0
 8007364:	460d      	mov	r5, r1
 8007366:	4628      	mov	r0, r5
 8007368:	f815 4b01 	ldrb.w	r4, [r5], #1
 800736c:	5d37      	ldrb	r7, [r6, r4]
 800736e:	f017 0708 	ands.w	r7, r7, #8
 8007372:	d1f8      	bne.n	8007366 <_strtoul_l.constprop.0+0xa>
 8007374:	2c2d      	cmp	r4, #45	@ 0x2d
 8007376:	d12f      	bne.n	80073d8 <_strtoul_l.constprop.0+0x7c>
 8007378:	782c      	ldrb	r4, [r5, #0]
 800737a:	2701      	movs	r7, #1
 800737c:	1c85      	adds	r5, r0, #2
 800737e:	f033 0010 	bics.w	r0, r3, #16
 8007382:	d109      	bne.n	8007398 <_strtoul_l.constprop.0+0x3c>
 8007384:	2c30      	cmp	r4, #48	@ 0x30
 8007386:	d12c      	bne.n	80073e2 <_strtoul_l.constprop.0+0x86>
 8007388:	7828      	ldrb	r0, [r5, #0]
 800738a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800738e:	2858      	cmp	r0, #88	@ 0x58
 8007390:	d127      	bne.n	80073e2 <_strtoul_l.constprop.0+0x86>
 8007392:	786c      	ldrb	r4, [r5, #1]
 8007394:	2310      	movs	r3, #16
 8007396:	3502      	adds	r5, #2
 8007398:	f04f 38ff 	mov.w	r8, #4294967295
 800739c:	2600      	movs	r6, #0
 800739e:	fbb8 f8f3 	udiv	r8, r8, r3
 80073a2:	fb03 f908 	mul.w	r9, r3, r8
 80073a6:	ea6f 0909 	mvn.w	r9, r9
 80073aa:	4630      	mov	r0, r6
 80073ac:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80073b0:	f1bc 0f09 	cmp.w	ip, #9
 80073b4:	d81c      	bhi.n	80073f0 <_strtoul_l.constprop.0+0x94>
 80073b6:	4664      	mov	r4, ip
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	dd2a      	ble.n	8007412 <_strtoul_l.constprop.0+0xb6>
 80073bc:	f1b6 3fff 	cmp.w	r6, #4294967295
 80073c0:	d007      	beq.n	80073d2 <_strtoul_l.constprop.0+0x76>
 80073c2:	4580      	cmp	r8, r0
 80073c4:	d322      	bcc.n	800740c <_strtoul_l.constprop.0+0xb0>
 80073c6:	d101      	bne.n	80073cc <_strtoul_l.constprop.0+0x70>
 80073c8:	45a1      	cmp	r9, r4
 80073ca:	db1f      	blt.n	800740c <_strtoul_l.constprop.0+0xb0>
 80073cc:	fb00 4003 	mla	r0, r0, r3, r4
 80073d0:	2601      	movs	r6, #1
 80073d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073d6:	e7e9      	b.n	80073ac <_strtoul_l.constprop.0+0x50>
 80073d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80073da:	bf04      	itt	eq
 80073dc:	782c      	ldrbeq	r4, [r5, #0]
 80073de:	1c85      	addeq	r5, r0, #2
 80073e0:	e7cd      	b.n	800737e <_strtoul_l.constprop.0+0x22>
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d8      	bne.n	8007398 <_strtoul_l.constprop.0+0x3c>
 80073e6:	2c30      	cmp	r4, #48	@ 0x30
 80073e8:	bf0c      	ite	eq
 80073ea:	2308      	moveq	r3, #8
 80073ec:	230a      	movne	r3, #10
 80073ee:	e7d3      	b.n	8007398 <_strtoul_l.constprop.0+0x3c>
 80073f0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80073f4:	f1bc 0f19 	cmp.w	ip, #25
 80073f8:	d801      	bhi.n	80073fe <_strtoul_l.constprop.0+0xa2>
 80073fa:	3c37      	subs	r4, #55	@ 0x37
 80073fc:	e7dc      	b.n	80073b8 <_strtoul_l.constprop.0+0x5c>
 80073fe:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8007402:	f1bc 0f19 	cmp.w	ip, #25
 8007406:	d804      	bhi.n	8007412 <_strtoul_l.constprop.0+0xb6>
 8007408:	3c57      	subs	r4, #87	@ 0x57
 800740a:	e7d5      	b.n	80073b8 <_strtoul_l.constprop.0+0x5c>
 800740c:	f04f 36ff 	mov.w	r6, #4294967295
 8007410:	e7df      	b.n	80073d2 <_strtoul_l.constprop.0+0x76>
 8007412:	1c73      	adds	r3, r6, #1
 8007414:	d106      	bne.n	8007424 <_strtoul_l.constprop.0+0xc8>
 8007416:	2322      	movs	r3, #34	@ 0x22
 8007418:	f8ce 3000 	str.w	r3, [lr]
 800741c:	4630      	mov	r0, r6
 800741e:	b932      	cbnz	r2, 800742e <_strtoul_l.constprop.0+0xd2>
 8007420:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007424:	b107      	cbz	r7, 8007428 <_strtoul_l.constprop.0+0xcc>
 8007426:	4240      	negs	r0, r0
 8007428:	2a00      	cmp	r2, #0
 800742a:	d0f9      	beq.n	8007420 <_strtoul_l.constprop.0+0xc4>
 800742c:	b106      	cbz	r6, 8007430 <_strtoul_l.constprop.0+0xd4>
 800742e:	1e69      	subs	r1, r5, #1
 8007430:	6011      	str	r1, [r2, #0]
 8007432:	e7f5      	b.n	8007420 <_strtoul_l.constprop.0+0xc4>
 8007434:	080076c3 	.word	0x080076c3

08007438 <_strtoul_r>:
 8007438:	f7ff bf90 	b.w	800735c <_strtoul_l.constprop.0>

0800743c <_malloc_usable_size_r>:
 800743c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007440:	1f18      	subs	r0, r3, #4
 8007442:	2b00      	cmp	r3, #0
 8007444:	bfbc      	itt	lt
 8007446:	580b      	ldrlt	r3, [r1, r0]
 8007448:	18c0      	addlt	r0, r0, r3
 800744a:	4770      	bx	lr

0800744c <_init>:
 800744c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800744e:	bf00      	nop
 8007450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007452:	bc08      	pop	{r3}
 8007454:	469e      	mov	lr, r3
 8007456:	4770      	bx	lr

08007458 <_fini>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr
